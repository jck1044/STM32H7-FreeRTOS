
remakeFPrime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e710  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800e9b0  0800e9b0  0001e9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea90  0800ea90  0001ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea98  0800ea98  0001ea98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ea9c  0800ea9c  0001ea9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800eaa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800eb18  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800eb78  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a5c  24000138  0800ebd8  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005b94  0800ebd8  00025b94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000417d7  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006326  00000000  00000000  0006193d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fa8  00000000  00000000  00067c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d68  00000000  00000000  0006ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009843  00000000  00000000  0006d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bfb0  00000000  00000000  000771bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4d4c  00000000  00000000  000b316b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00257eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d438  00000000  00000000  00257f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e998 	.word	0x0800e998

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	0800e998 	.word	0x0800e998

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f002 f823 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f855 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fd9f 	bl	8001134 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f6:	f000 f8f3 	bl	80007e0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005fa:	f000 f96b 	bl	80008d4 <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005fe:	f000 f9a1 	bl	8000944 <MX_ETH_Init>
  MX_FMC_Init();
 8000602:	f000 fc9b 	bl	8000f3c <MX_FMC_Init>
  MX_I2C1_Init();
 8000606:	f000 f9e9 	bl	80009dc <MX_I2C1_Init>
  MX_LTDC_Init();
 800060a:	f000 fa27 	bl	8000a5c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800060e:	f000 fad7 	bl	8000bc0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000612:	f000 fb25 	bl	8000c60 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8000616:	f000 fbe1 	bl	8000ddc <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061a:	f000 fc2b 	bl	8000e74 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061e:	f000 fc5b 	bl	8000ed8 <MX_USB_OTG_HS_PCD_Init>
  MX_RTC_Init();
 8000622:	f000 faf5 	bl	8000c10 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000626:	f00b fb8f 	bl	800bd48 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  //  	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_4);
  for (int i = 0; i < 20; i++)
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e00a      	b.n	8000646 <main+0x62>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4816      	ldr	r0, [pc, #88]	; (800068c <main+0xa8>)
 8000634:	f004 f923 	bl	800487e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f002 f856 	bl	80026ec <HAL_Delay>
  for (int i = 0; i < 20; i++)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b13      	cmp	r3, #19
 800064a:	ddf1      	ble.n	8000630 <main+0x4c>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <main+0xac>)
 800064e:	2100      	movs	r1, #0
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <main+0xb0>)
 8000652:	f00b fbc3 	bl	800bddc <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <main+0xb4>)
 800065a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f00b fb98 	bl	800bd90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (int i = 0; i < 20; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	e00a      	b.n	800067c <main+0x98>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <main+0xa8>)
 800066a:	f004 f908 	bl	800487e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800066e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000672:	f002 f83b 	bl	80026ec <HAL_Delay>
  for (int i = 0; i < 20; i++)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b13      	cmp	r3, #19
 8000680:	ddf1      	ble.n	8000666 <main+0x82>
 8000682:	2300      	movs	r3, #0
  //   /* USER CODE END WHILE */

  //   /* USER CODE BEGIN 3 */
  // }
  /* USER CODE END 3 */
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	58020000 	.word	0x58020000
 8000690:	0800e9d4 	.word	0x0800e9d4
 8000694:	08001415 	.word	0x08001415
 8000698:	240010ec 	.word	0x240010ec

0800069c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00e f8aa 	bl	800e804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00e f8a4 	bl	800e804 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006bc:	2002      	movs	r0, #2
 80006be:	f004 ff35 	bl	800552c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <SystemClock_Config+0x134>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	4a41      	ldr	r2, [pc, #260]	; (80007d0 <SystemClock_Config+0x134>)
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <SystemClock_Config+0x134>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <SystemClock_Config+0x138>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a3c      	ldr	r2, [pc, #240]	; (80007d4 <SystemClock_Config+0x138>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <SystemClock_Config+0x138>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80006f4:	e007      	b.n	8000706 <SystemClock_Config+0x6a>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	4837      	ldr	r0, [pc, #220]	; (80007d8 <SystemClock_Config+0x13c>)
 80006fa:	f004 f8c0 	bl	800487e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000702:	f001 fff3 	bl	80026ec <HAL_Delay>
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <SystemClock_Config+0x138>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000712:	d1f0      	bne.n	80006f6 <SystemClock_Config+0x5a>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8000714:	f004 fefa 	bl	800550c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000718:	f002 f80c 	bl	8002734 <HAL_GetREVID>
 800071c:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <SystemClock_Config+0x140>)
 800071e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <SystemClock_Config+0x140>)
 8000722:	f023 0318 	bic.w	r3, r3, #24
 8000726:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0x140>)
 800072a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072c:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <SystemClock_Config+0x140>)
 800072e:	f023 0303 	bic.w	r3, r3, #3
 8000732:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8000734:	2326      	movs	r3, #38	; 0x26
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800073c:	2301      	movs	r3, #1
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000754:	2309      	movs	r3, #9
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000764:	230c      	movs	r3, #12
 8000766:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000768:	2302      	movs	r3, #2
 800076a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800076c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000770:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4618      	mov	r0, r3
 8000778:	f004 ffdc 	bl	8005734 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000782:	f000 fe75 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000786:	233f      	movs	r3, #63	; 0x3f
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800079e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2101      	movs	r1, #1
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 fc1b 	bl	8005fe8 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80007b8:	f000 fe5a 	bl	8001470 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f005 fdc6 	bl	8006354 <HAL_RCC_MCOConfig>
}
 80007c8:	bf00      	nop
 80007ca:	3770      	adds	r7, #112	; 0x70
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58020000 	.word	0x58020000
 80007dc:	58024400 	.word	0x58024400

080007e0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000806:	4a30      	ldr	r2, [pc, #192]	; (80008c8 <MX_ADC1_Init+0xe8>)
 8000808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800080c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000820:	2204      	movs	r2, #4
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000826:	2200      	movs	r2, #0
 8000828:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800082c:	2200      	movs	r2, #0
 800082e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000832:	2201      	movs	r2, #1
 8000834:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_ADC1_Init+0xe4>)
 8000864:	f002 f928 	bl	8002ab8 <HAL_ADC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800086e:	f000 fdff 	bl	8001470 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_ADC1_Init+0xe4>)
 800087e:	f002 ff3f 	bl	8003700 <HAL_ADCEx_MultiModeConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000888:	f000 fdf2 	bl	8001470 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC1_Init+0xec>)
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000890:	2306      	movs	r3, #6
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_ADC1_Init+0xf0>)
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089c:	2304      	movs	r3, #4
 800089e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_ADC1_Init+0xe4>)
 80008ae:	f002 faa5 	bl	8002dfc <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008b8:	f000 fdda 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2400018c 	.word	0x2400018c
 80008c8:	40022000 	.word	0x40022000
 80008cc:	04300002 	.word	0x04300002
 80008d0:	47ff0000 	.word	0x47ff0000

080008d4 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008da:	4a19      	ldr	r2, [pc, #100]	; (8000940 <MX_DFSDM1_Init+0x6c>)
 80008dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_DFSDM1_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_DFSDM1_Init+0x68>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DFSDM1_Init+0x68>)
 800090a:	2204      	movs	r2, #4
 800090c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_DFSDM1_Init+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DFSDM1_Init+0x68>)
 8000916:	2201      	movs	r2, #1
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_DFSDM1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_DFSDM1_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_DFSDM1_Init+0x68>)
 8000928:	f003 f8a8 	bl	8003a7c <HAL_DFSDM_ChannelInit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000932:	f000 fd9d 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	240001f0 	.word	0x240001f0
 8000940:	40017020 	.word	0x40017020

08000944 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ETH_Init+0x80>)
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_ETH_Init+0x84>)
 800094c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ETH_Init+0x88>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ETH_Init+0x88>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ETH_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ETH_Init+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ETH_Init+0x80>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_ETH_Init+0x88>)
 8000976:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ETH_Init+0x80>)
 800097a:	2201      	movs	r2, #1
 800097c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ETH_Init+0x80>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_ETH_Init+0x8c>)
 8000982:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ETH_Init+0x80>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x90>)
 8000988:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ETH_Init+0x80>)
 800098c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000990:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x80>)
 8000994:	f003 f986 	bl	8003ca4 <HAL_ETH_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 fd67 	bl	8001470 <Error_Handler>
  }

  memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80009a2:	2238      	movs	r2, #56	; 0x38
 80009a4:	2100      	movs	r1, #0
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x94>)
 80009a8:	f00d ff2c 	bl	800e804 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_ETH_Init+0x94>)
 80009ae:	2221      	movs	r2, #33	; 0x21
 80009b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_ETH_Init+0x94>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_ETH_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000228 	.word	0x24000228
 80009c8:	40028000 	.word	0x40028000
 80009cc:	240010f0 	.word	0x240010f0
 80009d0:	240000d8 	.word	0x240000d8
 80009d4:	24000078 	.word	0x24000078
 80009d8:	24000154 	.word	0x24000154

080009dc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	f003 ff4c 	bl	80048b4 <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 fd25 	bl	8001470 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a2a:	f003 ffd3 	bl	80049d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 fd1c 	bl	8001470 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a3c:	f004 f815 	bl	8004a6a <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fd13 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	240002d8 	.word	0x240002d8
 8000a54:	40005400 	.word	0x40005400
 8000a58:	109093dc 	.word	0x109093dc

08000a5c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	; 0x68
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a66:	2234      	movs	r2, #52	; 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00d feca 	bl	800e804 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2234      	movs	r2, #52	; 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d fec4 	bl	800e804 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a7c:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a7e:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <MX_LTDC_Init+0x160>)
 8000a80:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a82:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000aa8:	220e      	movs	r2, #14
 8000aaa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000aac:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000aae:	2205      	movs	r2, #5
 8000ab0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000ab2:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000ab4:	f240 228e 	movw	r2, #654	; 0x28e
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000aba:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000abc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000ac4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000acc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000aea:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000aec:	f004 f80a 	bl	8004b04 <HAL_LTDC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000af6:	f000 fcbb 	bl	8001470 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000b48:	f004 f8ac 	bl	8004ca4 <HAL_LTDC_ConfigLayer>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000b52:	f000 fc8d 	bl	8001470 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_LTDC_Init+0x15c>)
 8000ba2:	f004 f87f 	bl	8004ca4 <HAL_LTDC_ConfigLayer>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000bac:	f000 fc60 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3768      	adds	r7, #104	; 0x68
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2400032c 	.word	0x2400032c
 8000bbc:	50001000 	.word	0x50001000

08000bc0 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <MX_QUADSPI_Init+0x4c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bcc:	22ff      	movs	r2, #255	; 0xff
 8000bce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bf0:	2240      	movs	r2, #64	; 0x40
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_QUADSPI_Init+0x48>)
 8000bf6:	f004 fce3 	bl	80055c0 <HAL_QSPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000c00:	f000 fc36 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	240003d4 	.word	0x240003d4
 8000c0c:	52005000 	.word	0x52005000

08000c10 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_RTC_Init+0x4c>)
 8000c18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c22:	227f      	movs	r2, #127	; 0x7f
 8000c24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c28:	22ff      	movs	r2, #255	; 0xff
 8000c2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_RTC_Init+0x48>)
 8000c46:	f008 fb05 	bl	8009254 <HAL_RTC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c50:	f000 fc0e 	bl	8001470 <Error_Handler>
  //	sTime.Seconds = 45;
  //	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  //	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  //	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
  /* USER CODE END RTC_Init 2 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000420 	.word	0x24000420
 8000c5c:	58004000 	.word	0x58004000

08000c60 <MX_SAI1_Init>:
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c64:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c66:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <MX_SAI1_Init+0x16c>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c6a:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c70:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c78:	2240      	movs	r2, #64	; 0x40
 8000c7a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c7c:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c88:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c8e:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c94:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <MX_SAI1_Init+0x170>)
 8000ca4:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d0a:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <MX_SAI1_Init+0x168>)
 8000d0c:	f008 fbba 	bl	8009484 <HAL_SAI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000d16:	f000 fbab 	bl	8001470 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <MX_SAI1_Init+0x178>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d28:	2203      	movs	r2, #3
 8000d2a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_SAI1_Init+0x174>)
 8000db6:	f008 fb65 	bl	8009484 <HAL_SAI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000dc0:	f000 fb56 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24000444 	.word	0x24000444
 8000dcc:	40015804 	.word	0x40015804
 8000dd0:	0002ee00 	.word	0x0002ee00
 8000dd4:	240004dc 	.word	0x240004dc
 8000dd8:	40015824 	.word	0x40015824

08000ddc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_USART1_UART_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e26:	f009 f977 	bl	800a118 <HAL_UART_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e30:	f000 fb1e 	bl	8001470 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e38:	f00a f979 	bl	800b12e <HAL_UARTEx_SetTxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e42:	f000 fb15 	bl	8001470 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e4a:	f00a f9ae 	bl	800b1aa <HAL_UARTEx_SetRxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f000 fb0c 	bl	8001470 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e5a:	f00a f92f 	bl	800b0bc <HAL_UARTEx_DisableFifoMode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 fb04 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000574 	.word	0x24000574
 8000e70:	40011000 	.word	0x40011000

08000e74 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e80:	2209      	movs	r2, #9
 8000e82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebc:	f004 f9de 	bl	800527c <HAL_PCD_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ec6:	f000 fad3 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000608 	.word	0x24000608
 8000ed4:	40080000 	.word	0x40080000

08000ed8 <MX_USB_OTG_HS_PCD_Init>:
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f20:	f004 f9ac 	bl	800527c <HAL_PCD_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f000 faa1 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000b14 	.word	0x24000b14
 8000f38:	40040000 	.word	0x40040000

08000f3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	; 0x38
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
   */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000f68:	4b6c      	ldr	r3, [pc, #432]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f6a:	4a6d      	ldr	r2, [pc, #436]	; (8001120 <MX_FMC_Init+0x1e4>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f6e:	4b6b      	ldr	r3, [pc, #428]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f70:	4a6c      	ldr	r2, [pc, #432]	; (8001124 <MX_FMC_Init+0x1e8>)
 8000f72:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f74:	4b69      	ldr	r3, [pc, #420]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f7a:	4b68      	ldr	r3, [pc, #416]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000f80:	4b66      	ldr	r3, [pc, #408]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f86:	4b65      	ldr	r3, [pc, #404]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f92:	4b62      	ldr	r3, [pc, #392]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <MX_FMC_Init+0x1e0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000f9e:	4b5f      	ldr	r3, [pc, #380]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000faa:	4b5c      	ldr	r3, [pc, #368]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000fb0:	4b5a      	ldr	r3, [pc, #360]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <MX_FMC_Init+0x1e0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000fe4:	2311      	movs	r3, #17
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4849      	ldr	r0, [pc, #292]	; (800111c <MX_FMC_Init+0x1e0>)
 8000ff6:	f004 f82d 	bl	8005054 <HAL_NOR_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FMC_Init+0xc8>
  {
    Error_Handler();
 8001000:	f000 fa36 	bl	8001470 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
   */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001004:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001006:	4a46      	ldr	r2, [pc, #280]	; (8001120 <MX_FMC_Init+0x1e4>)
 8001008:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <MX_FMC_Init+0x1ec>)
 800100c:	4a45      	ldr	r2, [pc, #276]	; (8001124 <MX_FMC_Init+0x1e8>)
 800100e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001012:	2204      	movs	r2, #4
 8001014:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001016:	4b44      	ldr	r3, [pc, #272]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800101c:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MX_FMC_Init+0x1ec>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001024:	2210      	movs	r2, #16
 8001026:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <MX_FMC_Init+0x1ec>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001034:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <MX_FMC_Init+0x1ec>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001042:	2200      	movs	r2, #0
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <MX_FMC_Init+0x1ec>)
 800104e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_FMC_Init+0x1ec>)
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001068:	2200      	movs	r2, #0
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800106c:	230f      	movs	r3, #15
 800106e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001070:	230f      	movs	r3, #15
 8001072:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001078:	230f      	movs	r3, #15
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800107c:	2310      	movs	r3, #16
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001080:	2311      	movs	r3, #17
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <MX_FMC_Init+0x1ec>)
 8001092:	f008 fd17 	bl	8009ac4 <HAL_SRAM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_FMC_Init+0x164>
  {
    Error_Handler();
 800109c:	f000 f9e8 	bl	8001470 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
   */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_FMC_Init+0x1f0>)
 80010a2:	4a23      	ldr	r2, [pc, #140]	; (8001130 <MX_FMC_Init+0x1f4>)
 80010a4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_FMC_Init+0x1f0>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_FMC_Init+0x1f0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_FMC_Init+0x1f0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_FMC_Init+0x1f0>)
 80010ba:	2220      	movs	r2, #32
 80010bc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_FMC_Init+0x1f0>)
 80010c0:	2240      	movs	r2, #64	; 0x40
 80010c2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_FMC_Init+0x1f0>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_FMC_Init+0x1f0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_FMC_Init+0x1f0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_FMC_Init+0x1f0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_FMC_Init+0x1f0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80010e2:	2310      	movs	r3, #16
 80010e4:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80010e6:	2310      	movs	r3, #16
 80010e8:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 80010ea:	2310      	movs	r3, #16
 80010ec:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 80010ee:	2310      	movs	r3, #16
 80010f0:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 80010f2:	2310      	movs	r3, #16
 80010f4:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 80010f6:	2310      	movs	r3, #16
 80010f8:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 80010fa:	2310      	movs	r3, #16
 80010fc:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <MX_FMC_Init+0x1f0>)
 8001104:	f008 fca2 	bl	8009a4c <HAL_SDRAM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_FMC_Init+0x1d6>
  {
    Error_Handler();
 800110e:	f000 f9af 	bl	8001470 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24001020 	.word	0x24001020
 8001120:	52004000 	.word	0x52004000
 8001124:	52004104 	.word	0x52004104
 8001128:	2400106c 	.word	0x2400106c
 800112c:	240010b8 	.word	0x240010b8
 8001130:	52004140 	.word	0x52004140

08001134 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	; 0x40
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800114a:	4baa      	ldr	r3, [pc, #680]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4aa8      	ldr	r2, [pc, #672]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4ba6      	ldr	r3, [pc, #664]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4ba2      	ldr	r3, [pc, #648]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	4aa1      	ldr	r2, [pc, #644]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001178:	4b9e      	ldr	r3, [pc, #632]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001186:	4b9b      	ldr	r3, [pc, #620]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	4a99      	ldr	r2, [pc, #612]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001196:	4b97      	ldr	r3, [pc, #604]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a4:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	4b84      	ldr	r3, [pc, #528]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	4a83      	ldr	r2, [pc, #524]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f0:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a7b      	ldr	r2, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800121c:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a74      	ldr	r2, [pc, #464]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b71      	ldr	r3, [pc, #452]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	4b6e      	ldr	r3, [pc, #440]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <MX_GPIO_Init+0x2c0>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2108      	movs	r1, #8
 8001298:	4857      	ldr	r0, [pc, #348]	; (80013f8 <MX_GPIO_Init+0x2c4>)
 800129a:	f003 fad7 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	4855      	ldr	r0, [pc, #340]	; (80013fc <MX_GPIO_Init+0x2c8>)
 80012a6:	f003 fad1 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin | LED3_RGB_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2150      	movs	r1, #80	; 0x50
 80012ae:	4854      	ldr	r0, [pc, #336]	; (8001400 <MX_GPIO_Init+0x2cc>)
 80012b0:	f003 facc 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CLK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin | SDIO1_D3_Pin | SDIO1_CLK_Pin | SDIO1_D0_Pin | SDIO1_D1_Pin;
 80012b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012c6:	230c      	movs	r3, #12
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ce:	4619      	mov	r1, r3
 80012d0:	484c      	ldr	r0, [pc, #304]	; (8001404 <MX_GPIO_Init+0x2d0>)
 80012d2:	f003 f90b 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 80012d6:	2308      	movs	r3, #8
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4842      	ldr	r0, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x2c4>)
 80012ee:	f003 f8fd 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 80012f2:	2304      	movs	r3, #4
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001302:	230a      	movs	r3, #10
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	483e      	ldr	r0, [pc, #248]	; (8001408 <MX_GPIO_Init+0x2d4>)
 800130e:	f003 f8ed 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CDIR_Pin SDIO1_CKIN_Pin */
  GPIO_InitStruct.Pin = SDIO1_CDIR_Pin | SDIO1_CKIN_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001324:	2307      	movs	r3, #7
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4837      	ldr	r0, [pc, #220]	; (800140c <MX_GPIO_Init+0x2d8>)
 8001330:	f003 f8dc 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001334:	2304      	movs	r3, #4
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001344:	230c      	movs	r3, #12
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	482a      	ldr	r0, [pc, #168]	; (80013f8 <MX_GPIO_Init+0x2c4>)
 8001350:	f003 f8cc 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001368:	4619      	mov	r1, r3
 800136a:	4829      	ldr	r0, [pc, #164]	; (8001410 <MX_GPIO_Init+0x2dc>)
 800136c:	f003 f8be 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001382:	2300      	movs	r3, #0
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138a:	4619      	mov	r1, r3
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_GPIO_Init+0x2cc>)
 800138e:	f003 f8ad 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D123DIR_Pin SDIO1_D0DIR_Pin */
  GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin | SDIO1_D0DIR_Pin;
 8001392:	23c0      	movs	r3, #192	; 0xc0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 80013a2:	2308      	movs	r3, #8
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	4619      	mov	r1, r3
 80013ac:	4815      	ldr	r0, [pc, #84]	; (8001404 <MX_GPIO_Init+0x2d0>)
 80013ae:	f003 f89d 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_GPIO_Init+0x2c8>)
 80013cc:	f003 f88e 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin | LED3_RGB_Pin;
 80013d0:	2350      	movs	r3, #80	; 0x50
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_GPIO_Init+0x2cc>)
 80013e8:	f003 f880 	bl	80044ec <HAL_GPIO_Init>
}
 80013ec:	bf00      	nop
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020c00 	.word	0x58020c00
 80013fc:	58021400 	.word	0x58021400
 8001400:	58020000 	.word	0x58020000
 8001404:	58020800 	.word	0x58020800
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58022000 	.word	0x58022000

08001414 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for (int i = 0; i < 20; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e00a      	b.n	8001438 <StartDefaultTask+0x24>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001422:	2140      	movs	r1, #64	; 0x40
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <StartDefaultTask+0x34>)
 8001426:	f003 fa2a 	bl	800487e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800142a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142e:	f001 f95d 	bl	80026ec <HAL_Delay>
  for (int i = 0; i < 20; i++)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b13      	cmp	r3, #19
 800143c:	ddf1      	ble.n	8001422 <StartDefaultTask+0xe>
  //	uint16_t milliSec = 1000 - ((sTime.SubSeconds * 1000) / (sTime.SecondFraction));
  //	printf("-> Time Value: %.2d:%.2d:%.2d:%.3d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds, milliSec);
  //    osDelay(1);
  // }
  /* USER CODE END 5 */
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	58020000 	.word	0x58020000

0800144c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800145e:	f001 f925 	bl	80026ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010000 	.word	0x40010000

08001470 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <Error_Handler+0x1c>)
 800147c:	f003 f9ff 	bl	800487e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8001480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001484:	f001 f932 	bl	80026ec <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001488:	e7f6      	b.n	8001478 <Error_Handler+0x8>
 800148a:	bf00      	nop
 800148c:	58020000 	.word	0x58020000

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x38>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_MspInit+0x38>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_MspInit+0x38>)
 80014a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	210f      	movs	r1, #15
 80014b8:	f06f 0001 	mvn.w	r0, #1
 80014bc:	f002 fab6 	bl	8003a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	58024400 	.word	0x58024400

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0b4      	sub	sp, #208	; 0xd0
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	22c0      	movs	r2, #192	; 0xc0
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00d f991 	bl	800e804 <memset>
  if(hadc->Instance==ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <HAL_ADC_MspInit+0xc4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d14d      	bne.n	8001588 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80014fc:	2309      	movs	r3, #9
 80014fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001504:	2302      	movs	r3, #2
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800150c:	23c0      	movs	r3, #192	; 0xc0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001510:	2320      	movs	r3, #32
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001514:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f005 f997 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8001530:	f7ff ff9e 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 8001536:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 8001546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_ADC_MspInit+0xc8>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001570:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001574:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001578:	f001 f8fc 	bl	8002774 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800157c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001580:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001584:	f001 f8f6 	bl	8002774 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	37d0      	adds	r7, #208	; 0xd0
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40022000 	.word	0x40022000
 8001594:	58024400 	.word	0x58024400

08001598 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ba      	sub	sp, #232	; 0xe8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	22c0      	movs	r2, #192	; 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00d f923 	bl	800e804 <memset>
  if(DFSDM1_Init == 0)
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_DFSDM_ChannelMspInit+0xf4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d15e      	bne.n	8001684 <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80015c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 f93c 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_DFSDM_ChannelMspInit+0x52>
    {
      Error_Handler();
 80015e6:	f7ff ff43 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80015ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80015fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001626:	2304      	movs	r3, #4
 8001628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800163e:	2306      	movs	r3, #6
 8001640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001648:	4619      	mov	r1, r3
 800164a:	4812      	ldr	r0, [pc, #72]	; (8001694 <HAL_DFSDM_ChannelMspInit+0xfc>)
 800164c:	f002 ff4e 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001676:	f002 ff39 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_DFSDM_ChannelMspInit+0xf4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a02      	ldr	r2, [pc, #8]	; (800168c <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001682:	6013      	str	r3, [r2, #0]
  }

}
 8001684:	bf00      	nop
 8001686:	37e8      	adds	r7, #232	; 0xe8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	240010f8 	.word	0x240010f8
 8001690:	58024400 	.word	0x58024400
 8001694:	58020800 	.word	0x58020800

08001698 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a49      	ldr	r2, [pc, #292]	; (80017dc <HAL_ETH_MspInit+0x144>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 808b 	bne.w	80017d2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016c2:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016cc:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016e0:	4a3f      	ldr	r2, [pc, #252]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 80016fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 800170a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 800171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_ETH_MspInit+0x148>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8001770:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001782:	230b      	movs	r3, #11
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4815      	ldr	r0, [pc, #84]	; (80017e4 <HAL_ETH_MspInit+0x14c>)
 800178e:	f002 fead 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001792:	2332      	movs	r3, #50	; 0x32
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a2:	230b      	movs	r3, #11
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <HAL_ETH_MspInit+0x150>)
 80017ae:	f002 fe9d 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80017b2:	2386      	movs	r3, #134	; 0x86
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017c2:	230b      	movs	r3, #11
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <HAL_ETH_MspInit+0x154>)
 80017ce:	f002 fe8d 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40028000 	.word	0x40028000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58021800 	.word	0x58021800
 80017e8:	58020800 	.word	0x58020800
 80017ec:	58020000 	.word	0x58020000

080017f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0ba      	sub	sp, #232	; 0xe8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	22c0      	movs	r2, #192	; 0xc0
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f00c fff7 	bl	800e804 <memset>
  if(hi2c->Instance==I2C1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_I2C_MspInit+0xc4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d145      	bne.n	80018ac <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001820:	f04f 0208 	mov.w	r2, #8
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4618      	mov	r0, r3
 8001838:	f005 f80e 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001842:	f7ff fe15 	bl	8001470 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	2312      	movs	r3, #18
 800186c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187c:	2304      	movs	r3, #4
 800187e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_I2C_MspInit+0xcc>)
 800188a:	f002 fe2f 	bl	80044ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 8001890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 8001896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0xc8>)
 80018a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	37e8      	adds	r7, #232	; 0xe8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40005400 	.word	0x40005400
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020400 	.word	0x58020400

080018c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0bc      	sub	sp, #240	; 0xf0
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	22c0      	movs	r2, #192	; 0xc0
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00c ff8f 	bl	800e804 <memset>
  if(hltdc->Instance==LTDC)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <HAL_LTDC_MspInit+0x178>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	f040 809e 	bne.w	8001a2e <HAL_LTDC_MspInit+0x16e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80018f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 8001902:	2304      	movs	r3, #4
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800190e:	2302      	movs	r3, #2
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001916:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001918:	2300      	movs	r3, #0
 800191a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f004 ff97 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001930:	f7ff fd9e 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001934:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_LTDC_MspInit+0x17c>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c4:	230e      	movs	r3, #14
 80019c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019ce:	4619      	mov	r1, r3
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <HAL_LTDC_MspInit+0x180>)
 80019d2:	f002 fd8b 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 80019d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019f0:	230e      	movs	r3, #14
 80019f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019fa:	4619      	mov	r1, r3
 80019fc:	4811      	ldr	r0, [pc, #68]	; (8001a44 <HAL_LTDC_MspInit+0x184>)
 80019fe:	f002 fd75 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 8001a02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <HAL_LTDC_MspInit+0x188>)
 8001a2a:	f002 fd5f 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	37f0      	adds	r7, #240	; 0xf0
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	50001000 	.word	0x50001000
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58022800 	.word	0x58022800
 8001a44:	58022400 	.word	0x58022400
 8001a48:	58022000 	.word	0x58022000

08001a4c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0be      	sub	sp, #248	; 0xf8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	22c0      	movs	r2, #192	; 0xc0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00c fec9 	bl	800e804 <memset>
  if(hqspi->Instance==QUADSPI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_QSPI_MspInit+0x1f4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f040 80dd 	bne.w	8001c38 <HAL_QSPI_MspInit+0x1ec>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fee0 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001a9e:	f7ff fce7 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001aa2:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001aa4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001aa8:	4a66      	ldr	r2, [pc, #408]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ab4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a5f      	ldr	r2, [pc, #380]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b5c      	ldr	r3, [pc, #368]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001ae6:	f043 0320 	orr.w	r3, r3, #32
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afc:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a50      	ldr	r2, [pc, #320]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_QSPI_MspInit+0x1f8>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8001b38:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b52:	2309      	movs	r3, #9
 8001b54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	483a      	ldr	r0, [pc, #232]	; (8001c48 <HAL_QSPI_MspInit+0x1fc>)
 8001b60:	f002 fcc4 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001b64:	2340      	movs	r3, #64	; 0x40
 8001b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b86:	4619      	mov	r1, r3
 8001b88:	482f      	ldr	r0, [pc, #188]	; (8001c48 <HAL_QSPI_MspInit+0x1fc>)
 8001b8a:	f002 fcaf 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ba6:	2309      	movs	r3, #9
 8001ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4826      	ldr	r0, [pc, #152]	; (8001c4c <HAL_QSPI_MspInit+0x200>)
 8001bb4:	f002 fc9a 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481b      	ldr	r0, [pc, #108]	; (8001c4c <HAL_QSPI_MspInit+0x200>)
 8001be0:	f002 fc84 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001be4:	230c      	movs	r3, #12
 8001be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <HAL_QSPI_MspInit+0x204>)
 8001c0a:	f002 fc6f 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c26:	2309      	movs	r3, #9
 8001c28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4808      	ldr	r0, [pc, #32]	; (8001c54 <HAL_QSPI_MspInit+0x208>)
 8001c34:	f002 fc5a 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	37f8      	adds	r7, #248	; 0xf8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	52005000 	.word	0x52005000
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58021800 	.word	0x58021800
 8001c4c:	58021400 	.word	0x58021400
 8001c50:	58021c00 	.word	0x58021c00
 8001c54:	58020400 	.word	0x58020400

08001c58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0b2      	sub	sp, #200	; 0xc8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	22c0      	movs	r2, #192	; 0xc0
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00c fdcb 	bl	800e804 <memset>
  if(hrtc->Instance==RTC)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_RTC_MspInit+0x5c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d119      	bne.n	8001cac <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f004 fde1 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001c9c:	f7ff fbe8 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RTC_MspInit+0x60>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_RTC_MspInit+0x60>)
 8001ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	37c8      	adds	r7, #200	; 0xc8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	58004000 	.word	0x58004000
 8001cb8:	58024400 	.word	0x58024400

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0ba      	sub	sp, #232	; 0xe8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	22c0      	movs	r2, #192	; 0xc0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00c fd91 	bl	800e804 <memset>
  if(huart->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d146      	bne.n	8001d7a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cec:	f04f 0201 	mov.w	r2, #1
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fda8 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d0e:	f7ff fbaf 	bl	8001470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001d4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <HAL_UART_MspInit+0xd0>)
 8001d76:	f002 fbb9 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	37e8      	adds	r7, #232	; 0xe8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40011000 	.word	0x40011000
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	58020400 	.word	0x58020400

08001d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0c2      	sub	sp, #264	; 0x108
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d9e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db4:	22c0      	movs	r2, #192	; 0xc0
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00c fd23 	bl	800e804 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4aa3      	ldr	r2, [pc, #652]	; (8002058 <HAL_PCD_MspInit+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d14a      	bne.n	8001e66 <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001dd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ddc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fd35 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_PCD_MspInit+0x68>
    {
      Error_Handler();
 8001df4:	f7ff fb3c 	bl	8001470 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001df8:	f003 fbd2 	bl	80055a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b97      	ldr	r3, [pc, #604]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e02:	4a96      	ldr	r2, [pc, #600]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0c:	4b93      	ldr	r3, [pc, #588]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001e1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e34:	230a      	movs	r3, #10
 8001e36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4887      	ldr	r0, [pc, #540]	; (8002060 <HAL_PCD_MspInit+0x2d0>)
 8001e42:	f002 fb53 	bl	80044ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e4c:	4a83      	ldr	r2, [pc, #524]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001e4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e56:	4b81      	ldr	r3, [pc, #516]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001e64:	e0f3      	b.n	800204e <HAL_PCD_MspInit+0x2be>
  else if(hpcd->Instance==USB_OTG_HS)
 8001e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <HAL_PCD_MspInit+0x2d4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	f040 80ea 	bne.w	800204e <HAL_PCD_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001e86:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fce0 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_PCD_MspInit+0x112>
      Error_Handler();
 8001e9e:	f7ff fae7 	bl	8001470 <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ea2:	f003 fb7d 	bl	80055a0 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	4a6b      	ldr	r2, [pc, #428]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb6:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ec4:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	4a64      	ldr	r2, [pc, #400]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	4b5e      	ldr	r3, [pc, #376]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f00:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4a55      	ldr	r2, [pc, #340]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4a4d      	ldr	r2, [pc, #308]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b4b      	ldr	r3, [pc, #300]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001f3c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001f40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001f56:	230a      	movs	r3, #10
 8001f58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4841      	ldr	r0, [pc, #260]	; (8002068 <HAL_PCD_MspInit+0x2d8>)
 8001f64:	f002 fac2 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001f82:	230a      	movs	r3, #10
 8001f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4837      	ldr	r0, [pc, #220]	; (800206c <HAL_PCD_MspInit+0x2dc>)
 8001f90:	f002 faac 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001fac:	230a      	movs	r3, #10
 8001fae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	482d      	ldr	r0, [pc, #180]	; (8002070 <HAL_PCD_MspInit+0x2e0>)
 8001fba:	f002 fa97 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4824      	ldr	r0, [pc, #144]	; (8002074 <HAL_PCD_MspInit+0x2e4>)
 8001fe4:	f002 fa82 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001fe8:	2328      	movs	r3, #40	; 0x28
 8001fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002000:	230a      	movs	r3, #10
 8002002:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800200a:	4619      	mov	r1, r3
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <HAL_PCD_MspInit+0x2d0>)
 800200e:	f002 fa6d 	bl	80044ec <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8002014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002018:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8002024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8002032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8002038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800203c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_PCD_MspInit+0x2cc>)
 8002042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
}
 800204e:	bf00      	nop
 8002050:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40080000 	.word	0x40080000
 800205c:	58024400 	.word	0x58024400
 8002060:	58020000 	.word	0x58020000
 8002064:	40040000 	.word	0x40040000
 8002068:	58020400 	.word	0x58020400
 800206c:	58022000 	.word	0x58022000
 8002070:	58020800 	.word	0x58020800
 8002074:	58021c00 	.word	0x58021c00

08002078 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	b0b8      	sub	sp, #224	; 0xe0
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800207e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_FMC_MspInit+0x188>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 80b0 	bne.w	80021f8 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_FMC_MspInit+0x188>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	22c0      	movs	r2, #192	; 0xc0
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00c fbac 	bl	800e804 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80020ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 fbc9 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80020cc:	f7ff f9d0 	bl	8001470 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_FMC_MspInit+0x18c>)
 80020d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020d6:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_FMC_MspInit+0x18c>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_FMC_MspInit+0x18c>)
 80020e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 80020ee:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80020f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002108:	230c      	movs	r3, #12
 800210a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002112:	4619      	mov	r1, r3
 8002114:	483c      	ldr	r0, [pc, #240]	; (8002208 <HAL_FMC_MspInit+0x190>)
 8002116:	f002 f9e9 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 800211a:	f248 533f 	movw	r3, #34111	; 0x853f
 800211e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002134:	230c      	movs	r3, #12
 8002136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800213a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800213e:	4619      	mov	r1, r3
 8002140:	4832      	ldr	r0, [pc, #200]	; (800220c <HAL_FMC_MspInit+0x194>)
 8002142:	f002 f9d3 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 8002146:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800214a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002160:	230c      	movs	r3, #12
 8002162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800216a:	4619      	mov	r1, r3
 800216c:	4828      	ldr	r0, [pc, #160]	; (8002210 <HAL_FMC_MspInit+0x198>)
 800216e:	f002 f9bd 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 8002172:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800218c:	230c      	movs	r3, #12
 800218e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002192:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002196:	4619      	mov	r1, r3
 8002198:	481e      	ldr	r0, [pc, #120]	; (8002214 <HAL_FMC_MspInit+0x19c>)
 800219a:	f002 f9a7 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 800219e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021b8:	230c      	movs	r3, #12
 80021ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021c2:	4619      	mov	r1, r3
 80021c4:	4814      	ldr	r0, [pc, #80]	; (8002218 <HAL_FMC_MspInit+0x1a0>)
 80021c6:	f002 f991 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 80021ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e4:	230c      	movs	r3, #12
 80021e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021ee:	4619      	mov	r1, r3
 80021f0:	480a      	ldr	r0, [pc, #40]	; (800221c <HAL_FMC_MspInit+0x1a4>)
 80021f2:	f002 f97b 	bl	80044ec <HAL_GPIO_Init>
 80021f6:	e000      	b.n	80021fa <HAL_FMC_MspInit+0x182>
    return;
 80021f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80021fa:	37e0      	adds	r7, #224	; 0xe0
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	240010fc 	.word	0x240010fc
 8002204:	58024400 	.word	0x58024400
 8002208:	58022000 	.word	0x58022000
 800220c:	58021800 	.word	0x58021800
 8002210:	58020c00 	.word	0x58020c00
 8002214:	58021000 	.word	0x58021000
 8002218:	58021c00 	.word	0x58021c00
 800221c:	58021400 	.word	0x58021400

08002220 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8002228:	f7ff ff26 	bl	8002078 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800223c:	f7ff ff1c 	bl	8002078 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002250:	f7ff ff12 	bl	8002078 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ba      	sub	sp, #232	; 0xe8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	22c0      	movs	r2, #192	; 0xc0
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f00c fac9 	bl	800e804 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_SAI_MspInit+0x158>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d153      	bne.n	8002324 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800227c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002288:	2300      	movs	r3, #0
 800228a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f004 fae1 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 800229c:	f7ff f8e8 	bl	8001470 <Error_Handler>
    }

    if (SAI1_client == 0)
 80022a0:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022a8:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_SAI_MspInit+0x160>)
 80022aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ae:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_SAI_MspInit+0x160>)
 80022b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_SAI_MspInit+0x160>)
 80022ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a3a      	ldr	r2, [pc, #232]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 80022ce:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 80022d0:	2370      	movs	r3, #112	; 0x70
 80022d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80022e8:	2306      	movs	r3, #6
 80022ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4832      	ldr	r0, [pc, #200]	; (80023c0 <HAL_SAI_MspInit+0x164>)
 80022f6:	f002 f8f9 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002312:	2306      	movs	r3, #6
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800231c:	4619      	mov	r1, r3
 800231e:	4829      	ldr	r0, [pc, #164]	; (80023c4 <HAL_SAI_MspInit+0x168>)
 8002320:	f002 f8e4 	bl	80044ec <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_SAI_MspInit+0x16c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d13e      	bne.n	80023ac <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800232e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800233a:	2300      	movs	r3, #0
 800233c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fa88 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 800234e:	f7ff f88f 	bl	8001470 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_SAI_MspInit+0x160>)
 800235c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_SAI_MspInit+0x160>)
 8002362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002366:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_SAI_MspInit+0x160>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_SAI_MspInit+0x15c>)
 8002380:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002382:	2308      	movs	r3, #8
 8002384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800239a:	2306      	movs	r3, #6
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <HAL_SAI_MspInit+0x164>)
 80023a8:	f002 f8a0 	bl	80044ec <HAL_GPIO_Init>

    }
}
 80023ac:	bf00      	nop
 80023ae:	37e8      	adds	r7, #232	; 0xe8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40015804 	.word	0x40015804
 80023b8:	24001100 	.word	0x24001100
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58021000 	.word	0x58021000
 80023c4:	58021800 	.word	0x58021800
 80023c8:	40015824 	.word	0x40015824

080023cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	d844      	bhi.n	8002464 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80023da:	2200      	movs	r2, #0
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	2019      	movs	r0, #25
 80023e0:	f001 fb24 	bl	8003a2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023e4:	2019      	movs	r0, #25
 80023e6:	f001 fb3b 	bl	8003a60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_InitTick+0xb0>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_InitTick+0xb4>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_InitTick+0xb4>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_InitTick+0xb4>)
 8002402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240e:	f107 020c 	add.w	r2, r7, #12
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f004 f9db 	bl	80067d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800241e:	f004 f9c3 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 8002422:	4603      	mov	r3, r0
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_InitTick+0xb8>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	3b01      	subs	r3, #1
 8002434:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_InitTick+0xbc>)
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_InitTick+0xc0>)
 800243a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0xbc>)
 800243e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002442:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002444:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_InitTick+0xbc>)
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_InitTick+0xbc>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_InitTick+0xbc>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002456:	480c      	ldr	r0, [pc, #48]	; (8002488 <HAL_InitTick+0xbc>)
 8002458:	f007 fb84 	bl	8009b64 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_InitTick+0xa6>
 8002462:	e001      	b.n	8002468 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e005      	b.n	8002474 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002468:	4807      	ldr	r0, [pc, #28]	; (8002488 <HAL_InitTick+0xbc>)
 800246a:	f007 fbdd 	bl	8009c28 <HAL_TIM_Base_Start_IT>
 800246e:	4603      	mov	r3, r0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3738      	adds	r7, #56	; 0x38
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	24000008 	.word	0x24000008
 8002480:	58024400 	.word	0x58024400
 8002484:	431bde83 	.word	0x431bde83
 8002488:	24001104 	.word	0x24001104
 800248c:	40010000 	.word	0x40010000

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM1_UP_IRQHandler+0x10>)
 80024c2:	f007 fc29 	bl	8009d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24001104 	.word	0x24001104

080024d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <SystemInit+0xe4>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	4a36      	ldr	r2, [pc, #216]	; (80025b4 <SystemInit+0xe4>)
 80024dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <SystemInit+0xe8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d807      	bhi.n	8002500 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <SystemInit+0xe8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 030f 	bic.w	r3, r3, #15
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <SystemInit+0xe8>)
 80024fa:	f043 0307 	orr.w	r3, r3, #7
 80024fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <SystemInit+0xec>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <SystemInit+0xec>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <SystemInit+0xec>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <SystemInit+0xec>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4929      	ldr	r1, [pc, #164]	; (80025bc <SystemInit+0xec>)
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <SystemInit+0xf0>)
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <SystemInit+0xe8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <SystemInit+0xe8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 030f 	bic.w	r3, r3, #15
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <SystemInit+0xe8>)
 8002534:	f043 0307 	orr.w	r3, r3, #7
 8002538:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <SystemInit+0xec>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <SystemInit+0xec>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <SystemInit+0xec>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <SystemInit+0xec>)
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <SystemInit+0xf4>)
 8002550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <SystemInit+0xec>)
 8002554:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <SystemInit+0xf8>)
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <SystemInit+0xec>)
 800255a:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <SystemInit+0xfc>)
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <SystemInit+0xec>)
 8002560:	2200      	movs	r2, #0
 8002562:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <SystemInit+0xec>)
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <SystemInit+0xfc>)
 8002568:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <SystemInit+0xec>)
 800256c:	2200      	movs	r2, #0
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <SystemInit+0xec>)
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <SystemInit+0xfc>)
 8002574:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <SystemInit+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <SystemInit+0xec>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <SystemInit+0xec>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <SystemInit+0xec>)
 800258a:	2200      	movs	r2, #0
 800258c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <SystemInit+0x100>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <SystemInit+0x104>)
 8002594:	4013      	ands	r3, r2
 8002596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259a:	d202      	bcs.n	80025a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <SystemInit+0x108>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <SystemInit+0x10c>)
 80025a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00
 80025b8:	52002000 	.word	0x52002000
 80025bc:	58024400 	.word	0x58024400
 80025c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025c4:	02020200 	.word	0x02020200
 80025c8:	01ff0000 	.word	0x01ff0000
 80025cc:	01010280 	.word	0x01010280
 80025d0:	5c001000 	.word	0x5c001000
 80025d4:	ffff0000 	.word	0xffff0000
 80025d8:	51008108 	.word	0x51008108
 80025dc:	52004000 	.word	0x52004000

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025e4:	f7ff ff74 	bl	80024d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ea:	490d      	ldr	r1, [pc, #52]	; (8002620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002600:	4c0a      	ldr	r4, [pc, #40]	; (800262c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260e:	f00c f8c5 	bl	800e79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7fd ffe7 	bl	80005e4 <main>
  bx  lr
 8002616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800261c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002620:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002624:	0800eaa0 	.word	0x0800eaa0
  ldr r2, =_sbss
 8002628:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 800262c:	24005b94 	.word	0x24005b94

08002630 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC3_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263a:	2003      	movs	r0, #3
 800263c:	f001 f9eb 	bl	8003a16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002640:	f003 fef2 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_Init+0x68>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	4913      	ldr	r1, [pc, #76]	; (80026a0 <HAL_Init+0x6c>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
 800265c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_Init+0x68>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_Init+0x6c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <HAL_Init+0x70>)
 8002676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_Init+0x74>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800267e:	200f      	movs	r0, #15
 8002680:	f7ff fea4 	bl	80023cc <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e002      	b.n	8002694 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800268e:	f7fe feff 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400
 80026a0:	0800e9f8 	.word	0x0800e9f8
 80026a4:	24000004 	.word	0x24000004
 80026a8:	24000000 	.word	0x24000000

080026ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_IncTick+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_IncTick+0x24>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2400000c 	.word	0x2400000c
 80026d0:	24001150 	.word	0x24001150

080026d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return uwTick;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_GetTick+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	24001150 	.word	0x24001150

080026ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff ffee 	bl	80026d4 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002704:	d005      	beq.n	8002712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_Delay+0x44>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002712:	bf00      	nop
 8002714:	f7ff ffde 	bl	80026d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8f7      	bhi.n	8002714 <HAL_Delay+0x28>
  {
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2400000c 	.word	0x2400000c

08002734 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetREVID+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0c1b      	lsrs	r3, r3, #16
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	5c001000 	.word	0x5c001000

0800274c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	58000400 	.word	0x58000400

08002774 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	58000400 	.word	0x58000400

080027a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	611a      	str	r2, [r3, #16]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3360      	adds	r3, #96	; 0x60
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	431a      	orrs	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]
  }
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3330      	adds	r3, #48	; 0x30
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	4413      	add	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	211f      	movs	r1, #31
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 011f 	and.w	r1, r3, #31
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3314      	adds	r3, #20
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0e5b      	lsrs	r3, r3, #25
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	0d1b      	lsrs	r3, r3, #20
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2107      	movs	r1, #7
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0d1b      	lsrs	r3, r3, #20
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002978:	43db      	mvns	r3, r3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0318 	and.w	r3, r3, #24
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002984:	40d9      	lsrs	r1, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	400b      	ands	r3, r1
 800298a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298e:	431a      	orrs	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	000fffff 	.word	0x000fffff

080029a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6093      	str	r3, [r2, #8]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	5fffffc0 	.word	0x5fffffc0

080029cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	6fffffc0 	.word	0x6fffffc0

08002a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_IsEnabled+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_IsEnabled+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e18f      	b.n	8002df2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe fcf3 	bl	80014cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff67 	bl	80029cc <LL_ADC_IsDeepPowerDownEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff4d 	bl	80029a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff82 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff66 	bl	80029f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b28:	4b87      	ldr	r3, [pc, #540]	; (8002d48 <HAL_ADC_Init+0x290>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_ADC_Init+0x294>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b3a:	e002      	b.n	8002b42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff65 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0210 	orr.w	r2, r3, #16
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff76 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002b7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 8129 	bne.w	8002de0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 8125 	bne.w	8002de0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b9e:	f043 0202 	orr.w	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ff4a 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d136      	bne.n	8002c24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_ADC_Init+0x298>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d004      	beq.n	8002bca <HAL_ADC_Init+0x112>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a63      	ldr	r2, [pc, #396]	; (8002d54 <HAL_ADC_Init+0x29c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10e      	bne.n	8002be8 <HAL_ADC_Init+0x130>
 8002bca:	4861      	ldr	r0, [pc, #388]	; (8002d50 <HAL_ADC_Init+0x298>)
 8002bcc:	f7ff ff3a 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	4860      	ldr	r0, [pc, #384]	; (8002d54 <HAL_ADC_Init+0x29c>)
 8002bd4:	f7ff ff36 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4323      	orrs	r3, r4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e008      	b.n	8002bfa <HAL_ADC_Init+0x142>
 8002be8:	485b      	ldr	r0, [pc, #364]	; (8002d58 <HAL_ADC_Init+0x2a0>)
 8002bea:	f7ff ff2b 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a53      	ldr	r2, [pc, #332]	; (8002d50 <HAL_ADC_Init+0x298>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_ADC_Init+0x15a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <HAL_ADC_Init+0x29c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Init+0x15e>
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_ADC_Init+0x2a4>)
 8002c14:	e000      	b.n	8002c18 <HAL_ADC_Init+0x160>
 8002c16:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_ADC_Init+0x2a8>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7ff fdbe 	bl	80027a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c24:	f7ff fd86 	bl	8002734 <HAL_GetREVID>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d914      	bls.n	8002c5c <HAL_ADC_Init+0x1a4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d110      	bne.n	8002c5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7d5b      	ldrb	r3, [r3, #21]
 8002c3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7f1b      	ldrb	r3, [r3, #28]
 8002c50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c54:	f043 030c 	orr.w	r3, r3, #12
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e00d      	b.n	8002c78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7d5b      	ldrb	r3, [r3, #21]
 8002c60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7f1b      	ldrb	r3, [r3, #28]
 8002c72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	045b      	lsls	r3, r3, #17
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_ADC_Init+0x2ac>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fed1 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002cc8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fede 	bl	8002a90 <LL_ADC_INJ_IsConversionOngoing>
 8002cd4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d15f      	bne.n	8002d9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d15c      	bne.n	8002d9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7d1b      	ldrb	r3, [r3, #20]
 8002ce6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_ADC_Init+0x2b0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d130      	bne.n	8002d70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_ADC_Init+0x2b4>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0411      	lsls	r1, r2, #16
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d36:	430a      	orrs	r2, r1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	e01c      	b.n	8002d80 <HAL_ADC_Init+0x2c8>
 8002d46:	bf00      	nop
 8002d48:	24000000 	.word	0x24000000
 8002d4c:	053e2d63 	.word	0x053e2d63
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40022100 	.word	0x40022100
 8002d58:	58026000 	.word	0x58026000
 8002d5c:	40022300 	.word	0x40022300
 8002d60:	58026300 	.word	0x58026300
 8002d64:	fff0c003 	.word	0xfff0c003
 8002d68:	ffffbffc 	.word	0xffffbffc
 8002d6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb80 	bl	800349c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f023 010f 	bic.w	r1, r3, #15
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbc:	e007      	b.n	8002dce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 020f 	bic.w	r2, r2, #15
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
 8002dde:	e007      	b.n	8002df0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	bf00      	nop

08002dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b0a1      	sub	sp, #132	; 0x84
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a9d      	ldr	r2, [pc, #628]	; (800308c <HAL_ADC_ConfigChannel+0x290>)
 8002e16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x2a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e321      	b.n	800346a <HAL_ADC_ConfigChannel+0x66e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe19 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 8306 	bne.w	800344c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d108      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x62>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	e016      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x90>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e6e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2201      	movs	r2, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	69d1      	ldr	r1, [r2, #28]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f7ff fd02 	bl	80028b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fdda 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002eb6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fde7 	bl	8002a90 <LL_ADC_INJ_IsConversionOngoing>
 8002ec2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 80b3 	bne.w	8003032 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 80af 	bne.w	8003032 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f7ff fd11 	bl	8002908 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_ADC_ConfigChannel+0x294>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x110>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	e01d      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x14c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x136>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	e00a      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x14c>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d027      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f60:	f7ff fc52 	bl	8002808 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7e5b      	ldrb	r3, [r3, #25]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x17e>
 8002f74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x180>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f7ff fc7c 	bl	800287a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	7e1b      	ldrb	r3, [r3, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x19c>
 8002f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x19e>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7ff fc54 	bl	8002848 <LL_ADC_SetDataRightShift>
 8002fa0:	e047      	b.n	8003032 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	069b      	lsls	r3, r3, #26
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	069b      	lsls	r3, r3, #26
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d107      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fe8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d107      	bne.n	800300e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800300c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	069b      	lsls	r3, r3, #26
 800301e:	429a      	cmp	r2, r3
 8003020:	d107      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003030:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fd04 	bl	8002a44 <LL_ADC_IsEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 820d 	bne.w	800345e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff fc85 	bl	8002960 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <HAL_ADC_ConfigChannel+0x290>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f040 8133 	bne.w	80032c8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x298>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b09      	cmp	r3, #9
 8003080:	bf94      	ite	ls
 8003082:	2301      	movls	r3, #1
 8003084:	2300      	movhi	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e01e      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x2cc>
 800308a:	bf00      	nop
 800308c:	47ff0000 	.word	0x47ff0000
 8003090:	5c001000 	.word	0x5c001000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80030a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80030b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2b09      	cmp	r3, #9
 80030c0:	bf94      	ite	ls
 80030c2:	2301      	movls	r3, #1
 80030c4:	2300      	movhi	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d079      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x2ec>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	069b      	lsls	r3, r3, #26
 80030e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e6:	e015      	b.n	8003114 <HAL_ADC_ConfigChannel+0x318>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	069b      	lsls	r3, r3, #26
 8003110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x338>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	e017      	b.n	8003164 <HAL_ADC_ConfigChannel+0x368>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e003      	b.n	8003158 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	ea42 0103 	orr.w	r1, r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_ADC_ConfigChannel+0x38e>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	051b      	lsls	r3, r3, #20
 8003188:	e018      	b.n	80031bc <HAL_ADC_ConfigChannel+0x3c0>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031bc:	430b      	orrs	r3, r1
 80031be:	e07e      	b.n	80032be <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x3e0>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	069b      	lsls	r3, r3, #26
 80031d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031da:	e015      	b.n	8003208 <HAL_ADC_ConfigChannel+0x40c>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	069b      	lsls	r3, r3, #26
 8003204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x42c>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	3301      	adds	r3, #1
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	e017      	b.n	8003258 <HAL_ADC_ConfigChannel+0x45c>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	61bb      	str	r3, [r7, #24]
  return result;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e003      	b.n	800324c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	3301      	adds	r3, #1
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	ea42 0103 	orr.w	r1, r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x488>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	3b1e      	subs	r3, #30
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003282:	e01b      	b.n	80032bc <HAL_ADC_ConfigChannel+0x4c0>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	60fb      	str	r3, [r7, #12]
  return result;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f003 021f 	and.w	r2, r3, #31
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	3b1e      	subs	r3, #30
 80032b6:	051b      	lsls	r3, r3, #20
 80032b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032bc:	430b      	orrs	r3, r1
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7ff fb20 	bl	8002908 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f280 80c6 	bge.w	800345e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a67      	ldr	r2, [pc, #412]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x4ea>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x4ee>
 80032e6:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_ADC_ConfigChannel+0x680>)
 80032e8:	e000      	b.n	80032ec <HAL_ADC_ConfigChannel+0x4f0>
 80032ea:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_ADC_ConfigChannel+0x684>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fa7d 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 80032f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5e      	ldr	r2, [pc, #376]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x50c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5d      	ldr	r2, [pc, #372]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10e      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x52a>
 8003308:	485a      	ldr	r0, [pc, #360]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 800330a:	f7ff fb9b 	bl	8002a44 <LL_ADC_IsEnabled>
 800330e:	4604      	mov	r4, r0
 8003310:	4859      	ldr	r0, [pc, #356]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 8003312:	f7ff fb97 	bl	8002a44 <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	4323      	orrs	r3, r4
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e008      	b.n	8003338 <HAL_ADC_ConfigChannel+0x53c>
 8003326:	4857      	ldr	r0, [pc, #348]	; (8003484 <HAL_ADC_ConfigChannel+0x688>)
 8003328:	f7ff fb8c 	bl	8002a44 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d07d      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a51      	ldr	r2, [pc, #324]	; (8003488 <HAL_ADC_ConfigChannel+0x68c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d130      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x5ac>
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12b      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_ADC_ConfigChannel+0x688>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f040 8081 	bne.w	800345e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a44      	ldr	r2, [pc, #272]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x574>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a43      	ldr	r2, [pc, #268]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x578>
 8003370:	4a42      	ldr	r2, [pc, #264]	; (800347c <HAL_ADC_ConfigChannel+0x680>)
 8003372:	e000      	b.n	8003376 <HAL_ADC_ConfigChannel+0x57a>
 8003374:	4a42      	ldr	r2, [pc, #264]	; (8003480 <HAL_ADC_ConfigChannel+0x684>)
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7ff fa21 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_ADC_ConfigChannel+0x690>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	4a41      	ldr	r2, [pc, #260]	; (8003490 <HAL_ADC_ConfigChannel+0x694>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003398:	e002      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a6:	e05a      	b.n	800345e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_ADC_ConfigChannel+0x698>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d11e      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x5f4>
 80033b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d119      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_ADC_ConfigChannel+0x688>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d14b      	bne.n	800345e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_ADC_ConfigChannel+0x5de>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x5e2>
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_ADC_ConfigChannel+0x680>)
 80033dc:	e000      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x5e4>
 80033de:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_ADC_ConfigChannel+0x684>)
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7ff f9ec 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ee:	e036      	b.n	800345e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_ADC_ConfigChannel+0x69c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d131      	bne.n	800345e <HAL_ADC_ConfigChannel+0x662>
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12c      	bne.n	800345e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <HAL_ADC_ConfigChannel+0x688>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d127      	bne.n	800345e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_ADC_ConfigChannel+0x678>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x626>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x62a>
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_ADC_ConfigChannel+0x680>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_ConfigChannel+0x62c>
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_ADC_ConfigChannel+0x684>)
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7ff f9c8 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
 8003436:	e012      	b.n	800345e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800344a:	e008      	b.n	800345e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800346a:	4618      	mov	r0, r3
 800346c:	3784      	adds	r7, #132	; 0x84
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	bf00      	nop
 8003474:	40022000 	.word	0x40022000
 8003478:	40022100 	.word	0x40022100
 800347c:	40022300 	.word	0x40022300
 8003480:	58026300 	.word	0x58026300
 8003484:	58026000 	.word	0x58026000
 8003488:	cb840000 	.word	0xcb840000
 800348c:	24000000 	.word	0x24000000
 8003490:	053e2d63 	.word	0x053e2d63
 8003494:	c7520000 	.word	0xc7520000
 8003498:	cfb80000 	.word	0xcfb80000

0800349c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7a      	ldr	r2, [pc, #488]	; (8003694 <ADC_ConfigureBoostMode+0x1f8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <ADC_ConfigureBoostMode+0x1c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a79      	ldr	r2, [pc, #484]	; (8003698 <ADC_ConfigureBoostMode+0x1fc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d109      	bne.n	80034cc <ADC_ConfigureBoostMode+0x30>
 80034b8:	4b78      	ldr	r3, [pc, #480]	; (800369c <ADC_ConfigureBoostMode+0x200>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e008      	b.n	80034de <ADC_ConfigureBoostMode+0x42>
 80034cc:	4b74      	ldr	r3, [pc, #464]	; (80036a0 <ADC_ConfigureBoostMode+0x204>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01c      	beq.n	800351c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80034e2:	f003 f91b 	bl	800671c <HAL_RCC_GetHCLKFreq>
 80034e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034f0:	d010      	beq.n	8003514 <ADC_ConfigureBoostMode+0x78>
 80034f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034f6:	d873      	bhi.n	80035e0 <ADC_ConfigureBoostMode+0x144>
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d002      	beq.n	8003504 <ADC_ConfigureBoostMode+0x68>
 80034fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003502:	d16d      	bne.n	80035e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	60fb      	str	r3, [r7, #12]
        break;
 8003512:	e068      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	60fb      	str	r3, [r7, #12]
        break;
 800351a:	e064      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800351c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	f004 fba2 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003528:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003532:	d051      	beq.n	80035d8 <ADC_ConfigureBoostMode+0x13c>
 8003534:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003538:	d854      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 800353a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800353e:	d047      	beq.n	80035d0 <ADC_ConfigureBoostMode+0x134>
 8003540:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003544:	d84e      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 8003546:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800354a:	d03d      	beq.n	80035c8 <ADC_ConfigureBoostMode+0x12c>
 800354c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003550:	d848      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 8003552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003556:	d033      	beq.n	80035c0 <ADC_ConfigureBoostMode+0x124>
 8003558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355c:	d842      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 800355e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003562:	d029      	beq.n	80035b8 <ADC_ConfigureBoostMode+0x11c>
 8003564:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003568:	d83c      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 800356a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800356e:	d01a      	beq.n	80035a6 <ADC_ConfigureBoostMode+0x10a>
 8003570:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003574:	d836      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 8003576:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800357a:	d014      	beq.n	80035a6 <ADC_ConfigureBoostMode+0x10a>
 800357c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003580:	d830      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 8003582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003586:	d00e      	beq.n	80035a6 <ADC_ConfigureBoostMode+0x10a>
 8003588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358c:	d82a      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 800358e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003592:	d008      	beq.n	80035a6 <ADC_ConfigureBoostMode+0x10a>
 8003594:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003598:	d824      	bhi.n	80035e4 <ADC_ConfigureBoostMode+0x148>
 800359a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800359e:	d002      	beq.n	80035a6 <ADC_ConfigureBoostMode+0x10a>
 80035a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035a4:	d11e      	bne.n	80035e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0c9b      	lsrs	r3, r3, #18
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	60fb      	str	r3, [r7, #12]
        break;
 80035b6:	e016      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
        break;
 80035be:	e012      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	60fb      	str	r3, [r7, #12]
        break;
 80035c6:	e00e      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	60fb      	str	r3, [r7, #12]
        break;
 80035ce:	e00a      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	09db      	lsrs	r3, r3, #7
 80035d4:	60fb      	str	r3, [r7, #12]
        break;
 80035d6:	e006      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	60fb      	str	r3, [r7, #12]
        break;
 80035de:	e002      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80035e0:	bf00      	nop
 80035e2:	e000      	b.n	80035e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80035e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80035e6:	f7ff f8a5 	bl	8002734 <HAL_GetREVID>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d815      	bhi.n	8003620 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <ADC_ConfigureBoostMode+0x208>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d908      	bls.n	800360e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800360c:	e03e      	b.n	800368c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361c:	609a      	str	r2, [r3, #8]
}
 800361e:	e035      	b.n	800368c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <ADC_ConfigureBoostMode+0x20c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d808      	bhi.n	8003640 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800363c:	609a      	str	r2, [r3, #8]
}
 800363e:	e025      	b.n	800368c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <ADC_ConfigureBoostMode+0x210>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d80a      	bhi.n	800365e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	e016      	b.n	800368c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <ADC_ConfigureBoostMode+0x214>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d80a      	bhi.n	800367c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	e007      	b.n	800368c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40022000 	.word	0x40022000
 8003698:	40022100 	.word	0x40022100
 800369c:	40022300 	.word	0x40022300
 80036a0:	58026300 	.word	0x58026300
 80036a4:	01312d00 	.word	0x01312d00
 80036a8:	005f5e10 	.word	0x005f5e10
 80036ac:	00bebc20 	.word	0x00bebc20
 80036b0:	017d7840 	.word	0x017d7840

080036b4 <LL_ADC_IsEnabled>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <LL_ADC_IsEnabled+0x18>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <LL_ADC_IsEnabled+0x1a>
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_ADC_REG_IsConversionOngoing>:
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d101      	bne.n	80036f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b09f      	sub	sp, #124	; 0x7c
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800371a:	2302      	movs	r3, #2
 800371c:	e0be      	b.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800372a:	2300      	movs	r3, #0
 800372c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d102      	bne.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003738:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	e001      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e09d      	b.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ffb9 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 8003768:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ffb3 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d17f      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800377a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800377c:	2b00      	cmp	r3, #0
 800377e:	d17c      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003796:	e000      	b.n	800379a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003798:	4b45      	ldr	r3, [pc, #276]	; (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800379a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d039      	beq.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10e      	bne.n	80037e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80037ca:	4836      	ldr	r0, [pc, #216]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037cc:	f7ff ff72 	bl	80036b4 <LL_ADC_IsEnabled>
 80037d0:	4604      	mov	r4, r0
 80037d2:	4835      	ldr	r0, [pc, #212]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037d4:	f7ff ff6e 	bl	80036b4 <LL_ADC_IsEnabled>
 80037d8:	4603      	mov	r3, r0
 80037da:	4323      	orrs	r3, r4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e008      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80037e8:	4832      	ldr	r0, [pc, #200]	; (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037ea:	f7ff ff63 	bl	80036b4 <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d047      	beq.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003804:	4013      	ands	r3, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	431a      	orrs	r2, r3
 8003812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003814:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003816:	e03a      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003822:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10e      	bne.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003838:	481a      	ldr	r0, [pc, #104]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800383a:	f7ff ff3b 	bl	80036b4 <LL_ADC_IsEnabled>
 800383e:	4604      	mov	r4, r0
 8003840:	4819      	ldr	r0, [pc, #100]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003842:	f7ff ff37 	bl	80036b4 <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	4323      	orrs	r3, r4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e008      	b.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003856:	4817      	ldr	r0, [pc, #92]	; (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003858:	f7ff ff2c 	bl	80036b4 <LL_ADC_IsEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003872:	4013      	ands	r3, r2
 8003874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003876:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003878:	e009      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800388c:	e000      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800388e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003898:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800389c:	4618      	mov	r0, r3
 800389e:	377c      	adds	r7, #124	; 0x7c
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	40022000 	.word	0x40022000
 80038a8:	40022100 	.word	0x40022100
 80038ac:	40022300 	.word	0x40022300
 80038b0:	58026300 	.word	0x58026300
 80038b4:	58026000 	.word	0x58026000
 80038b8:	fffff0e0 	.word	0xfffff0e0

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <__NVIC_SetPriorityGrouping+0x40>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	; (80038fc <__NVIC_SetPriorityGrouping+0x40>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00
 8003900:	05fa0000 	.word	0x05fa0000

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4c 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a3a:	f7ff ff63 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	6978      	ldr	r0, [r7, #20]
 8003a46:	f7ff ffb3 	bl	80039b0 <NVIC_EncodePriority>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff82 	bl	800395c <__NVIC_SetPriority>
}
 8003a58:	bf00      	nop
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff56 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0b4      	b.n	8003bf8 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_DFSDM_ChannelInit+0x184>)
 8003a90:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_DFSDM_ChannelInit+0x188>)
 8003a94:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8003a96:	4b5c      	ldr	r3, [pc, #368]	; (8003c08 <HAL_DFSDM_ChannelInit+0x18c>)
 8003a98:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f8b4 	bl	8003c0c <DFSDM_GetChannelFromInstance>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0a0      	b.n	8003bf8 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fd6e 	bl	8001598 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d125      	bne.n	8003b1a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	791b      	ldrb	r3, [r3, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d108      	bne.n	8003b0e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b28:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b38:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b3e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020f 	bic.w	r2, r2, #15
 8003b56:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b7e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f002 0207 	and.w	r2, r2, #7
 8003baa:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f811 	bl	8003c0c <DFSDM_GetChannelFromInstance>
 8003bea:	4603      	mov	r3, r0
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	24001154 	.word	0x24001154
 8003c04:	24001158 	.word	0x24001158
 8003c08:	40017000 	.word	0x40017000

08003c0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <DFSDM_GetChannelFromInstance+0x7c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d102      	bne.n	8003c22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e02b      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <DFSDM_GetChannelFromInstance+0x80>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d102      	bne.n	8003c30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e024      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <DFSDM_GetChannelFromInstance+0x84>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d102      	bne.n	8003c3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e01d      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <DFSDM_GetChannelFromInstance+0x88>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d102      	bne.n	8003c4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003c46:	2303      	movs	r3, #3
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e016      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <DFSDM_GetChannelFromInstance+0x8c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003c54:	2304      	movs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e00f      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <DFSDM_GetChannelFromInstance+0x90>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d102      	bne.n	8003c68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003c62:	2305      	movs	r3, #5
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e008      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <DFSDM_GetChannelFromInstance+0x94>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d102      	bne.n	8003c76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003c70:	2306      	movs	r3, #6
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e001      	b.n	8003c7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003c76:	2307      	movs	r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40017000 	.word	0x40017000
 8003c8c:	40017020 	.word	0x40017020
 8003c90:	40017040 	.word	0x40017040
 8003c94:	40017060 	.word	0x40017060
 8003c98:	40017080 	.word	0x40017080
 8003c9c:	400170a0 	.word	0x400170a0
 8003ca0:	400170c0 	.word	0x400170c0

08003ca4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0cf      	b.n	8003e56 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2223      	movs	r2, #35	; 0x23
 8003cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd fce5 	bl	8001698 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <HAL_ETH_Init+0x1bc>)
 8003cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cd4:	4a62      	ldr	r2, [pc, #392]	; (8003e60 <HAL_ETH_Init+0x1bc>)
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cde:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <HAL_ETH_Init+0x1bc>)
 8003ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7a1b      	ldrb	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fe fd29 	bl	800274c <HAL_SYSCFG_ETHInterfaceSelect>
 8003cfa:	e003      	b.n	8003d04 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003cfc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003d00:	f7fe fd24 	bl	800274c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <HAL_ETH_Init+0x1c0>)
 8003d06:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d20:	f7fe fcd8 	bl	80026d4 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d26:	e011      	b.n	8003d4c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d28:	f7fe fcd4 	bl	80026d4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d36:	d909      	bls.n	8003d4c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	22e0      	movs	r2, #224	; 0xe0
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e084      	b.n	8003e56 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e4      	bne.n	8003d28 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f886 	bl	8003e70 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003d64:	f002 fcda 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a3f      	ldr	r2, [pc, #252]	; (8003e68 <HAL_ETH_Init+0x1c4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9a      	lsrs	r2, r3, #18
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3a01      	subs	r2, #1
 8003d78:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa71 	bl	8004264 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d8e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d9e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	22e0      	movs	r2, #224	; 0xe0
 8003dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e049      	b.n	8003e56 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <HAL_ETH_Init+0x1c8>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6952      	ldr	r2, [r2, #20]
 8003dd6:	0051      	lsls	r1, r2, #1
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003de2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fad9 	bl	800439e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb1f 	bl	8004430 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	3305      	adds	r3, #5
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	3303      	adds	r3, #3
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	061a      	lsls	r2, r3, #24
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	3302      	adds	r3, #2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003e3e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
 8003e64:	58000400 	.word	0x58000400
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	ffff8001 	.word	0xffff8001

08003e70 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e8a:	f002 fc47 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8003e8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d908      	bls.n	8003eaa <HAL_ETH_SetMDIOClockRange+0x3a>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d804      	bhi.n	8003eaa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e027      	b.n	8003efa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d908      	bls.n	8003ec4 <HAL_ETH_SetMDIOClockRange+0x54>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d204      	bcs.n	8003ec4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e01a      	b.n	8003efa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d303      	bcc.n	8003ed4 <HAL_ETH_SetMDIOClockRange+0x64>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d911      	bls.n	8003ef8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d908      	bls.n	8003eee <HAL_ETH_SetMDIOClockRange+0x7e>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d804      	bhi.n	8003eee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e005      	b.n	8003efa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e000      	b.n	8003efa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003ef8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	01312cff 	.word	0x01312cff
 8003f10:	02160ebf 	.word	0x02160ebf
 8003f14:	03938700 	.word	0x03938700
 8003f18:	05f5e0ff 	.word	0x05f5e0ff
 8003f1c:	08f0d17f 	.word	0x08f0d17f

08003f20 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003f32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003f3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003f42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	7b5b      	ldrb	r3, [r3, #13]
 8003f48:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	7b9b      	ldrb	r3, [r3, #14]
 8003f50:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7bdb      	ldrb	r3, [r3, #15]
 8003f58:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	7c12      	ldrb	r2, [r2, #16]
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	d102      	bne.n	8003f6a <ETH_SetMACConfig+0x4a>
 8003f64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f68:	e000      	b.n	8003f6c <ETH_SetMACConfig+0x4c>
 8003f6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	7c52      	ldrb	r2, [r2, #17]
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d102      	bne.n	8003f7c <ETH_SetMACConfig+0x5c>
 8003f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f7a:	e000      	b.n	8003f7e <ETH_SetMACConfig+0x5e>
 8003f7c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	7c9b      	ldrb	r3, [r3, #18]
 8003f84:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f86:	431a      	orrs	r2, r3
               macconf->Speed |
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003f8c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003f92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	7f1b      	ldrb	r3, [r3, #28]
 8003f98:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003f9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7f5b      	ldrb	r3, [r3, #29]
 8003fa0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003fa2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	7f92      	ldrb	r2, [r2, #30]
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	d102      	bne.n	8003fb2 <ETH_SetMACConfig+0x92>
 8003fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb0:	e000      	b.n	8003fb4 <ETH_SetMACConfig+0x94>
 8003fb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003fb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	7fdb      	ldrb	r3, [r3, #31]
 8003fba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003fbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d102      	bne.n	8003fce <ETH_SetMACConfig+0xae>
 8003fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fcc:	e000      	b.n	8003fd0 <ETH_SetMACConfig+0xb0>
 8003fce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003fd0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003fd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fde:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003fe0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b56      	ldr	r3, [pc, #344]	; (800414c <ETH_SetMACConfig+0x22c>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	68f9      	ldr	r1, [r7, #12]
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800400a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800400c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004014:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004016:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800401e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004020:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004028:	2a00      	cmp	r2, #0
 800402a:	d102      	bne.n	8004032 <ETH_SetMACConfig+0x112>
 800402c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004030:	e000      	b.n	8004034 <ETH_SetMACConfig+0x114>
 8004032:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004034:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <ETH_SetMACConfig+0x230>)
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	430b      	orrs	r3, r1
 8004050:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004058:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <ETH_SetMACConfig+0x234>)
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800407c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004082:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800408a:	2a00      	cmp	r2, #0
 800408c:	d101      	bne.n	8004092 <ETH_SetMACConfig+0x172>
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	e000      	b.n	8004094 <ETH_SetMACConfig+0x174>
 8004092:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004094:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80040bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80040c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f023 0103 	bic.w	r1, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	430a      	orrs	r2, r1
 80040de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80040ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004106:	2a00      	cmp	r2, #0
 8004108:	d101      	bne.n	800410e <ETH_SetMACConfig+0x1ee>
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	e000      	b.n	8004110 <ETH_SetMACConfig+0x1f0>
 800410e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004110:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004118:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800411a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004122:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004130:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	430a      	orrs	r2, r1
 800413c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	00048083 	.word	0x00048083
 8004150:	c0f88000 	.word	0xc0f88000
 8004154:	fffffef0 	.word	0xfffffef0

08004158 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b38      	ldr	r3, [pc, #224]	; (8004250 <ETH_SetDMAConfig+0xf8>)
 800416e:	4013      	ands	r3, r2
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	6811      	ldr	r1, [r2, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	430b      	orrs	r3, r1
 800417a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800417e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	791b      	ldrb	r3, [r3, #4]
 8004184:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800418a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	7b1b      	ldrb	r3, [r3, #12]
 8004190:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <ETH_SetDMAConfig+0xfc>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	7b5b      	ldrb	r3, [r3, #13]
 80041b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <ETH_SetDMAConfig+0x100>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	7d1b      	ldrb	r3, [r3, #20]
 80041e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80041ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7f5b      	ldrb	r3, [r3, #29]
 80041f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <ETH_SetDMAConfig+0x104>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	430b      	orrs	r3, r1
 800420e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004212:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	7f1b      	ldrb	r3, [r3, #28]
 800421a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <ETH_SetDMAConfig+0x108>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	430b      	orrs	r3, r1
 800423c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004240:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	ffff87fd 	.word	0xffff87fd
 8004254:	ffff2ffe 	.word	0xffff2ffe
 8004258:	fffec000 	.word	0xfffec000
 800425c:	ffc0efef 	.word	0xffc0efef
 8004260:	7fc0ffff 	.word	0x7fc0ffff

08004264 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b0a4      	sub	sp, #144	; 0x90
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004272:	2300      	movs	r3, #0
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80042a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80042bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80042c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80042de:	2300      	movs	r3, #0
 80042e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80042e6:	2300      	movs	r3, #0
 80042e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80042fc:	2320      	movs	r3, #32
 80042fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800430e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004314:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004320:	2302      	movs	r3, #2
 8004322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800433e:	2300      	movs	r3, #0
 8004340:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fde6 	bl	8003f20 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004354:	2301      	movs	r3, #1
 8004356:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004358:	2301      	movs	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004366:	2300      	movs	r3, #0
 8004368:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800436e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004372:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800437c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004384:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fee1 	bl	8004158 <ETH_SetDMAConfig>
}
 8004396:	bf00      	nop
 8004398:	3790      	adds	r7, #144	; 0x90
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e01d      	b.n	80043e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68d9      	ldr	r1, [r3, #12]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	3206      	adds	r2, #6
 80043de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d9de      	bls.n	80043ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fc:	461a      	mov	r2, r3
 80043fe:	2303      	movs	r3, #3
 8004400:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004420:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e023      	b.n	8004486 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2200      	movs	r2, #0
 800445a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	3212      	adds	r2, #18
 800447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d9d8      	bls.n	800443e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b2:	461a      	mov	r2, r3
 80044b4:	2303      	movs	r3, #3
 80044b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <HAL_GPIO_Init+0x234>)
 80044fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044fe:	e194      	b.n	800482a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8186 	beq.w	8004824 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <HAL_GPIO_Init+0x44>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d130      	bne.n	8004592 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004566:	2201      	movs	r2, #1
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0201 	and.w	r2, r3, #1
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d017      	beq.n	80045ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2203      	movs	r2, #3
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d123      	bne.n	8004622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	08da      	lsrs	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3208      	adds	r2, #8
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80e0 	beq.w	8004824 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <HAL_GPIO_Init+0x238>)
 8004666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800466a:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_GPIO_Init+0x238>)
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_GPIO_Init+0x238>)
 8004676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004682:	4a29      	ldr	r2, [pc, #164]	; (8004728 <HAL_GPIO_Init+0x23c>)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	3302      	adds	r3, #2
 800468a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	220f      	movs	r2, #15
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a20      	ldr	r2, [pc, #128]	; (800472c <HAL_GPIO_Init+0x240>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d052      	beq.n	8004754 <HAL_GPIO_Init+0x268>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_GPIO_Init+0x244>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d031      	beq.n	800471a <HAL_GPIO_Init+0x22e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_GPIO_Init+0x248>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <HAL_GPIO_Init+0x22a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <HAL_GPIO_Init+0x24c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x226>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_GPIO_Init+0x250>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x222>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_GPIO_Init+0x254>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x21e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_GPIO_Init+0x258>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x21a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_GPIO_Init+0x25c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x216>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_GPIO_Init+0x260>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_GPIO_Init+0x264>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x20e>
 80046f6:	2309      	movs	r3, #9
 80046f8:	e02d      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 80046fa:	230a      	movs	r3, #10
 80046fc:	e02b      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 80046fe:	2308      	movs	r3, #8
 8004700:	e029      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 8004702:	2307      	movs	r3, #7
 8004704:	e027      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 8004706:	2306      	movs	r3, #6
 8004708:	e025      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 800470a:	2305      	movs	r3, #5
 800470c:	e023      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 800470e:	2304      	movs	r3, #4
 8004710:	e021      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 8004712:	2303      	movs	r3, #3
 8004714:	e01f      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 8004716:	2302      	movs	r3, #2
 8004718:	e01d      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 800471a:	2301      	movs	r3, #1
 800471c:	e01b      	b.n	8004756 <HAL_GPIO_Init+0x26a>
 800471e:	bf00      	nop
 8004720:	58000080 	.word	0x58000080
 8004724:	58024400 	.word	0x58024400
 8004728:	58000400 	.word	0x58000400
 800472c:	58020000 	.word	0x58020000
 8004730:	58020400 	.word	0x58020400
 8004734:	58020800 	.word	0x58020800
 8004738:	58020c00 	.word	0x58020c00
 800473c:	58021000 	.word	0x58021000
 8004740:	58021400 	.word	0x58021400
 8004744:	58021800 	.word	0x58021800
 8004748:	58021c00 	.word	0x58021c00
 800474c:	58022000 	.word	0x58022000
 8004750:	58022400 	.word	0x58022400
 8004754:	2300      	movs	r3, #0
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	f002 0203 	and.w	r2, r2, #3
 800475c:	0092      	lsls	r2, r2, #2
 800475e:	4093      	lsls	r3, r2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004766:	4938      	ldr	r1, [pc, #224]	; (8004848 <HAL_GPIO_Init+0x35c>)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	3302      	adds	r3, #2
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800479a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3301      	adds	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f ae63 	bne.w	8004500 <HAL_GPIO_Init+0x14>
  }
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3724      	adds	r7, #36	; 0x24
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	58000400 	.word	0x58000400

0800484c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800485c:	787b      	ldrb	r3, [r7, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004868:	e003      	b.n	8004872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	041a      	lsls	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	619a      	str	r2, [r3, #24]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004890:	887a      	ldrh	r2, [r7, #2]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	041a      	lsls	r2, r3, #16
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	43d9      	mvns	r1, r3
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	400b      	ands	r3, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc ff88 	bl	80017f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	e006      	b.n	800493c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800493a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d104      	bne.n	800494e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_I2C_Init+0x11c>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800496c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69d9      	ldr	r1, [r3, #28]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	02008000 	.word	0x02008000

080049d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d138      	bne.n	8004a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e032      	b.n	8004a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d139      	bne.n	8004af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e033      	b.n	8004af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2224      	movs	r2, #36	; 0x24
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0bf      	b.n	8004c96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fec8 	bl	80018c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004b46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_LTDC_Init+0x19c>)
 8004b78:	400b      	ands	r3, r1
 8004b7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <HAL_LTDC_Init+0x19c>)
 8004ba6:	400b      	ands	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68d9      	ldr	r1, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6919      	ldr	r1, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <HAL_LTDC_Init+0x19c>)
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6919      	ldr	r1, [r3, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6959      	ldr	r1, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_LTDC_Init+0x19c>)
 8004c02:	400b      	ands	r3, r1
 8004c04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6959      	ldr	r1, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0206 	orr.w	r2, r2, #6
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	f000f800 	.word	0xf000f800

08004ca4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_LTDC_ConfigLayer+0x1a>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e02c      	b.n	8004d18 <HAL_LTDC_ConfigLayer+0x74>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2134      	movs	r1, #52	; 0x34
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f811 	bl	8004d20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2201      	movs	r2, #1
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bdb0      	pop	{r4, r5, r7, pc}

08004d20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	4413      	add	r3, r2
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	01db      	lsls	r3, r3, #7
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3384      	adds	r3, #132	; 0x84
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	4611      	mov	r1, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	01d2      	lsls	r2, r2, #7
 8004d5c:	440a      	add	r2, r1
 8004d5e:	3284      	adds	r2, #132	; 0x84
 8004d60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	01db      	lsls	r3, r3, #7
 8004d84:	440b      	add	r3, r1
 8004d86:	3384      	adds	r3, #132	; 0x84
 8004d88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9e:	4413      	add	r3, r2
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4413      	add	r3, r2
 8004db0:	3384      	adds	r3, #132	; 0x84
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	4611      	mov	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	01d2      	lsls	r2, r2, #7
 8004dbe:	440a      	add	r2, r1
 8004dc0:	3284      	adds	r2, #132	; 0x84
 8004dc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004dc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd6:	4413      	add	r3, r2
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	01db      	lsls	r3, r3, #7
 8004de4:	440b      	add	r3, r1
 8004de6:	3384      	adds	r3, #132	; 0x84
 8004de8:	4619      	mov	r1, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	01db      	lsls	r3, r3, #7
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3384      	adds	r3, #132	; 0x84
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	4611      	mov	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	01d2      	lsls	r2, r2, #7
 8004e0a:	440a      	add	r2, r1
 8004e0c:	3284      	adds	r2, #132	; 0x84
 8004e0e:	f023 0307 	bic.w	r3, r3, #7
 8004e12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	4413      	add	r3, r2
 8004e20:	3384      	adds	r3, #132	; 0x84
 8004e22:	461a      	mov	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	01db      	lsls	r3, r3, #7
 8004e50:	4413      	add	r3, r2
 8004e52:	3384      	adds	r3, #132	; 0x84
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	01db      	lsls	r3, r3, #7
 8004e60:	4413      	add	r3, r2
 8004e62:	3384      	adds	r3, #132	; 0x84
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e70:	461a      	mov	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	440b      	add	r3, r1
 8004e86:	3384      	adds	r3, #132	; 0x84
 8004e88:	4619      	mov	r1, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	01db      	lsls	r3, r3, #7
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3384      	adds	r3, #132	; 0x84
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	01d2      	lsls	r2, r2, #7
 8004eaa:	440a      	add	r2, r1
 8004eac:	3284      	adds	r2, #132	; 0x84
 8004eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	01db      	lsls	r3, r3, #7
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3384      	adds	r3, #132	; 0x84
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	01db      	lsls	r3, r3, #7
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3384      	adds	r3, #132	; 0x84
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	01db      	lsls	r3, r3, #7
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3384      	adds	r3, #132	; 0x84
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4b58      	ldr	r3, [pc, #352]	; (800504c <LTDC_SetConfig+0x32c>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	6809      	ldr	r1, [r1, #0]
 8004efc:	4608      	mov	r0, r1
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	01c9      	lsls	r1, r1, #7
 8004f02:	4401      	add	r1, r0
 8004f04:	3184      	adds	r1, #132	; 0x84
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	01db      	lsls	r3, r3, #7
 8004f14:	4413      	add	r3, r2
 8004f16:	3384      	adds	r3, #132	; 0x84
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	01db      	lsls	r3, r3, #7
 8004f24:	4413      	add	r3, r2
 8004f26:	3384      	adds	r3, #132	; 0x84
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	01db      	lsls	r3, r3, #7
 8004f38:	4413      	add	r3, r2
 8004f3a:	3384      	adds	r3, #132	; 0x84
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e01b      	b.n	8004f8a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d102      	bne.n	8004f60 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e014      	b.n	8004f8a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d00b      	beq.n	8004f80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d007      	beq.n	8004f80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f7c:	2b07      	cmp	r3, #7
 8004f7e:	d102      	bne.n	8004f86 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004f80:	2302      	movs	r3, #2
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e001      	b.n	8004f8a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	01db      	lsls	r3, r3, #7
 8004f94:	4413      	add	r3, r2
 8004f96:	3384      	adds	r3, #132	; 0x84
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	01d2      	lsls	r2, r2, #7
 8004fa4:	440a      	add	r2, r1
 8004fa6:	3284      	adds	r2, #132	; 0x84
 8004fa8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004fac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	041a      	lsls	r2, r3, #16
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	3307      	adds	r3, #7
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	6809      	ldr	r1, [r1, #0]
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	01c9      	lsls	r1, r1, #7
 8004fd6:	4401      	add	r1, r0
 8004fd8:	3184      	adds	r1, #132	; 0x84
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	01db      	lsls	r3, r3, #7
 8004fe8:	4413      	add	r3, r2
 8004fea:	3384      	adds	r3, #132	; 0x84
 8004fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	01db      	lsls	r3, r3, #7
 8004ff8:	440b      	add	r3, r1
 8004ffa:	3384      	adds	r3, #132	; 0x84
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <LTDC_SetConfig+0x330>)
 8005000:	4013      	ands	r3, r2
 8005002:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	01db      	lsls	r3, r3, #7
 800500e:	4413      	add	r3, r2
 8005010:	3384      	adds	r3, #132	; 0x84
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	01db      	lsls	r3, r3, #7
 8005024:	4413      	add	r3, r2
 8005026:	3384      	adds	r3, #132	; 0x84
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	4611      	mov	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	01d2      	lsls	r2, r2, #7
 8005034:	440a      	add	r2, r1
 8005036:	3284      	adds	r2, #132	; 0x84
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6013      	str	r3, [r2, #0]
}
 800503e:	bf00      	nop
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	fffff8f8 	.word	0xfffff8f8
 8005050:	fffff800 	.word	0xfffff800

08005054 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e096      	b.n	800519c <HAL_NOR_Init+0x148>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7fd f8cc 	bl	8002220 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3308      	adds	r3, #8
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f006 f916 	bl	800b2c4 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	f006 f99e 	bl	800b3e4 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6858      	ldr	r0, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	f006 f9e5 	bl	800b484 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6892      	ldr	r2, [r2, #8]
 80050c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	f041 0101 	orr.w	r1, r1, #1
 80050d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 80050de:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_NOR_Init+0x150>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e002      	b.n	80050ec <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_NOR_Init+0x150>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80050ec:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_NOR_Init+0x154>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_NOR_Init+0x154>)
 80050f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <HAL_NOR_Init+0xbc>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8005108:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e012      	b.n	8005136 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d103      	bne.n	8005120 <HAL_NOR_Init+0xcc>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8005118:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e00a      	b.n	8005136 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b04      	cmp	r3, #4
 8005126:	d103      	bne.n	8005130 <HAL_NOR_Init+0xdc>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8005128:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e002      	b.n	8005136 <HAL_NOR_Init+0xe2>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8005130:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10c      	bne.n	8005158 <HAL_NOR_Init+0x104>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f006 f9d3 	bl	800b4f4 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2204      	movs	r2, #4
 8005152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005156:	e020      	b.n	800519a <HAL_NOR_Init+0x146>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_NOR_Init+0x150>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <HAL_NOR_Init+0x112>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	33aa      	adds	r3, #170	; 0xaa
 8005164:	e001      	b.n	800516a <HAL_NOR_Init+0x116>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3355      	adds	r3, #85	; 0x55
 800516a:	2298      	movs	r2, #152	; 0x98
 800516c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800516e:	f3bf 8f4f 	dsb	sy
}
 8005172:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_NOR_Init+0x150>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <HAL_NOR_Init+0x12e>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3326      	adds	r3, #38	; 0x26
 8005180:	e001      	b.n	8005186 <HAL_NOR_Init+0x132>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3313      	adds	r3, #19
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f80b 	bl	80051ac <HAL_NOR_ReturnToReadMode>
 8005196:	4603      	mov	r3, r0
 8005198:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 800519a:	7cfb      	ldrb	r3, [r7, #19]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	24001178 	.word	0x24001178
 80051a8:	52004000 	.word	0x52004000

080051ac <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051be:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 80051c0:	7abb      	ldrb	r3, [r7, #10]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d101      	bne.n	80051ca <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
 80051c8:	e052      	b.n	8005270 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 80051ca:	7abb      	ldrb	r3, [r7, #10]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d101      	bne.n	80051d4 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e04d      	b.n	8005270 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 80051d4:	7abb      	ldrb	r3, [r7, #10]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d149      	bne.n	800526e <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_NOR_ReturnToReadMode+0x3c>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e043      	b.n	8005270 <HAL_NOR_ReturnToReadMode+0xc4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8005200:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e012      	b.n	800522e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d103      	bne.n	8005218 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8005210:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e00a      	b.n	800522e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d103      	bne.n	8005228 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8005220:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e002      	b.n	800522e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8005228:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800522c:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2b02      	cmp	r3, #2
 8005234:	d105      	bne.n	8005242 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	22f0      	movs	r2, #240	; 0xf0
 800523a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800523c:	f3bf 8f4f 	dsb	sy
}
 8005240:	e00b      	b.n	800525a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005250:	f3bf 8f4f 	dsb	sy
}
 8005254:	e001      	b.n	800525a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7aba      	ldrb	r2, [r7, #10]
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	e000      	b.n	8005270 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800527c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527e:	b08f      	sub	sp, #60	; 0x3c
 8005280:	af0a      	add	r7, sp, #40	; 0x28
 8005282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e116      	b.n	80054bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fc fd71 	bl	8001d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2203      	movs	r2, #3
 80052b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f006 fa5b 	bl	800b788 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	687e      	ldr	r6, [r7, #4]
 80052da:	466d      	mov	r5, sp
 80052dc:	f106 0410 	add.w	r4, r6, #16
 80052e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80052f0:	1d33      	adds	r3, r6, #4
 80052f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f4:	6838      	ldr	r0, [r7, #0]
 80052f6:	f006 f9d9 	bl	800b6ac <USB_CoreInit>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0d7      	b.n	80054bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f006 fa49 	bl	800b7aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e04a      	b.n	80053b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	333d      	adds	r3, #61	; 0x3d
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	333c      	adds	r3, #60	; 0x3c
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	b298      	uxth	r0, r3
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3356      	adds	r3, #86	; 0x56
 800535a:	4602      	mov	r2, r0
 800535c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3340      	adds	r3, #64	; 0x40
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3344      	adds	r3, #68	; 0x44
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3348      	adds	r3, #72	; 0x48
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	334c      	adds	r3, #76	; 0x4c
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	3301      	adds	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3af      	bcc.n	800531e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e044      	b.n	800544e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053da:	7bfa      	ldrb	r2, [r7, #15]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800541c:	7bfa      	ldrb	r2, [r7, #15]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	3301      	adds	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3b5      	bcc.n	80053c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	687e      	ldr	r6, [r7, #4]
 8005460:	466d      	mov	r5, sp
 8005462:	f106 0410 	add.w	r4, r6, #16
 8005466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800546c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005472:	e885 0003 	stmia.w	r5, {r0, r1}
 8005476:	1d33      	adds	r3, r6, #4
 8005478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800547a:	6838      	ldr	r0, [r7, #0]
 800547c:	f006 f9e2 	bl	800b844 <USB_DevInit>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e014      	b.n	80054bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f80a 	bl	80054c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f006 fba0 	bl	800bbfa <USB_DevDisconnect>

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_PCDEx_ActivateLPM+0x44>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	10000003 	.word	0x10000003

0800550c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a04      	ldr	r2, [pc, #16]	; (8005528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	58024800 	.word	0x58024800

0800552c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00a      	beq.n	8005556 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005540:	4b16      	ldr	r3, [pc, #88]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01f      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e01d      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	490f      	ldr	r1, [pc, #60]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005566:	f7fd f8b5 	bl	80026d4 <HAL_GetTick>
 800556a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800556c:	e009      	b.n	8005582 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800556e:	f7fd f8b1 	bl	80026d4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800557c:	d901      	bls.n	8005582 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e007      	b.n	8005592 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_PWREx_ConfigSupply+0x70>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	d1ee      	bne.n	800556e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	58024800 	.word	0x58024800

080055a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80055aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ae:	60d3      	str	r3, [r2, #12]
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58024800 	.word	0x58024800

080055c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7fd f884 	bl	80026d4 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e05f      	b.n	8005698 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fc fa31 	bl	8001a4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80055ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f85a 	bl	80056a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	3b01      	subs	r3, #1
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	2120      	movs	r1, #32
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f852 	bl	80056c4 <QSPI_WaitFlagStateUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005624:	7afb      	ldrb	r3, [r7, #11]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d135      	bne.n	8005696 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <HAL_QSPI_Init+0xe0>)
 8005632:	4013      	ands	r3, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	0611      	lsls	r1, r2, #24
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68d2      	ldr	r2, [r2, #12]
 800563e:	4311      	orrs	r1, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	69d2      	ldr	r2, [r2, #28]
 8005644:	4311      	orrs	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6a12      	ldr	r2, [r2, #32]
 800564a:	4311      	orrs	r1, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	430b      	orrs	r3, r1
 8005652:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <HAL_QSPI_Init+0xe4>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6912      	ldr	r2, [r2, #16]
 8005662:	0411      	lsls	r1, r2, #16
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6952      	ldr	r2, [r2, #20]
 8005668:	4311      	orrs	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6992      	ldr	r2, [r2, #24]
 800566e:	4311      	orrs	r1, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	430b      	orrs	r3, r1
 8005676:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005696:	7afb      	ldrb	r3, [r7, #11]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	00ffff2f 	.word	0x00ffff2f
 80056a4:	ffe0f8fe 	.word	0xffe0f8fe

080056a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056d4:	e01a      	b.n	800570c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056dc:	d016      	beq.n	800570c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056de:	f7fc fff9 	bl	80026d4 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2204      	movs	r2, #4
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e00e      	b.n	800572a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf14      	ite	ne
 800571a:	2301      	movne	r3, #1
 800571c:	2300      	moveq	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d1d6      	bne.n	80056d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08c      	sub	sp, #48	; 0x30
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f000 bc48 	b.w	8005fd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8088 	beq.w	8005866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005756:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005760:	4b96      	ldr	r3, [pc, #600]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b10      	cmp	r3, #16
 800576a:	d007      	beq.n	800577c <HAL_RCC_OscConfig+0x48>
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b18      	cmp	r3, #24
 8005770:	d111      	bne.n	8005796 <HAL_RCC_OscConfig+0x62>
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d10c      	bne.n	8005796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	4b8f      	ldr	r3, [pc, #572]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d06d      	beq.n	8005864 <HAL_RCC_OscConfig+0x130>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d169      	bne.n	8005864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f000 bc21 	b.w	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x7a>
 80057a0:	4b86      	ldr	r3, [pc, #536]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a85      	ldr	r2, [pc, #532]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e02e      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x9c>
 80057b6:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a80      	ldr	r2, [pc, #512]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b7e      	ldr	r3, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7d      	ldr	r2, [pc, #500]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e01d      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0xc0>
 80057da:	4b78      	ldr	r3, [pc, #480]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a77      	ldr	r2, [pc, #476]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b75      	ldr	r3, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a74      	ldr	r2, [pc, #464]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057f4:	4b71      	ldr	r3, [pc, #452]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a70      	ldr	r2, [pc, #448]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b6e      	ldr	r3, [pc, #440]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6d      	ldr	r2, [pc, #436]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fc ff5e 	bl	80026d4 <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fc ff5a 	bl	80026d4 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e3d4      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800582e:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xe8>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fc ff4a 	bl	80026d4 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005844:	f7fc ff46 	bl	80026d4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e3c0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x110>
 8005862:	e000      	b.n	8005866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80ca 	beq.w	8005a08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005874:	4b51      	ldr	r3, [pc, #324]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800587e:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_RCC_OscConfig+0x166>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b18      	cmp	r3, #24
 800588e:	d156      	bne.n	800593e <HAL_RCC_OscConfig+0x20a>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d151      	bne.n	800593e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800589a:	4b48      	ldr	r3, [pc, #288]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x17e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e392      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058b2:	4b42      	ldr	r3, [pc, #264]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0219 	bic.w	r2, r3, #25
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	493f      	ldr	r1, [pc, #252]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fc ff06 	bl	80026d4 <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fc ff02 	bl	80026d4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e37c      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	f7fc ff23 	bl	8002734 <HAL_GetREVID>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d817      	bhi.n	8005928 <HAL_RCC_OscConfig+0x1f4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d108      	bne.n	8005912 <HAL_RCC_OscConfig+0x1de>
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005910:	e07a      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	4926      	ldr	r1, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005926:	e06f      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	4921      	ldr	r1, [pc, #132]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800593c:	e064      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d047      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 0219 	bic.w	r2, r3, #25
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	491a      	ldr	r1, [pc, #104]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fc febc 	bl	80026d4 <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005960:	f7fc feb8 	bl	80026d4 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e332      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	f7fc fed9 	bl	8002734 <HAL_GetREVID>
 8005982:	4603      	mov	r3, r0
 8005984:	f241 0203 	movw	r2, #4099	; 0x1003
 8005988:	4293      	cmp	r3, r2
 800598a:	d819      	bhi.n	80059c0 <HAL_RCC_OscConfig+0x28c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d108      	bne.n	80059a6 <HAL_RCC_OscConfig+0x272>
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800599c:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e030      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	031b      	lsls	r3, r3, #12
 80059b4:	4901      	ldr	r1, [pc, #4]	; (80059bc <HAL_RCC_OscConfig+0x288>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	604b      	str	r3, [r1, #4]
 80059ba:	e025      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
 80059bc:	58024400 	.word	0x58024400
 80059c0:	4b9a      	ldr	r3, [pc, #616]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	061b      	lsls	r3, r3, #24
 80059ce:	4997      	ldr	r1, [pc, #604]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
 80059d4:	e018      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d6:	4b95      	ldr	r3, [pc, #596]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a94      	ldr	r2, [pc, #592]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fc fe77 	bl	80026d4 <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fc fe73 	bl	80026d4 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e2ed      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059fc:	4b8b      	ldr	r3, [pc, #556]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a9 	beq.w	8005b68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a16:	4b85      	ldr	r3, [pc, #532]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a20:	4b82      	ldr	r3, [pc, #520]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCC_OscConfig+0x308>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b18      	cmp	r3, #24
 8005a30:	d13a      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x374>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d135      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a3c:	4b7b      	ldr	r3, [pc, #492]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_OscConfig+0x320>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e2c1      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a54:	f7fc fe6e 	bl	8002734 <HAL_GetREVID>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d817      	bhi.n	8005a92 <HAL_RCC_OscConfig+0x35e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d108      	bne.n	8005a7c <HAL_RCC_OscConfig+0x348>
 8005a6a:	4b70      	ldr	r3, [pc, #448]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a72:	4a6e      	ldr	r2, [pc, #440]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a7a:	e075      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a7c:	4b6b      	ldr	r3, [pc, #428]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	069b      	lsls	r3, r3, #26
 8005a8a:	4968      	ldr	r1, [pc, #416]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a90:	e06a      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a92:	4b66      	ldr	r3, [pc, #408]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	4962      	ldr	r1, [pc, #392]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa6:	e05f      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d042      	beq.n	8005b36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ab0:	4b5e      	ldr	r3, [pc, #376]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5d      	ldr	r2, [pc, #372]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc fe0a 	bl	80026d4 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ac4:	f7fc fe06 	bl	80026d4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e280      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ad6:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae2:	f7fc fe27 	bl	8002734 <HAL_GetREVID>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d817      	bhi.n	8005b20 <HAL_RCC_OscConfig+0x3ec>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d108      	bne.n	8005b0a <HAL_RCC_OscConfig+0x3d6>
 8005af8:	4b4c      	ldr	r3, [pc, #304]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b06:	6053      	str	r3, [r2, #4]
 8005b08:	e02e      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
 8005b0a:	4b48      	ldr	r3, [pc, #288]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	069b      	lsls	r3, r3, #26
 8005b18:	4944      	ldr	r1, [pc, #272]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	e023      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
 8005b20:	4b42      	ldr	r3, [pc, #264]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	493f      	ldr	r1, [pc, #252]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
 8005b34:	e018      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b36:	4b3d      	ldr	r3, [pc, #244]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3c      	ldr	r2, [pc, #240]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fc fdc7 	bl	80026d4 <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b4a:	f7fc fdc3 	bl	80026d4 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e23d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b5c:	4b33      	ldr	r3, [pc, #204]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d036      	beq.n	8005be2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b80:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fc fda4 	bl	80026d4 <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b90:	f7fc fda0 	bl	80026d4 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e21a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ba2:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0x45c>
 8005bae:	e018      	b.n	8005be2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fc fd8a 	bl	80026d4 <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc4:	f7fc fd86 	bl	80026d4 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e200      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d039      	beq.n	8005c62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c02:	f7fc fd67 	bl	80026d4 <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0a:	f7fc fd63 	bl	80026d4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1dd      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
 8005c28:	e01b      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c30:	4b9b      	ldr	r3, [pc, #620]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a9a      	ldr	r2, [pc, #616]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c3c:	f7fc fd4a 	bl	80026d4 <HAL_GetTick>
 8005c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c44:	f7fc fd46 	bl	80026d4 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e1c0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c56:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8081 	beq.w	8005d72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c70:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a8b      	ldr	r2, [pc, #556]	; (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c7c:	f7fc fd2a 	bl	80026d4 <HAL_GetTick>
 8005c80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c84:	f7fc fd26 	bl	80026d4 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e1a0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c96:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x584>
 8005caa:	4b7d      	ldr	r3, [pc, #500]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	4a7c      	ldr	r2, [pc, #496]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb6:	e02d      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCC_OscConfig+0x5a6>
 8005cc0:	4b77      	ldr	r3, [pc, #476]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a76      	ldr	r2, [pc, #472]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ccc:	4b74      	ldr	r3, [pc, #464]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	4a73      	ldr	r2, [pc, #460]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cd2:	f023 0304 	bic.w	r3, r3, #4
 8005cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd8:	e01c      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x5c8>
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4a6e      	ldr	r2, [pc, #440]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70
 8005cee:	4b6c      	ldr	r3, [pc, #432]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cfc:	4b68      	ldr	r3, [pc, #416]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4a67      	ldr	r2, [pc, #412]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
 8005d08:	4b65      	ldr	r3, [pc, #404]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	4a64      	ldr	r2, [pc, #400]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	f023 0304 	bic.w	r3, r3, #4
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d015      	beq.n	8005d48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fc fcda 	bl	80026d4 <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fc fcd6 	bl	80026d4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e14e      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d3a:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ee      	beq.n	8005d24 <HAL_RCC_OscConfig+0x5f0>
 8005d46:	e014      	b.n	8005d72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fc fcc4 	bl	80026d4 <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fc fcc0 	bl	80026d4 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e138      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ee      	bne.n	8005d50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 812d 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d7c:	4b48      	ldr	r3, [pc, #288]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d84:	2b18      	cmp	r3, #24
 8005d86:	f000 80bd 	beq.w	8005f04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f040 809e 	bne.w	8005ed0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fc fc98 	bl	80026d4 <HAL_GetTick>
 8005da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fc fc94 	bl	80026d4 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e10e      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dc6:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dca:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <HAL_RCC_OscConfig+0x774>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4931      	ldr	r1, [pc, #196]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	628b      	str	r3, [r1, #40]	; 0x28
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	3b01      	subs	r3, #1
 8005de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	3b01      	subs	r3, #1
 8005df0:	025b      	lsls	r3, r3, #9
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e10:	4923      	ldr	r1, [pc, #140]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e16:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4a21      	ldr	r2, [pc, #132]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e22:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e26:	4b21      	ldr	r3, [pc, #132]	; (8005eac <HAL_RCC_OscConfig+0x778>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e2e:	00d2      	lsls	r2, r2, #3
 8005e30:	491b      	ldr	r1, [pc, #108]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	f023 020c 	bic.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4917      	ldr	r1, [pc, #92]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	f023 0202 	bic.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e54:	4912      	ldr	r1, [pc, #72]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fc fc1d 	bl	80026d4 <HAL_GetTick>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e9c:	e011      	b.n	8005ec2 <HAL_RCC_OscConfig+0x78e>
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58024800 	.word	0x58024800
 8005ea8:	fffffc0c 	.word	0xfffffc0c
 8005eac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb0:	f7fc fc10 	bl	80026d4 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e08a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec2:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x77c>
 8005ece:	e082      	b.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed0:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a42      	ldr	r2, [pc, #264]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fc fbfa 	bl	80026d4 <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fc fbf6 	bl	80026d4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e070      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x7b0>
 8005f02:	e068      	b.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f0a:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d031      	beq.n	8005f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d12a      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d122      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d11a      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	0a5b      	lsrs	r3, r3, #9
 8005f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d111      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0c1b      	lsrs	r3, r3, #16
 8005f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d108      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e02b      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	08db      	lsrs	r3, r3, #3
 8005f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d01f      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f96:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fa2:	f7fc fb97 	bl	80026d4 <HAL_GetTick>
 8005fa6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fa8:	bf00      	nop
 8005faa:	f7fc fb93 	bl	80026d4 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d0f9      	beq.n	8005faa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <HAL_RCC_OscConfig+0x8b0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fc2:	00d2      	lsls	r2, r2, #3
 8005fc4:	4906      	ldr	r1, [pc, #24]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	; 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	ffff0007 	.word	0xffff0007

08005fe8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e19c      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b8a      	ldr	r3, [pc, #552]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d910      	bls.n	800602c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b87      	ldr	r3, [pc, #540]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 020f 	bic.w	r2, r3, #15
 8006012:	4985      	ldr	r1, [pc, #532]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b83      	ldr	r3, [pc, #524]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e184      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	4b7b      	ldr	r3, [pc, #492]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006044:	429a      	cmp	r2, r3
 8006046:	d908      	bls.n	800605a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006048:	4b78      	ldr	r3, [pc, #480]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4975      	ldr	r1, [pc, #468]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006056:	4313      	orrs	r3, r2
 8006058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d010      	beq.n	8006088 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	4b70      	ldr	r3, [pc, #448]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006072:	429a      	cmp	r2, r3
 8006074:	d908      	bls.n	8006088 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006076:	4b6d      	ldr	r3, [pc, #436]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	496a      	ldr	r1, [pc, #424]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006084:	4313      	orrs	r3, r2
 8006086:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d010      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	4b64      	ldr	r3, [pc, #400]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d908      	bls.n	80060b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060a4:	4b61      	ldr	r3, [pc, #388]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	495e      	ldr	r1, [pc, #376]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d010      	beq.n	80060e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	4b59      	ldr	r3, [pc, #356]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d908      	bls.n	80060e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060d2:	4b56      	ldr	r3, [pc, #344]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4953      	ldr	r1, [pc, #332]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	4b4d      	ldr	r3, [pc, #308]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d908      	bls.n	8006112 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b4a      	ldr	r3, [pc, #296]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f023 020f 	bic.w	r2, r3, #15
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4947      	ldr	r1, [pc, #284]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800610e:	4313      	orrs	r3, r2
 8006110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d055      	beq.n	80061ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800611e:	4b43      	ldr	r3, [pc, #268]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	4940      	ldr	r1, [pc, #256]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800612c:	4313      	orrs	r3, r2
 800612e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d107      	bne.n	8006148 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006138:	4b3c      	ldr	r3, [pc, #240]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d121      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0f6      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d107      	bne.n	8006160 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006150:	4b36      	ldr	r3, [pc, #216]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d115      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0ea      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006168:	4b30      	ldr	r3, [pc, #192]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0de      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006178:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d6      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f023 0207 	bic.w	r2, r3, #7
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4925      	ldr	r1, [pc, #148]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800619a:	f7fc fa9b 	bl	80026d4 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a2:	f7fc fa97 	bl	80026d4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e0be      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b8:	4b1c      	ldr	r3, [pc, #112]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d1eb      	bne.n	80061a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d010      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d208      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e6:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f023 020f 	bic.w	r2, r3, #15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	490e      	ldr	r1, [pc, #56]	; (800622c <HAL_RCC_ClockConfig+0x244>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d214      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 020f 	bic.w	r2, r3, #15
 800620e:	4906      	ldr	r1, [pc, #24]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006216:	4b04      	ldr	r3, [pc, #16]	; (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e086      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
 8006228:	52002000 	.word	0x52002000
 800622c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d010      	beq.n	800625e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	4b3f      	ldr	r3, [pc, #252]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006248:	429a      	cmp	r2, r3
 800624a:	d208      	bcs.n	800625e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800624c:	4b3c      	ldr	r3, [pc, #240]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4939      	ldr	r1, [pc, #228]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 800625a:	4313      	orrs	r3, r2
 800625c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	4b34      	ldr	r3, [pc, #208]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006276:	429a      	cmp	r2, r3
 8006278:	d208      	bcs.n	800628c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	492e      	ldr	r1, [pc, #184]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006288:	4313      	orrs	r3, r2
 800628a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	4b28      	ldr	r3, [pc, #160]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d208      	bcs.n	80062ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	4922      	ldr	r1, [pc, #136]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d208      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062d6:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4917      	ldr	r1, [pc, #92]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062e8:	f000 f89e 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	4912      	ldr	r1, [pc, #72]	; (8006344 <HAL_RCC_ClockConfig+0x35c>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <HAL_RCC_ClockConfig+0x35c>)
 8006310:	5cd3      	ldrb	r3, [r2, r3]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x360>)
 800631e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <HAL_RCC_ClockConfig+0x364>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <HAL_RCC_ClockConfig+0x368>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fc f84e 	bl	80023cc <HAL_InitTick>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
 8006344:	0800e9f8 	.word	0x0800e9f8
 8006348:	24000004 	.word	0x24000004
 800634c:	24000000 	.word	0x24000000
 8006350:	24000008 	.word	0x24000008

08006354 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08c      	sub	sp, #48	; 0x30
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12a      	bne.n	80063bc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 8006368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800636c:	4a2b      	ldr	r2, [pc, #172]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006376:	4b29      	ldr	r3, [pc, #164]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 8006378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638a:	2302      	movs	r3, #2
 800638c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800638e:	2303      	movs	r3, #3
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006392:	2300      	movs	r3, #0
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800639a:	f107 031c 	add.w	r3, r7, #28
 800639e:	4619      	mov	r1, r3
 80063a0:	481f      	ldr	r0, [pc, #124]	; (8006420 <HAL_RCC_MCOConfig+0xcc>)
 80063a2:	f7fe f8a3 	bl	80044ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	430b      	orrs	r3, r1
 80063b4:	4919      	ldr	r1, [pc, #100]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80063ba:	e02a      	b.n	8006412 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063cc:	4b13      	ldr	r3, [pc, #76]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80063da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e0:	2302      	movs	r3, #2
 80063e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e4:	2303      	movs	r3, #3
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80063f0:	f107 031c 	add.w	r3, r7, #28
 80063f4:	4619      	mov	r1, r3
 80063f6:	480b      	ldr	r0, [pc, #44]	; (8006424 <HAL_RCC_MCOConfig+0xd0>)
 80063f8:	f7fe f878 	bl	80044ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80063fc:	4b07      	ldr	r3, [pc, #28]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01d9      	lsls	r1, r3, #7
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	430b      	orrs	r3, r1
 800640c:	4903      	ldr	r1, [pc, #12]	; (800641c <HAL_RCC_MCOConfig+0xc8>)
 800640e:	4313      	orrs	r3, r2
 8006410:	610b      	str	r3, [r1, #16]
}
 8006412:	bf00      	nop
 8006414:	3730      	adds	r7, #48	; 0x30
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	58024400 	.word	0x58024400
 8006420:	58020000 	.word	0x58020000
 8006424:	58020800 	.word	0x58020800

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800642e:	4bb3      	ldr	r3, [pc, #716]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006436:	2b18      	cmp	r3, #24
 8006438:	f200 8155 	bhi.w	80066e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080066e7 	.word	0x080066e7
 800644c:	080066e7 	.word	0x080066e7
 8006450:	080066e7 	.word	0x080066e7
 8006454:	080066e7 	.word	0x080066e7
 8006458:	080066e7 	.word	0x080066e7
 800645c:	080066e7 	.word	0x080066e7
 8006460:	080066e7 	.word	0x080066e7
 8006464:	080064cf 	.word	0x080064cf
 8006468:	080066e7 	.word	0x080066e7
 800646c:	080066e7 	.word	0x080066e7
 8006470:	080066e7 	.word	0x080066e7
 8006474:	080066e7 	.word	0x080066e7
 8006478:	080066e7 	.word	0x080066e7
 800647c:	080066e7 	.word	0x080066e7
 8006480:	080066e7 	.word	0x080066e7
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080066e7 	.word	0x080066e7
 800648c:	080066e7 	.word	0x080066e7
 8006490:	080066e7 	.word	0x080066e7
 8006494:	080066e7 	.word	0x080066e7
 8006498:	080066e7 	.word	0x080066e7
 800649c:	080066e7 	.word	0x080066e7
 80064a0:	080066e7 	.word	0x080066e7
 80064a4:	080064db 	.word	0x080064db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a8:	4b94      	ldr	r3, [pc, #592]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b4:	4b91      	ldr	r3, [pc, #580]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	4a90      	ldr	r2, [pc, #576]	; (8006700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80064c6:	e111      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064c8:	4b8d      	ldr	r3, [pc, #564]	; (8006700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064ca:	61bb      	str	r3, [r7, #24]
      break;
 80064cc:	e10e      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80064ce:	4b8d      	ldr	r3, [pc, #564]	; (8006704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064d0:	61bb      	str	r3, [r7, #24]
      break;
 80064d2:	e10b      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80064d4:	4b8c      	ldr	r3, [pc, #560]	; (8006708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80064d6:	61bb      	str	r3, [r7, #24]
      break;
 80064d8:	e108      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064da:	4b88      	ldr	r3, [pc, #544]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064e4:	4b85      	ldr	r3, [pc, #532]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	091b      	lsrs	r3, r3, #4
 80064ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064f0:	4b82      	ldr	r3, [pc, #520]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064fa:	4b80      	ldr	r3, [pc, #512]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	08db      	lsrs	r3, r3, #3
 8006500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80e1 	beq.w	80066e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b02      	cmp	r3, #2
 8006522:	f000 8083 	beq.w	800662c <HAL_RCC_GetSysClockFreq+0x204>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b02      	cmp	r3, #2
 800652a:	f200 80a1 	bhi.w	8006670 <HAL_RCC_GetSysClockFreq+0x248>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x114>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d056      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800653a:	e099      	b.n	8006670 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800653c:	4b6f      	ldr	r3, [pc, #444]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02d      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006548:	4b6c      	ldr	r3, [pc, #432]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	4a6b      	ldr	r2, [pc, #428]	; (8006700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b62      	ldr	r3, [pc, #392]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a02 	vldr	s12, [r7, #8]
 8006586:	eddf 5a61 	vldr	s11, [pc, #388]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e4>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80065a2:	e087      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006710 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b51      	ldr	r3, [pc, #324]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065e6:	e065      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006714 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a02 	vldr	s12, [r7, #8]
 800660e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800662a:	e043      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006652:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800666e:	e021      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006682:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	ed97 6a02 	vldr	s12, [r7, #8]
 8006696:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800670c <HAL_RCC_GetSysClockFreq+0x2e4>
 800669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	0a5b      	lsrs	r3, r3, #9
 80066ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066be:	3301      	adds	r3, #1
 80066c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80066d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d8:	ee17 3a90 	vmov	r3, s15
 80066dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80066de:	e005      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61bb      	str	r3, [r7, #24]
      break;
 80066e4:	e002      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066e8:	61bb      	str	r3, [r7, #24]
      break;
 80066ea:	bf00      	nop
  }

  return sysclockfreq;
 80066ec:	69bb      	ldr	r3, [r7, #24]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3724      	adds	r7, #36	; 0x24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	58024400 	.word	0x58024400
 8006700:	03d09000 	.word	0x03d09000
 8006704:	003d0900 	.word	0x003d0900
 8006708:	017d7840 	.word	0x017d7840
 800670c:	46000000 	.word	0x46000000
 8006710:	4c742400 	.word	0x4c742400
 8006714:	4a742400 	.word	0x4a742400
 8006718:	4bbebc20 	.word	0x4bbebc20

0800671c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006722:	f7ff fe81 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8006726:	4602      	mov	r2, r0
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <HAL_RCC_GetHCLKFreq+0x50>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	490f      	ldr	r1, [pc, #60]	; (8006770 <HAL_RCC_GetHCLKFreq+0x54>)
 8006734:	5ccb      	ldrb	r3, [r1, r3]
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <HAL_RCC_GetHCLKFreq+0x50>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	4a09      	ldr	r2, [pc, #36]	; (8006770 <HAL_RCC_GetHCLKFreq+0x54>)
 800674a:	5cd3      	ldrb	r3, [r2, r3]
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_GetHCLKFreq+0x58>)
 8006758:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_RCC_GetHCLKFreq+0x5c>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <HAL_RCC_GetHCLKFreq+0x58>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	58024400 	.word	0x58024400
 8006770:	0800e9f8 	.word	0x0800e9f8
 8006774:	24000004 	.word	0x24000004
 8006778:	24000000 	.word	0x24000000

0800677c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006780:	f7ff ffcc 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	4904      	ldr	r1, [pc, #16]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	58024400 	.word	0x58024400
 80067a4:	0800e9f8 	.word	0x0800e9f8

080067a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067ac:	f7ff ffb6 	bl	800671c <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4904      	ldr	r1, [pc, #16]	; (80067d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	58024400 	.word	0x58024400
 80067d0:	0800e9f8 	.word	0x0800e9f8

080067d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	223f      	movs	r2, #63	; 0x3f
 80067e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067e4:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0207 	and.w	r2, r3, #7
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80067fc:	4b14      	ldr	r3, [pc, #80]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f003 020f 	and.w	r2, r3, #15
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800682c:	4b08      	ldr	r3, [pc, #32]	; (8006850 <HAL_RCC_GetClockConfig+0x7c>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_RCC_GetClockConfig+0x80>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	58024400 	.word	0x58024400
 8006854:	52002000 	.word	0x52002000

08006858 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800685c:	b0ca      	sub	sp, #296	; 0x128
 800685e:	af00      	add	r7, sp, #0
 8006860:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800686a:	2300      	movs	r3, #0
 800686c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800687c:	2500      	movs	r5, #0
 800687e:	ea54 0305 	orrs.w	r3, r4, r5
 8006882:	d049      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688e:	d02f      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006894:	d828      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800689a:	d01a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800689c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a0:	d822      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068aa:	d007      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068ac:	e01c      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ae:	4bb8      	ldr	r3, [pc, #736]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	4ab7      	ldr	r2, [pc, #732]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068ba:	e01a      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c0:	3308      	adds	r3, #8
 80068c2:	2102      	movs	r1, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f002 fb61 	bl	8008f8c <RCCEx_PLL2_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068d0:	e00f      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d6:	3328      	adds	r3, #40	; 0x28
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fc08 	bl	80090f0 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068e6:	e004      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068ee:	e000      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068fa:	4ba5      	ldr	r3, [pc, #660]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	4aa1      	ldr	r2, [pc, #644]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800690a:	430b      	orrs	r3, r1
 800690c:	6513      	str	r3, [r2, #80]	; 0x50
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006924:	f04f 0900 	mov.w	r9, #0
 8006928:	ea58 0309 	orrs.w	r3, r8, r9
 800692c:	d047      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	2b04      	cmp	r3, #4
 8006936:	d82a      	bhi.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006955 	.word	0x08006955
 8006944:	08006963 	.word	0x08006963
 8006948:	08006979 	.word	0x08006979
 800694c:	08006997 	.word	0x08006997
 8006950:	08006997 	.word	0x08006997
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4b8e      	ldr	r3, [pc, #568]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	4a8d      	ldr	r2, [pc, #564]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800695a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800695e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006960:	e01a      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006966:	3308      	adds	r3, #8
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f002 fb0e 	bl	8008f8c <RCCEx_PLL2_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006976:	e00f      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697c:	3328      	adds	r3, #40	; 0x28
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f002 fbb5 	bl	80090f0 <RCCEx_PLL3_Config>
 8006986:	4603      	mov	r3, r0
 8006988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800698c:	e004      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069a0:	4b7b      	ldr	r3, [pc, #492]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	f023 0107 	bic.w	r1, r3, #7
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	4a78      	ldr	r2, [pc, #480]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6513      	str	r3, [r2, #80]	; 0x50
 80069b4:	e003      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80069ca:	f04f 0b00 	mov.w	fp, #0
 80069ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80069d2:	d04c      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	d030      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80069e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e4:	d829      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069e6:	2bc0      	cmp	r3, #192	; 0xc0
 80069e8:	d02d      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d825      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d018      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d821      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d007      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80069fe:	e01c      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b63      	ldr	r3, [pc, #396]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a62      	ldr	r2, [pc, #392]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a0c:	e01c      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a12:	3308      	adds	r3, #8
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f002 fab8 	bl	8008f8c <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a28:	3328      	adds	r3, #40	; 0x28
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 fb5f 	bl	80090f0 <RCCEx_PLL3_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a38:	e006      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a40:	e002      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a42:	bf00      	nop
 8006a44:	e000      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a50:	4b4f      	ldr	r3, [pc, #316]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5e:	4a4c      	ldr	r2, [pc, #304]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6513      	str	r3, [r2, #80]	; 0x50
 8006a64:	e003      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d053      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a9a:	d035      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aa0:	d82e      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aa6:	d031      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006aac:	d828      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab2:	d01a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab8:	d822      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac2:	d007      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006ac4:	e01c      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac6:	4b32      	ldr	r3, [pc, #200]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a31      	ldr	r2, [pc, #196]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad2:	e01c      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad8:	3308      	adds	r3, #8
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 fa55 	bl	8008f8c <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e011      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aee:	3328      	adds	r3, #40	; 0x28
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 fafc 	bl	80090f0 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006afe:	e006      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b06:	e002      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e000      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b16:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b26:	4a1a      	ldr	r2, [pc, #104]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006b50:	460b      	mov	r3, r1
 8006b52:	4313      	orrs	r3, r2
 8006b54:	d056      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b62:	d038      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b68:	d831      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b6e:	d034      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006b70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b74:	d82b      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d825      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006b8c:	e01f      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006b8e:	bf00      	nop
 8006b90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4ba2      	ldr	r3, [pc, #648]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4aa1      	ldr	r2, [pc, #644]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ba0:	e01c      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f002 f9ee 	bl	8008f8c <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e011      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bbc:	3328      	adds	r3, #40	; 0x28
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 fa95 	bl	80090f0 <RCCEx_PLL3_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e006      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bd4:	e002      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006be4:	4b8e      	ldr	r3, [pc, #568]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bf4:	4a8a      	ldr	r2, [pc, #552]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8006bfa:	e003      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c14:	2300      	movs	r3, #0
 8006c16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	d03a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2a:	2b30      	cmp	r3, #48	; 0x30
 8006c2c:	d01f      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006c2e:	2b30      	cmp	r3, #48	; 0x30
 8006c30:	d819      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d00c      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d815      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d019      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	d111      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c42:	4b77      	ldr	r3, [pc, #476]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	4a76      	ldr	r2, [pc, #472]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c4e:	e011      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c54:	3308      	adds	r3, #8
 8006c56:	2102      	movs	r1, #2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f002 f997 	bl	8008f8c <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c64:	e006      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c6c:	e002      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c7c:	4b68      	ldr	r3, [pc, #416]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	4a65      	ldr	r2, [pc, #404]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d051      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc4:	d035      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cca:	d82e      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cd0:	d031      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cd6:	d828      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cdc:	d01a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d822      	bhi.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d007      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006cee:	e01c      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf0:	4b4b      	ldr	r3, [pc, #300]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4a4a      	ldr	r2, [pc, #296]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e01c      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d02:	3308      	adds	r3, #8
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f002 f940 	bl	8008f8c <RCCEx_PLL2_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d12:	e011      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d18:	3328      	adds	r3, #40	; 0x28
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f002 f9e7 	bl	80090f0 <RCCEx_PLL3_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d30:	e002      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d40:	4b37      	ldr	r3, [pc, #220]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	4a34      	ldr	r2, [pc, #208]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6513      	str	r3, [r2, #80]	; 0x50
 8006d54:	e003      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d056      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d88:	d033      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d8e:	d82c      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d94:	d02f      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d9a:	d826      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006d9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006da0:	d02b      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006da2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006da6:	d820      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dac:	d012      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db2:	d81a      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d022      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbc:	d115      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f002 f8e0 	bl	8008f8c <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dd2:	e015      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd8:	3328      	adds	r3, #40	; 0x28
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f002 f987 	bl	80090f0 <RCCEx_PLL3_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006de8:	e00a      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006df0:	e006      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006df2:	bf00      	nop
 8006df4:	e004      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006df6:	bf00      	nop
 8006df8:	e002      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dfa:	bf00      	nop
 8006dfc:	e000      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e16:	4a02      	ldr	r2, [pc, #8]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e1c:	e006      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e1e:	bf00      	nop
 8006e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d055      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e58:	d033      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e5e:	d82c      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d02f      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6a:	d826      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e70:	d02b      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006e72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e76:	d820      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7c:	d012      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e82:	d81a      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d022      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e8c:	d115      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e92:	3308      	adds	r3, #8
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f002 f878 	bl	8008f8c <RCCEx_PLL2_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e015      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea8:	3328      	adds	r3, #40	; 0x28
 8006eaa:	2101      	movs	r1, #1
 8006eac:	4618      	mov	r0, r3
 8006eae:	f002 f91f 	bl	80090f0 <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ec0:	e006      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ed8:	4ba3      	ldr	r3, [pc, #652]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ee8:	4a9f      	ldr	r2, [pc, #636]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6593      	str	r3, [r2, #88]	; 0x58
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d037      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d00e      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f28:	d816      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d018      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f32:	d111      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f34:	4b8c      	ldr	r3, [pc, #560]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a8b      	ldr	r2, [pc, #556]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f40:	e00f      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f46:	3308      	adds	r3, #8
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 f81e 	bl	8008f8c <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f56:	e004      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f6a:	4b7f      	ldr	r3, [pc, #508]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a7b      	ldr	r2, [pc, #492]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	6513      	str	r3, [r2, #80]	; 0x50
 8006f7e:	e003      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	d039      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d81c      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006fc9 	.word	0x08006fc9
 8006fc0:	08006fd7 	.word	0x08006fd7
 8006fc4:	08006ff5 	.word	0x08006ff5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc8:	4b67      	ldr	r3, [pc, #412]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	4a66      	ldr	r2, [pc, #408]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	3308      	adds	r3, #8
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 ffd4 	bl	8008f8c <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ffe:	4b5a      	ldr	r3, [pc, #360]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	f023 0103 	bic.w	r1, r3, #3
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700c:	4a56      	ldr	r2, [pc, #344]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700e:	430b      	orrs	r3, r1
 8007010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007012:	e003      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007032:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	f000 809f 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800703e:	4b4b      	ldr	r3, [pc, #300]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a4a      	ldr	r2, [pc, #296]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800704a:	f7fb fb43 	bl	80026d4 <HAL_GetTick>
 800704e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007052:	e00b      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007054:	f7fb fb3e 	bl	80026d4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b64      	cmp	r3, #100	; 0x64
 8007062:	d903      	bls.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800706a:	e005      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800706c:	4b3f      	ldr	r3, [pc, #252]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ed      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800707c:	2b00      	cmp	r3, #0
 800707e:	d179      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007080:	4b39      	ldr	r3, [pc, #228]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800708c:	4053      	eors	r3, r2
 800708e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007096:	4b34      	ldr	r3, [pc, #208]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	4a30      	ldr	r2, [pc, #192]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070ae:	4b2e      	ldr	r3, [pc, #184]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	4a2d      	ldr	r2, [pc, #180]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070ba:	4a2b      	ldr	r2, [pc, #172]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	d118      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d0:	f7fb fb00 	bl	80026d4 <HAL_GetTick>
 80070d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d8:	e00d      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fb fafb 	bl	80026d4 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070e4:	1ad2      	subs	r2, r2, r3
 80070e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d903      	bls.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0eb      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007106:	2b00      	cmp	r3, #0
 8007108:	d129      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711a:	d10e      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800712c:	091a      	lsrs	r2, r3, #4
 800712e:	4b10      	ldr	r3, [pc, #64]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007130:	4013      	ands	r3, r2
 8007132:	4a0d      	ldr	r2, [pc, #52]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6113      	str	r3, [r2, #16]
 8007138:	e005      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800713a:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007140:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007144:	6113      	str	r3, [r2, #16]
 8007146:	4b08      	ldr	r3, [pc, #32]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007148:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007156:	4a04      	ldr	r2, [pc, #16]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007158:	430b      	orrs	r3, r1
 800715a:	6713      	str	r3, [r2, #112]	; 0x70
 800715c:	e00e      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800715e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007166:	e009      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007168:	58024400 	.word	0x58024400
 800716c:	58024800 	.word	0x58024800
 8007170:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f002 0301 	and.w	r3, r2, #1
 8007188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007192:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	f000 8089 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a4:	2b28      	cmp	r3, #40	; 0x28
 80071a6:	d86b      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	08007289 	.word	0x08007289
 80071b4:	08007281 	.word	0x08007281
 80071b8:	08007281 	.word	0x08007281
 80071bc:	08007281 	.word	0x08007281
 80071c0:	08007281 	.word	0x08007281
 80071c4:	08007281 	.word	0x08007281
 80071c8:	08007281 	.word	0x08007281
 80071cc:	08007281 	.word	0x08007281
 80071d0:	08007255 	.word	0x08007255
 80071d4:	08007281 	.word	0x08007281
 80071d8:	08007281 	.word	0x08007281
 80071dc:	08007281 	.word	0x08007281
 80071e0:	08007281 	.word	0x08007281
 80071e4:	08007281 	.word	0x08007281
 80071e8:	08007281 	.word	0x08007281
 80071ec:	08007281 	.word	0x08007281
 80071f0:	0800726b 	.word	0x0800726b
 80071f4:	08007281 	.word	0x08007281
 80071f8:	08007281 	.word	0x08007281
 80071fc:	08007281 	.word	0x08007281
 8007200:	08007281 	.word	0x08007281
 8007204:	08007281 	.word	0x08007281
 8007208:	08007281 	.word	0x08007281
 800720c:	08007281 	.word	0x08007281
 8007210:	08007289 	.word	0x08007289
 8007214:	08007281 	.word	0x08007281
 8007218:	08007281 	.word	0x08007281
 800721c:	08007281 	.word	0x08007281
 8007220:	08007281 	.word	0x08007281
 8007224:	08007281 	.word	0x08007281
 8007228:	08007281 	.word	0x08007281
 800722c:	08007281 	.word	0x08007281
 8007230:	08007289 	.word	0x08007289
 8007234:	08007281 	.word	0x08007281
 8007238:	08007281 	.word	0x08007281
 800723c:	08007281 	.word	0x08007281
 8007240:	08007281 	.word	0x08007281
 8007244:	08007281 	.word	0x08007281
 8007248:	08007281 	.word	0x08007281
 800724c:	08007281 	.word	0x08007281
 8007250:	08007289 	.word	0x08007289
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	3308      	adds	r3, #8
 800725a:	2101      	movs	r1, #1
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fe95 	bl	8008f8c <RCCEx_PLL2_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007268:	e00f      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726e:	3328      	adds	r3, #40	; 0x28
 8007270:	2101      	movs	r1, #1
 8007272:	4618      	mov	r0, r3
 8007274:	f001 ff3c 	bl	80090f0 <RCCEx_PLL3_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800727e:	e004      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007286:	e000      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007292:	4bbf      	ldr	r3, [pc, #764]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a0:	4abb      	ldr	r2, [pc, #748]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072a2:	430b      	orrs	r3, r1
 80072a4:	6553      	str	r3, [r2, #84]	; 0x54
 80072a6:	e003      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f002 0302 	and.w	r3, r2, #2
 80072bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d041      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d824      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	0800732d 	.word	0x0800732d
 80072e4:	080072f9 	.word	0x080072f9
 80072e8:	0800730f 	.word	0x0800730f
 80072ec:	0800732d 	.word	0x0800732d
 80072f0:	0800732d 	.word	0x0800732d
 80072f4:	0800732d 	.word	0x0800732d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fc:	3308      	adds	r3, #8
 80072fe:	2101      	movs	r1, #1
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fe43 	bl	8008f8c <RCCEx_PLL2_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	3328      	adds	r3, #40	; 0x28
 8007314:	2101      	movs	r1, #1
 8007316:	4618      	mov	r0, r3
 8007318:	f001 feea 	bl	80090f0 <RCCEx_PLL3_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007322:	e004      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800732a:	e000      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800732c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007336:	4b96      	ldr	r3, [pc, #600]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	f023 0107 	bic.w	r1, r3, #7
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007344:	4a92      	ldr	r2, [pc, #584]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007346:	430b      	orrs	r3, r1
 8007348:	6553      	str	r3, [r2, #84]	; 0x54
 800734a:	e003      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f002 0304 	and.w	r3, r2, #4
 8007360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007364:	2300      	movs	r3, #0
 8007366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d044      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800737c:	2b05      	cmp	r3, #5
 800737e:	d825      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073d5 	.word	0x080073d5
 800738c:	080073a1 	.word	0x080073a1
 8007390:	080073b7 	.word	0x080073b7
 8007394:	080073d5 	.word	0x080073d5
 8007398:	080073d5 	.word	0x080073d5
 800739c:	080073d5 	.word	0x080073d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a4:	3308      	adds	r3, #8
 80073a6:	2101      	movs	r1, #1
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fdef 	bl	8008f8c <RCCEx_PLL2_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073b4:	e00f      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ba:	3328      	adds	r3, #40	; 0x28
 80073bc:	2101      	movs	r1, #1
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fe96 	bl	80090f0 <RCCEx_PLL3_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073ca:	e004      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80073d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073de:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	f023 0107 	bic.w	r1, r3, #7
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ee:	4a68      	ldr	r2, [pc, #416]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073f0:	430b      	orrs	r3, r1
 80073f2:	6593      	str	r3, [r2, #88]	; 0x58
 80073f4:	e003      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f002 0320 	and.w	r3, r2, #32
 800740a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800740e:	2300      	movs	r3, #0
 8007410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d055      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800742a:	d033      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800742c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007430:	d82c      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007436:	d02f      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d826      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800743e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007442:	d02b      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007448:	d820      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800744a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800744e:	d012      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007454:	d81a      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d022      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800745a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745e:	d115      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007464:	3308      	adds	r3, #8
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fd8f 	bl	8008f8c <RCCEx_PLL2_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007474:	e015      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747a:	3328      	adds	r3, #40	; 0x28
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 fe36 	bl	80090f0 <RCCEx_PLL3_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800748a:	e00a      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007492:	e006      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007494:	bf00      	nop
 8007496:	e004      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007498:	bf00      	nop
 800749a:	e002      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800749c:	bf00      	nop
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074aa:	4b39      	ldr	r3, [pc, #228]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	4a35      	ldr	r2, [pc, #212]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	6553      	str	r3, [r2, #84]	; 0x54
 80074c0:	e003      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074da:	2300      	movs	r3, #0
 80074dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4313      	orrs	r3, r2
 80074e8:	d058      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074f6:	d033      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80074f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074fc:	d82c      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d02f      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d826      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800750a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800750e:	d02b      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007514:	d820      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751a:	d012      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800751c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007520:	d81a      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d022      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d115      	bne.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007530:	3308      	adds	r3, #8
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f001 fd29 	bl	8008f8c <RCCEx_PLL2_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007540:	e015      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007546:	3328      	adds	r3, #40	; 0x28
 8007548:	2102      	movs	r1, #2
 800754a:	4618      	mov	r0, r3
 800754c:	f001 fdd0 	bl	80090f0 <RCCEx_PLL3_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007556:	e00a      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800755e:	e006      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007560:	bf00      	nop
 8007562:	e004      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007564:	bf00      	nop
 8007566:	e002      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800756c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10e      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007576:	4b06      	ldr	r3, [pc, #24]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007586:	4a02      	ldr	r2, [pc, #8]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007588:	430b      	orrs	r3, r1
 800758a:	6593      	str	r3, [r2, #88]	; 0x58
 800758c:	e006      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d055      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075c8:	d033      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80075ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075ce:	d82c      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d4:	d02f      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80075d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075da:	d826      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075e0:	d02b      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80075e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075e6:	d820      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ec:	d012      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80075ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075f2:	d81a      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d022      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d115      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	3308      	adds	r3, #8
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f001 fcc0 	bl	8008f8c <RCCEx_PLL2_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007612:	e015      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007618:	3328      	adds	r3, #40	; 0x28
 800761a:	2102      	movs	r1, #2
 800761c:	4618      	mov	r0, r3
 800761e:	f001 fd67 	bl	80090f0 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007628:	e00a      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007630:	e006      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007632:	bf00      	nop
 8007634:	e004      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007636:	bf00      	nop
 8007638:	e002      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800763e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007648:	4ba1      	ldr	r3, [pc, #644]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800764a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007658:	4a9d      	ldr	r2, [pc, #628]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6593      	str	r3, [r2, #88]	; 0x58
 800765e:	e003      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007664:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 0308 	and.w	r3, r2, #8
 8007674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800767e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	d01e      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007694:	d10c      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	3328      	adds	r3, #40	; 0x28
 800769c:	2102      	movs	r1, #2
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fd26 	bl	80090f0 <RCCEx_PLL3_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076b0:	4b87      	ldr	r3, [pc, #540]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	4a83      	ldr	r2, [pc, #524]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f002 0310 	and.w	r3, r2, #16
 80076d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d6:	2300      	movs	r3, #0
 80076d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80076e0:	460b      	mov	r3, r1
 80076e2:	4313      	orrs	r3, r2
 80076e4:	d01e      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80076e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f2:	d10c      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	3328      	adds	r3, #40	; 0x28
 80076fa:	2102      	movs	r1, #2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fcf7 	bl	80090f0 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800770e:	4b70      	ldr	r3, [pc, #448]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771e:	4a6c      	ldr	r2, [pc, #432]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007720:	430b      	orrs	r3, r1
 8007722:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800773a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d03e      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800774c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007750:	d022      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007756:	d81b      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007760:	d00b      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007762:	e015      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	3308      	adds	r3, #8
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f001 fc0d 	bl	8008f8c <RCCEx_PLL2_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007778:	e00f      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	3328      	adds	r3, #40	; 0x28
 8007780:	2102      	movs	r1, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fcb4 	bl	80090f0 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800778e:	e004      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077a2:	4b4b      	ldr	r3, [pc, #300]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077b2:	4a47      	ldr	r2, [pc, #284]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6593      	str	r3, [r2, #88]	; 0x58
 80077b8:	e003      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80077d0:	2300      	movs	r3, #0
 80077d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80077d8:	460b      	mov	r3, r1
 80077da:	4313      	orrs	r3, r2
 80077dc:	d03b      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077ea:	d01f      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80077ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f0:	d818      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80077f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f6:	d003      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80077f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077fc:	d007      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80077fe:	e011      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007800:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a32      	ldr	r2, [pc, #200]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800780c:	e00f      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	3328      	adds	r3, #40	; 0x28
 8007814:	2101      	movs	r1, #1
 8007816:	4618      	mov	r0, r3
 8007818:	f001 fc6a 	bl	80090f0 <RCCEx_PLL3_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007822:	e004      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800782a:	e000      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800782c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007836:	4b26      	ldr	r3, [pc, #152]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007846:	4a22      	ldr	r2, [pc, #136]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007848:	430b      	orrs	r3, r1
 800784a:	6553      	str	r3, [r2, #84]	; 0x54
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007862:	673b      	str	r3, [r7, #112]	; 0x70
 8007864:	2300      	movs	r3, #0
 8007866:	677b      	str	r3, [r7, #116]	; 0x74
 8007868:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800786c:	460b      	mov	r3, r1
 800786e:	4313      	orrs	r3, r2
 8007870:	d034      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800787c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007880:	d007      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007882:	e011      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007884:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800788a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007890:	e00e      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007896:	3308      	adds	r3, #8
 8007898:	2102      	movs	r1, #2
 800789a:	4618      	mov	r0, r3
 800789c:	f001 fb76 	bl	8008f8c <RCCEx_PLL2_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10d      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	4a02      	ldr	r2, [pc, #8]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078cc:	e006      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80078e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ea:	2300      	movs	r3, #0
 80078ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80078f2:	460b      	mov	r3, r1
 80078f4:	4313      	orrs	r3, r2
 80078f6:	d00c      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fc:	3328      	adds	r3, #40	; 0x28
 80078fe:	2102      	movs	r1, #2
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fbf5 	bl	80090f0 <RCCEx_PLL3_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800791e:	663b      	str	r3, [r7, #96]	; 0x60
 8007920:	2300      	movs	r3, #0
 8007922:	667b      	str	r3, [r7, #100]	; 0x64
 8007924:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007928:	460b      	mov	r3, r1
 800792a:	4313      	orrs	r3, r2
 800792c:	d038      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793a:	d018      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800793c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007940:	d811      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d014      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794c:	d80b      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007956:	d106      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007958:	4bc3      	ldr	r3, [pc, #780]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4ac2      	ldr	r2, [pc, #776]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007964:	e008      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800796c:	e004      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007980:	4bb9      	ldr	r3, [pc, #740]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007990:	4ab5      	ldr	r2, [pc, #724]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007992:	430b      	orrs	r3, r1
 8007994:	6553      	str	r3, [r2, #84]	; 0x54
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ae:	2300      	movs	r3, #0
 80079b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d009      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079bc:	4baa      	ldr	r3, [pc, #680]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	4aa7      	ldr	r2, [pc, #668]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80079dc:	653b      	str	r3, [r7, #80]	; 0x50
 80079de:	2300      	movs	r3, #0
 80079e0:	657b      	str	r3, [r7, #84]	; 0x54
 80079e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80079e6:	460b      	mov	r3, r1
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d00a      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079ec:	4b9e      	ldr	r3, [pc, #632]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079fc:	4a9a      	ldr	r2, [pc, #616]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a10:	2300      	movs	r3, #0
 8007a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a1e:	4b92      	ldr	r3, [pc, #584]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a2c:	4a8e      	ldr	r2, [pc, #568]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a40:	2300      	movs	r3, #0
 8007a42:	647b      	str	r3, [r7, #68]	; 0x44
 8007a44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a4e:	4b86      	ldr	r3, [pc, #536]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	4a85      	ldr	r2, [pc, #532]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a58:	6113      	str	r3, [r2, #16]
 8007a5a:	4b83      	ldr	r3, [pc, #524]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5c:	6919      	ldr	r1, [r3, #16]
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a66:	4a80      	ldr	r2, [pc, #512]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a88:	4b77      	ldr	r3, [pc, #476]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	4a74      	ldr	r2, [pc, #464]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	d00a      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ab8:	4b6b      	ldr	r3, [pc, #428]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac8:	4a67      	ldr	r2, [pc, #412]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aca:	430b      	orrs	r3, r1
 8007acc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ae0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	d011      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aee:	3308      	adds	r3, #8
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 fa4a 	bl	8008f8c <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	2100      	movs	r1, #0
 8007b18:	6239      	str	r1, [r7, #32]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b24:	460b      	mov	r3, r1
 8007b26:	4313      	orrs	r3, r2
 8007b28:	d011      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	3308      	adds	r3, #8
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 fa2a 	bl	8008f8c <RCCEx_PLL2_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	2100      	movs	r1, #0
 8007b58:	61b9      	str	r1, [r7, #24]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	61fb      	str	r3, [r7, #28]
 8007b60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b64:	460b      	mov	r3, r1
 8007b66:	4313      	orrs	r3, r2
 8007b68:	d011      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2102      	movs	r1, #2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fa0a 	bl	8008f8c <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	2100      	movs	r1, #0
 8007b98:	6139      	str	r1, [r7, #16]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	d011      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bae:	3328      	adds	r3, #40	; 0x28
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fa9c 	bl	80090f0 <RCCEx_PLL3_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007be4:	460b      	mov	r3, r1
 8007be6:	4313      	orrs	r3, r2
 8007be8:	d011      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bee:	3328      	adds	r3, #40	; 0x28
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fa7c 	bl	80090f0 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	2100      	movs	r1, #0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	607b      	str	r3, [r7, #4]
 8007c20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c24:	460b      	mov	r3, r1
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d011      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2e:	3328      	adds	r3, #40	; 0x28
 8007c30:	2102      	movs	r1, #2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fa5c 	bl	80090f0 <RCCEx_PLL3_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007c4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007c62:	46bd      	mov	sp, r7
 8007c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c68:	58024400 	.word	0x58024400

08007c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b090      	sub	sp, #64	; 0x40
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	f040 8094 	bne.w	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007c84:	4b9e      	ldr	r3, [pc, #632]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	f200 8087 	bhi.w	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007d9d 	.word	0x08007d9d
 8007cac:	08007d29 	.word	0x08007d29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb0:	4b93      	ldr	r3, [pc, #588]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cbc:	d108      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f810 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ccc:	f000 bd45 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd4:	f000 bd41 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd8:	4b89      	ldr	r3, [pc, #548]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce4:	d108      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fd54 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf4:	f000 bd31 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfc:	f000 bd2d 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d00:	4b7f      	ldr	r3, [pc, #508]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0c:	d108      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fe94 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1c:	f000 bd1d 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d24:	f000 bd19 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d28:	4b75      	ldr	r3, [pc, #468]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d32:	4b73      	ldr	r3, [pc, #460]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d44:	4b6e      	ldr	r3, [pc, #440]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	08db      	lsrs	r3, r3, #3
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	4a6d      	ldr	r2, [pc, #436]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d56:	e01f      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d58:	4b69      	ldr	r3, [pc, #420]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d64:	d106      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d6c:	d102      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d6e:	4b66      	ldr	r3, [pc, #408]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d74:	4b62      	ldr	r3, [pc, #392]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d80:	d106      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d88:	d102      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d8a:	4b60      	ldr	r3, [pc, #384]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8e:	e003      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d94:	f000 bce1 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d98:	f000 bcdf 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da0:	f000 bcdb 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da8:	f000 bcd7 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007db4:	430b      	orrs	r3, r1
 8007db6:	f040 80ad 	bne.w	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007dba:	4b51      	ldr	r3, [pc, #324]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dca:	d056      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	f200 8090 	bhi.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2bc0      	cmp	r3, #192	; 0xc0
 8007dda:	f000 8088 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2bc0      	cmp	r3, #192	; 0xc0
 8007de2:	f200 8088 	bhi.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b80      	cmp	r3, #128	; 0x80
 8007dea:	d032      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	f200 8081 	bhi.w	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d014      	beq.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007e00:	e079      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e02:	4b3f      	ldr	r3, [pc, #252]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e0e:	d108      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 ff67 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1e:	f000 bc9c 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e26:	f000 bc98 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e2a:	4b35      	ldr	r3, [pc, #212]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e36:	d108      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e38:	f107 0318 	add.w	r3, r7, #24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fcab 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e46:	f000 bc88 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4e:	f000 bc84 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5e:	d108      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fdeb 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6e:	f000 bc74 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e76:	f000 bc70 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e7a:	4b21      	ldr	r3, [pc, #132]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e84:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d10c      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea8:	e01f      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb6:	d106      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ebe:	d102      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec4:	e011      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec6:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed2:	d106      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eda:	d102      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee0:	e003      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ee6:	f000 bc38 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007eea:	f000 bc36 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef2:	f000 bc32 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007efa:	f000 bc2e 	b.w	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
 8007f04:	03d09000 	.word	0x03d09000
 8007f08:	003d0900 	.word	0x003d0900
 8007f0c:	017d7840 	.word	0x017d7840
 8007f10:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	f040 809c 	bne.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f22:	4b9e      	ldr	r3, [pc, #632]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007f2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f32:	d054      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f3a:	f200 808b 	bhi.w	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f44:	f000 8083 	beq.w	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f4e:	f200 8081 	bhi.w	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f58:	d02f      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f60:	d878      	bhi.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f6e:	d012      	beq.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007f70:	e070      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f72:	4b8a      	ldr	r3, [pc, #552]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f7e:	d107      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 feaf 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8e:	e3e4      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f94:	e3e1      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f96:	4b81      	ldr	r3, [pc, #516]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa2:	d107      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa4:	f107 0318 	add.w	r3, r7, #24
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fbf5 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb2:	e3d2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb8:	e3cf      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fba:	4b78      	ldr	r3, [pc, #480]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc8:	f107 030c 	add.w	r3, r7, #12
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fd37 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd6:	e3c0      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fdc:	e3bd      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fde:	4b6f      	ldr	r3, [pc, #444]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fe8:	4b6c      	ldr	r3, [pc, #432]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d10c      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ffa:	4b68      	ldr	r3, [pc, #416]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	08db      	lsrs	r3, r3, #3
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	4a66      	ldr	r2, [pc, #408]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008006:	fa22 f303 	lsr.w	r3, r2, r3
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800c:	e01e      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800800e:	4b63      	ldr	r3, [pc, #396]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801a:	d106      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800801c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008022:	d102      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008024:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	e010      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800802a:	4b5c      	ldr	r3, [pc, #368]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008036:	d106      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800803e:	d102      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008040:	4b59      	ldr	r3, [pc, #356]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008044:	e002      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800804a:	e386      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800804c:	e385      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800804e:	4b57      	ldr	r3, [pc, #348]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008052:	e382      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008058:	e37f      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800805a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008062:	430b      	orrs	r3, r1
 8008064:	f040 80a7 	bne.w	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008068:	4b4c      	ldr	r3, [pc, #304]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008070:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008078:	d055      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008080:	f200 8096 	bhi.w	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800808a:	f000 8084 	beq.w	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008094:	f200 808c 	bhi.w	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800809e:	d030      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a6:	f200 8083 	bhi.w	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080b6:	d012      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80080b8:	e07a      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ba:	4b38      	ldr	r3, [pc, #224]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c6:	d107      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fe0b 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d6:	e340      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080dc:	e33d      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080de:	4b2f      	ldr	r3, [pc, #188]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ea:	d107      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ec:	f107 0318 	add.w	r3, r7, #24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fb51 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fa:	e32e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008100:	e32b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008102:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d107      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fc93 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811e:	e31c      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008124:	e319      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800812e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b04      	cmp	r3, #4
 800813a:	d10c      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008142:	4b16      	ldr	r3, [pc, #88]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	08db      	lsrs	r3, r3, #3
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	4a14      	ldr	r2, [pc, #80]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008154:	e01e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008156:	4b11      	ldr	r3, [pc, #68]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d106      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800816a:	d102      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008170:	e010      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008172:	4b0a      	ldr	r3, [pc, #40]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800817e:	d106      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008186:	d102      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008188:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800818c:	e002      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008192:	e2e2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008194:	e2e1      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819a:	e2de      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800819c:	58024400 	.word	0x58024400
 80081a0:	03d09000 	.word	0x03d09000
 80081a4:	003d0900 	.word	0x003d0900
 80081a8:	017d7840 	.word	0x017d7840
 80081ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b4:	e2d1      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80081be:	430b      	orrs	r3, r1
 80081c0:	f040 809c 	bne.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80081c4:	4b93      	ldr	r3, [pc, #588]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081d4:	d054      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081dc:	f200 808b 	bhi.w	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081e6:	f000 8083 	beq.w	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f0:	f200 8081 	bhi.w	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	d02f      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008202:	d878      	bhi.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008210:	d012      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008212:	e070      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008214:	4b7f      	ldr	r3, [pc, #508]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800821c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008220:	d107      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fd5e 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008230:	e293      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008236:	e290      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008238:	4b76      	ldr	r3, [pc, #472]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008244:	d107      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008246:	f107 0318 	add.w	r3, r7, #24
 800824a:	4618      	mov	r0, r3
 800824c:	f000 faa4 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008254:	e281      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800825a:	e27e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800825c:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008268:	d107      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826a:	f107 030c 	add.w	r3, r7, #12
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fbe6 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008278:	e26f      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827e:	e26c      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008280:	4b64      	ldr	r3, [pc, #400]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008288:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800828a:	4b62      	ldr	r3, [pc, #392]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d10c      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	2b00      	cmp	r3, #0
 800829a:	d109      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800829c:	4b5d      	ldr	r3, [pc, #372]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	4a5c      	ldr	r2, [pc, #368]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ae:	e01e      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082b0:	4b58      	ldr	r3, [pc, #352]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082bc:	d106      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082c4:	d102      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082c6:	4b55      	ldr	r3, [pc, #340]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ca:	e010      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082cc:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d8:	d106      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e0:	d102      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082e2:	4b4f      	ldr	r3, [pc, #316]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e6:	e002      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082ec:	e235      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082ee:	e234      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082f0:	4b4c      	ldr	r3, [pc, #304]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f4:	e231      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082fa:	e22e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008300:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008304:	430b      	orrs	r3, r1
 8008306:	f040 808f 	bne.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800830a:	4b42      	ldr	r3, [pc, #264]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008312:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800831a:	d06b      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008322:	d874      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800832a:	d056      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008332:	d86c      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800833a:	d03b      	beq.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008342:	d864      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800834a:	d021      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008352:	d85c      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008360:	d004      	beq.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008362:	e054      	b.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008364:	f7fe fa0a 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8008368:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800836a:	e1f6      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800836c:	4b29      	ldr	r3, [pc, #164]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008378:	d107      	bne.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800837a:	f107 0318 	add.w	r3, r7, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fa0a 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008388:	e1e7      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838e:	e1e4      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fb4c 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ac:	e1d5      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b2:	e1d2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b4:	4b17      	ldr	r3, [pc, #92]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d109      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	08db      	lsrs	r3, r3, #3
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d2:	e1c2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e1bf      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083da:	4b0e      	ldr	r3, [pc, #56]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e6:	d102      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ec:	e1b5      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f2:	e1b2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083f4:	4b07      	ldr	r3, [pc, #28]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008400:	d102      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	e1a8      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800840c:	e1a5      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008412:	e1a2      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	017d7840 	.word	0x017d7840
 8008424:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008430:	430b      	orrs	r3, r1
 8008432:	d173      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008434:	4b9c      	ldr	r3, [pc, #624]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800843c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008444:	d02f      	beq.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800844c:	d863      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845a:	d012      	beq.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800845c:	e05b      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800845e:	4b92      	ldr	r3, [pc, #584]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800846a:	d107      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846c:	f107 0318 	add.w	r3, r7, #24
 8008470:	4618      	mov	r0, r3
 8008472:	f000 f991 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847a:	e16e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008480:	e16b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008482:	4b89      	ldr	r3, [pc, #548]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800848a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848e:	d107      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fad3 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849e:	e15c      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a4:	e159      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084a6:	4b80      	ldr	r3, [pc, #512]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084b0:	4b7d      	ldr	r3, [pc, #500]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d10c      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084c2:	4b79      	ldr	r3, [pc, #484]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	08db      	lsrs	r3, r3, #3
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	4a77      	ldr	r2, [pc, #476]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80084ce:	fa22 f303 	lsr.w	r3, r2, r3
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d4:	e01e      	b.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084d6:	4b74      	ldr	r3, [pc, #464]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e2:	d106      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ea:	d102      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084ec:	4b70      	ldr	r3, [pc, #448]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f0:	e010      	b.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084f2:	4b6d      	ldr	r3, [pc, #436]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084fe:	d106      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008506:	d102      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008508:	4b6a      	ldr	r3, [pc, #424]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850c:	e002      	b.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008512:	e122      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008514:	e121      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851a:	e11e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800851c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008520:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008524:	430b      	orrs	r3, r1
 8008526:	d133      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008528:	4b5f      	ldr	r3, [pc, #380]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800852a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008530:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800853e:	d012      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008540:	e023      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008542:	4b59      	ldr	r3, [pc, #356]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800854e:	d107      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fbc7 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855e:	e0fc      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008564:	e0f9      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008566:	4b50      	ldr	r3, [pc, #320]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008572:	d107      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008574:	f107 0318 	add.w	r3, r7, #24
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f90d 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008582:	e0ea      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008588:	e0e7      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858e:	e0e4      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008594:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008598:	430b      	orrs	r3, r1
 800859a:	f040 808d 	bne.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800859e:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ae:	d06b      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b6:	d874      	bhi.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085be:	d056      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d86c      	bhi.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085ce:	d03b      	beq.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085d6:	d864      	bhi.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085de:	d021      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e6:	d85c      	bhi.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085f4:	d004      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80085f6:	e054      	b.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085f8:	f000 f8b8 	bl	800876c <HAL_RCCEx_GetD3PCLK1Freq>
 80085fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085fe:	e0ac      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008600:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860c:	d107      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f8c0 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861c:	e09d      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008622:	e09a      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008624:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800862c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008630:	d107      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008632:	f107 030c 	add.w	r3, r7, #12
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fa02 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008640:	e08b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008646:	e088      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008648:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b04      	cmp	r3, #4
 8008652:	d109      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008654:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	08db      	lsrs	r3, r3, #3
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	4a13      	ldr	r2, [pc, #76]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e078      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866c:	e075      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800866e:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800867c:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008680:	e06b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008686:	e068      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008688:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008694:	d102      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	e05e      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a0:	e05b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a6:	e058      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086a8:	58024400 	.word	0x58024400
 80086ac:	03d09000 	.word	0x03d09000
 80086b0:	003d0900 	.word	0x003d0900
 80086b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086c0:	430b      	orrs	r3, r1
 80086c2:	d148      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086c4:	4b27      	ldr	r3, [pc, #156]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d4:	d02a      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086dc:	d838      	bhi.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ea:	d00d      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80086ec:	e030      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086ee:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fa:	d102      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008700:	e02b      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008706:	e028      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008708:	4b16      	ldr	r3, [pc, #88]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008714:	d107      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fae4 	bl	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008724:	e019      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872a:	e016      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800872c:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008738:	d107      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873a:	f107 0318 	add.w	r3, r7, #24
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f82a 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008748:	e007      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800874e:	e004      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e001      	b.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800875c:	4618      	mov	r0, r3
 800875e:	3740      	adds	r7, #64	; 0x40
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	58024400 	.word	0x58024400
 8008768:	017d7840 	.word	0x017d7840

0800876c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008770:	f7fd ffd4 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8008774:	4602      	mov	r2, r0
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	091b      	lsrs	r3, r3, #4
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	4904      	ldr	r1, [pc, #16]	; (8008794 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008782:	5ccb      	ldrb	r3, [r1, r3]
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800878c:	4618      	mov	r0, r3
 800878e:	bd80      	pop	{r7, pc}
 8008790:	58024400 	.word	0x58024400
 8008794:	0800e9f8 	.word	0x0800e9f8

08008798 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008798:	b480      	push	{r7}
 800879a:	b089      	sub	sp, #36	; 0x24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a0:	4ba1      	ldr	r3, [pc, #644]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087aa:	4b9f      	ldr	r3, [pc, #636]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	0b1b      	lsrs	r3, r3, #12
 80087b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087b6:	4b9c      	ldr	r3, [pc, #624]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	091b      	lsrs	r3, r3, #4
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087c2:	4b99      	ldr	r3, [pc, #612]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	08db      	lsrs	r3, r3, #3
 80087c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	fb02 f303 	mul.w	r3, r2, r3
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8111 	beq.w	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	f000 8083 	beq.w	80088f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	f200 80a1 	bhi.w	8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d056      	beq.n	80088b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008802:	e099      	b.n	8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008804:	4b88      	ldr	r3, [pc, #544]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02d      	beq.n	800886c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008810:	4b85      	ldr	r3, [pc, #532]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	4a84      	ldr	r2, [pc, #528]	; (8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883a:	4b7b      	ldr	r3, [pc, #492]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884a:	ed97 6a03 	vldr	s12, [r7, #12]
 800884e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008866:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800886a:	e087      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800887a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887e:	4b6a      	ldr	r3, [pc, #424]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008892:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ae:	e065      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c2:	4b59      	ldr	r3, [pc, #356]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f2:	e043      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008906:	4b48      	ldr	r3, [pc, #288]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008916:	ed97 6a03 	vldr	s12, [r7, #12]
 800891a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800891e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008936:	e021      	b.n	800897c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894a:	4b37      	ldr	r3, [pc, #220]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a03 	vldr	s12, [r7, #12]
 800895e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800897c:	4b2a      	ldr	r3, [pc, #168]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	0a5b      	lsrs	r3, r3, #9
 8008982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008996:	edd7 6a07 	vldr	s13, [r7, #28]
 800899a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a2:	ee17 2a90 	vmov	r2, s15
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089aa:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d0:	ee17 2a90 	vmov	r2, s15
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089d8:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	0e1b      	lsrs	r3, r3, #24
 80089de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fe:	ee17 2a90 	vmov	r2, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a06:	e008      	b.n	8008a1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
}
 8008a1a:	bf00      	nop
 8008a1c:	3724      	adds	r7, #36	; 0x24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	03d09000 	.word	0x03d09000
 8008a30:	46000000 	.word	0x46000000
 8008a34:	4c742400 	.word	0x4c742400
 8008a38:	4a742400 	.word	0x4a742400
 8008a3c:	4bbebc20 	.word	0x4bbebc20

08008a40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b089      	sub	sp, #36	; 0x24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a48:	4ba1      	ldr	r3, [pc, #644]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a52:	4b9f      	ldr	r3, [pc, #636]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	0d1b      	lsrs	r3, r3, #20
 8008a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a5e:	4b9c      	ldr	r3, [pc, #624]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a6a:	4b99      	ldr	r3, [pc, #612]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	08db      	lsrs	r3, r3, #3
 8008a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 8111 	beq.w	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	f000 8083 	beq.w	8008b9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	f200 80a1 	bhi.w	8008be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d056      	beq.n	8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008aaa:	e099      	b.n	8008be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aac:	4b88      	ldr	r3, [pc, #544]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d02d      	beq.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab8:	4b85      	ldr	r3, [pc, #532]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	08db      	lsrs	r3, r3, #3
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	4a84      	ldr	r2, [pc, #528]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae2:	4b7b      	ldr	r3, [pc, #492]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b12:	e087      	b.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b26:	4b6a      	ldr	r3, [pc, #424]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b56:	e065      	b.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6a:	4b59      	ldr	r3, [pc, #356]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9a:	e043      	b.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bae:	4b48      	ldr	r3, [pc, #288]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bde:	e021      	b.n	8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf2:	4b37      	ldr	r3, [pc, #220]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c24:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c28:	0a5b      	lsrs	r3, r3, #9
 8008c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4a:	ee17 2a90 	vmov	r2, s15
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c52:	4b1f      	ldr	r3, [pc, #124]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c78:	ee17 2a90 	vmov	r2, s15
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c80:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	0e1b      	lsrs	r3, r3, #24
 8008c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca6:	ee17 2a90 	vmov	r2, s15
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cae:	e008      	b.n	8008cc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	609a      	str	r2, [r3, #8]
}
 8008cc2:	bf00      	nop
 8008cc4:	3724      	adds	r7, #36	; 0x24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	03d09000 	.word	0x03d09000
 8008cd8:	46000000 	.word	0x46000000
 8008cdc:	4c742400 	.word	0x4c742400
 8008ce0:	4a742400 	.word	0x4a742400
 8008ce4:	4bbebc20 	.word	0x4bbebc20

08008ce8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b089      	sub	sp, #36	; 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cf0:	4ba0      	ldr	r3, [pc, #640]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cfa:	4b9e      	ldr	r3, [pc, #632]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	091b      	lsrs	r3, r3, #4
 8008d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d06:	4b9b      	ldr	r3, [pc, #620]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d10:	4b98      	ldr	r3, [pc, #608]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d14:	08db      	lsrs	r3, r3, #3
 8008d16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	fb02 f303 	mul.w	r3, r2, r3
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8111 	beq.w	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	f000 8083 	beq.w	8008e42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	f200 80a1 	bhi.w	8008e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d056      	beq.n	8008dfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d50:	e099      	b.n	8008e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d52:	4b88      	ldr	r3, [pc, #544]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d02d      	beq.n	8008dba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d5e:	4b85      	ldr	r3, [pc, #532]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	08db      	lsrs	r3, r3, #3
 8008d64:	f003 0303 	and.w	r3, r3, #3
 8008d68:	4a83      	ldr	r2, [pc, #524]	; (8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d88:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d90:	ee07 3a90 	vmov	s15, r3
 8008d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008db8:	e087      	b.n	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dcc:	4b69      	ldr	r3, [pc, #420]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd4:	ee07 3a90 	vmov	s15, r3
 8008dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ddc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfc:	e065      	b.n	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	ee07 3a90 	vmov	s15, r3
 8008e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e10:	4b58      	ldr	r3, [pc, #352]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e20:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e40:	e043      	b.n	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e54:	4b47      	ldr	r3, [pc, #284]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5c:	ee07 3a90 	vmov	s15, r3
 8008e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e84:	e021      	b.n	8008eca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e98:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008eca:	4b2a      	ldr	r3, [pc, #168]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	0a5b      	lsrs	r3, r3, #9
 8008ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef0:	ee17 2a90 	vmov	r2, s15
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	0c1b      	lsrs	r3, r3, #16
 8008efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1e:	ee17 2a90 	vmov	r2, s15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f26:	4b13      	ldr	r3, [pc, #76]	; (8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2a:	0e1b      	lsrs	r3, r3, #24
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f54:	e008      	b.n	8008f68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	609a      	str	r2, [r3, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	3724      	adds	r7, #36	; 0x24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	58024400 	.word	0x58024400
 8008f78:	03d09000 	.word	0x03d09000
 8008f7c:	46000000 	.word	0x46000000
 8008f80:	4c742400 	.word	0x4c742400
 8008f84:	4a742400 	.word	0x4a742400
 8008f88:	4bbebc20 	.word	0x4bbebc20

08008f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f9a:	4b53      	ldr	r3, [pc, #332]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d101      	bne.n	8008faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e099      	b.n	80090de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008faa:	4b4f      	ldr	r3, [pc, #316]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a4e      	ldr	r2, [pc, #312]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb6:	f7f9 fb8d 	bl	80026d4 <HAL_GetTick>
 8008fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fbc:	e008      	b.n	8008fd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fbe:	f7f9 fb89 	bl	80026d4 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e086      	b.n	80090de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fd0:	4b45      	ldr	r3, [pc, #276]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f0      	bne.n	8008fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fdc:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	031b      	lsls	r3, r3, #12
 8008fea:	493f      	ldr	r1, [pc, #252]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	628b      	str	r3, [r1, #40]	; 0x28
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	025b      	lsls	r3, r3, #9
 8009002:	b29b      	uxth	r3, r3
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	3b01      	subs	r3, #1
 800900c:	041b      	lsls	r3, r3, #16
 800900e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	3b01      	subs	r3, #1
 800901a:	061b      	lsls	r3, r3, #24
 800901c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009020:	4931      	ldr	r1, [pc, #196]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009026:	4b30      	ldr	r3, [pc, #192]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	492d      	ldr	r1, [pc, #180]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009034:	4313      	orrs	r3, r2
 8009036:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009038:	4b2b      	ldr	r3, [pc, #172]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	f023 0220 	bic.w	r2, r3, #32
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	4928      	ldr	r1, [pc, #160]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009046:	4313      	orrs	r3, r2
 8009048:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800904a:	4b27      	ldr	r3, [pc, #156]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	4a26      	ldr	r2, [pc, #152]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009050:	f023 0310 	bic.w	r3, r3, #16
 8009054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <RCCEx_PLL2_Config+0x160>)
 800905c:	4013      	ands	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	69d2      	ldr	r2, [r2, #28]
 8009062:	00d2      	lsls	r2, r2, #3
 8009064:	4920      	ldr	r1, [pc, #128]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009066:	4313      	orrs	r3, r2
 8009068:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800906a:	4b1f      	ldr	r3, [pc, #124]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	4a1e      	ldr	r2, [pc, #120]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009070:	f043 0310 	orr.w	r3, r3, #16
 8009074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800907c:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009088:	e00f      	b.n	80090aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d106      	bne.n	800909e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009090:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 8009096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800909a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800909c:	e005      	b.n	80090aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800909e:	4b12      	ldr	r3, [pc, #72]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	4a11      	ldr	r2, [pc, #68]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090aa:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a0e      	ldr	r2, [pc, #56]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b6:	f7f9 fb0d 	bl	80026d4 <HAL_GetTick>
 80090ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090bc:	e008      	b.n	80090d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090be:	f7f9 fb09 	bl	80026d4 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d901      	bls.n	80090d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e006      	b.n	80090de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <RCCEx_PLL2_Config+0x15c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0f0      	beq.n	80090be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	58024400 	.word	0x58024400
 80090ec:	ffff0007 	.word	0xffff0007

080090f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090fe:	4b53      	ldr	r3, [pc, #332]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b03      	cmp	r3, #3
 8009108:	d101      	bne.n	800910e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e099      	b.n	8009242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800910e:	4b4f      	ldr	r3, [pc, #316]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a4e      	ldr	r2, [pc, #312]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911a:	f7f9 fadb 	bl	80026d4 <HAL_GetTick>
 800911e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009120:	e008      	b.n	8009134 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009122:	f7f9 fad7 	bl	80026d4 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	d901      	bls.n	8009134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e086      	b.n	8009242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009134:	4b45      	ldr	r3, [pc, #276]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f0      	bne.n	8009122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009140:	4b42      	ldr	r3, [pc, #264]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	051b      	lsls	r3, r3, #20
 800914e:	493f      	ldr	r1, [pc, #252]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009150:	4313      	orrs	r3, r2
 8009152:	628b      	str	r3, [r1, #40]	; 0x28
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	3b01      	subs	r3, #1
 800915a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	025b      	lsls	r3, r3, #9
 8009166:	b29b      	uxth	r3, r3
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	3b01      	subs	r3, #1
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009176:	431a      	orrs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	3b01      	subs	r3, #1
 800917e:	061b      	lsls	r3, r3, #24
 8009180:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009184:	4931      	ldr	r1, [pc, #196]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009186:	4313      	orrs	r3, r2
 8009188:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800918a:	4b30      	ldr	r3, [pc, #192]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	492d      	ldr	r1, [pc, #180]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009198:	4313      	orrs	r3, r2
 800919a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800919c:	4b2b      	ldr	r3, [pc, #172]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	4928      	ldr	r1, [pc, #160]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091ae:	4b27      	ldr	r3, [pc, #156]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	4a26      	ldr	r2, [pc, #152]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091be:	4b24      	ldr	r3, [pc, #144]	; (8009250 <RCCEx_PLL3_Config+0x160>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	69d2      	ldr	r2, [r2, #28]
 80091c6:	00d2      	lsls	r2, r2, #3
 80091c8:	4920      	ldr	r1, [pc, #128]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091ce:	4b1f      	ldr	r3, [pc, #124]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	4a1e      	ldr	r2, [pc, #120]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091e0:	4b1a      	ldr	r3, [pc, #104]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4a19      	ldr	r2, [pc, #100]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80091ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091ec:	e00f      	b.n	800920e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d106      	bne.n	8009202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	4a14      	ldr	r2, [pc, #80]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 80091fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009200:	e005      	b.n	800920e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009202:	4b12      	ldr	r3, [pc, #72]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	4a11      	ldr	r2, [pc, #68]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800920c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a0e      	ldr	r2, [pc, #56]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800921a:	f7f9 fa5b 	bl	80026d4 <HAL_GetTick>
 800921e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009220:	e008      	b.n	8009234 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009222:	f7f9 fa57 	bl	80026d4 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <RCCEx_PLL3_Config+0x15c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	ffff0007 	.word	0xffff0007

08009254 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d071      	beq.n	800934a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 fcec 	bl	8001c58 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b10      	cmp	r3, #16
 8009294:	d050      	beq.n	8009338 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	22ca      	movs	r2, #202	; 0xca
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2253      	movs	r2, #83	; 0x53
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f87a 	bl	80093a0 <RTC_EnterInitMode>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d124      	bne.n	8009300 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6899      	ldr	r1, [r3, #8]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	4b24      	ldr	r3, [pc, #144]	; (8009354 <HAL_RTC_Init+0x100>)
 80092c2:	400b      	ands	r3, r1
 80092c4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6899      	ldr	r1, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	0419      	lsls	r1, r3, #16
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f886 	bl	8009408 <RTC_ExitInitMode>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d113      	bne.n	800932e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0203 	bic.w	r2, r2, #3
 8009314:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	22ff      	movs	r2, #255	; 0xff
 8009334:	625a      	str	r2, [r3, #36]	; 0x24
 8009336:	e001      	b.n	800933c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	ff8fffbf 	.word	0xff8fffbf

08009358 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a0d      	ldr	r2, [pc, #52]	; (800939c <HAL_RTC_WaitForSynchro+0x44>)
 8009366:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009368:	f7f9 f9b4 	bl	80026d4 <HAL_GetTick>
 800936c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800936e:	e009      	b.n	8009384 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009370:	f7f9 f9b0 	bl	80026d4 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937e:	d901      	bls.n	8009384 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e007      	b.n	8009394 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0ee      	beq.n	8009370 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	0003ff5f 	.word	0x0003ff5f

080093a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d120      	bne.n	80093fc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80093c4:	f7f9 f986 	bl	80026d4 <HAL_GetTick>
 80093c8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093ca:	e00d      	b.n	80093e8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093cc:	f7f9 f982 	bl	80026d4 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093da:	d905      	bls.n	80093e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2203      	movs	r2, #3
 80093e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <RTC_EnterInitMode+0x5c>
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d1e7      	bne.n	80093cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <RTC_ExitInitMode+0x78>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	4a19      	ldr	r2, [pc, #100]	; (8009480 <RTC_ExitInitMode+0x78>)
 800941a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009420:	4b17      	ldr	r3, [pc, #92]	; (8009480 <RTC_ExitInitMode+0x78>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10c      	bne.n	8009446 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff93 	bl	8009358 <HAL_RTC_WaitForSynchro>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01e      	beq.n	8009476 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2203      	movs	r2, #3
 800943c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	73fb      	strb	r3, [r7, #15]
 8009444:	e017      	b.n	8009476 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009446:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <RTC_ExitInitMode+0x78>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <RTC_ExitInitMode+0x78>)
 800944c:	f023 0320 	bic.w	r3, r3, #32
 8009450:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff80 	bl	8009358 <HAL_RTC_WaitForSynchro>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2203      	movs	r2, #3
 8009462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <RTC_ExitInitMode+0x78>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	4a04      	ldr	r2, [pc, #16]	; (8009480 <RTC_ExitInitMode+0x78>)
 8009470:	f043 0320 	orr.w	r3, r3, #32
 8009474:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	58004000 	.word	0x58004000

08009484 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e28e      	b.n	80099b4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009496:	f7f9 f94d 	bl	8002734 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d113      	bne.n	80094cc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a96      	ldr	r2, [pc, #600]	; (8009704 <HAL_SAI_Init+0x280>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <HAL_SAI_Init+0x34>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a95      	ldr	r2, [pc, #596]	; (8009708 <HAL_SAI_Init+0x284>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d107      	bne.n	80094c8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d103      	bne.n	80094c8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e273      	b.n	80099b4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a8c      	ldr	r2, [pc, #560]	; (8009704 <HAL_SAI_Init+0x280>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_SAI_Init+0x5c>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a8c      	ldr	r2, [pc, #560]	; (800970c <HAL_SAI_Init+0x288>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d102      	bne.n	80094e6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80094e0:	4b8b      	ldr	r3, [pc, #556]	; (8009710 <HAL_SAI_Init+0x28c>)
 80094e2:	61bb      	str	r3, [r7, #24]
 80094e4:	e028      	b.n	8009538 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a8a      	ldr	r2, [pc, #552]	; (8009714 <HAL_SAI_Init+0x290>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_SAI_Init+0x76>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a88      	ldr	r2, [pc, #544]	; (8009718 <HAL_SAI_Init+0x294>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d102      	bne.n	8009500 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80094fa:	4b88      	ldr	r3, [pc, #544]	; (800971c <HAL_SAI_Init+0x298>)
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	e01b      	b.n	8009538 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a86      	ldr	r2, [pc, #536]	; (8009720 <HAL_SAI_Init+0x29c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <HAL_SAI_Init+0x90>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a85      	ldr	r2, [pc, #532]	; (8009724 <HAL_SAI_Init+0x2a0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d102      	bne.n	800951a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009514:	4b84      	ldr	r3, [pc, #528]	; (8009728 <HAL_SAI_Init+0x2a4>)
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e00e      	b.n	8009538 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a7a      	ldr	r2, [pc, #488]	; (8009708 <HAL_SAI_Init+0x284>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d004      	beq.n	800952e <HAL_SAI_Init+0xaa>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a80      	ldr	r2, [pc, #512]	; (800972c <HAL_SAI_Init+0x2a8>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d102      	bne.n	8009534 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800952e:	4b80      	ldr	r3, [pc, #512]	; (8009730 <HAL_SAI_Init+0x2ac>)
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	e001      	b.n	8009538 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e23d      	b.n	80099b4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7f8 fe85 	bl	800225c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa40 	bl	80099d8 <SAI_Disable>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e228      	b.n	80099b4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d00c      	beq.n	800958c <HAL_SAI_Init+0x108>
 8009572:	2b02      	cmp	r3, #2
 8009574:	d80d      	bhi.n	8009592 <HAL_SAI_Init+0x10e>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_SAI_Init+0xfc>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d003      	beq.n	8009586 <HAL_SAI_Init+0x102>
 800957e:	e008      	b.n	8009592 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009584:	e008      	b.n	8009598 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009586:	2310      	movs	r3, #16
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800958a:	e005      	b.n	8009598 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800958c:	2320      	movs	r3, #32
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009590:	e002      	b.n	8009598 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009596:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2b05      	cmp	r3, #5
 800959e:	d832      	bhi.n	8009606 <HAL_SAI_Init+0x182>
 80095a0:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <HAL_SAI_Init+0x124>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095c1 	.word	0x080095c1
 80095ac:	080095c7 	.word	0x080095c7
 80095b0:	080095cf 	.word	0x080095cf
 80095b4:	080095d7 	.word	0x080095d7
 80095b8:	080095e7 	.word	0x080095e7
 80095bc:	080095f7 	.word	0x080095f7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61fb      	str	r3, [r7, #28]
      break;
 80095c4:	e022      	b.n	800960c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80095c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ca:	61fb      	str	r3, [r7, #28]
      break;
 80095cc:	e01e      	b.n	800960c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095d2:	61fb      	str	r3, [r7, #28]
      break;
 80095d4:	e01a      	b.n	800960c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095da:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80095e4:	e012      	b.n	800960c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	f043 0302 	orr.w	r3, r3, #2
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80095f4:	e00a      	b.n	800960c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095fa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	f043 0303 	orr.w	r3, r3, #3
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009604:	e002      	b.n	800960c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
      break;
 800960a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009610:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80c5 	beq.w	80097a6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a37      	ldr	r2, [pc, #220]	; (8009704 <HAL_SAI_Init+0x280>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d004      	beq.n	8009634 <HAL_SAI_Init+0x1b0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a37      	ldr	r2, [pc, #220]	; (800970c <HAL_SAI_Init+0x288>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d106      	bne.n	8009642 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009634:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	f7fe fb16 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8009640:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a33      	ldr	r2, [pc, #204]	; (8009714 <HAL_SAI_Init+0x290>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d004      	beq.n	8009656 <HAL_SAI_Init+0x1d2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a31      	ldr	r2, [pc, #196]	; (8009718 <HAL_SAI_Init+0x294>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d106      	bne.n	8009664 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009656:	f44f 7000 	mov.w	r0, #512	; 0x200
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	f7fe fb05 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8009662:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a2d      	ldr	r2, [pc, #180]	; (8009720 <HAL_SAI_Init+0x29c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d004      	beq.n	8009678 <HAL_SAI_Init+0x1f4>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a2c      	ldr	r2, [pc, #176]	; (8009724 <HAL_SAI_Init+0x2a0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d106      	bne.n	8009686 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800967c:	f04f 0100 	mov.w	r1, #0
 8009680:	f7fe faf4 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8009684:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a1f      	ldr	r2, [pc, #124]	; (8009708 <HAL_SAI_Init+0x284>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d106      	bne.n	800969e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009690:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009694:	f04f 0100 	mov.w	r1, #0
 8009698:	f7fe fae8 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 800969c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a22      	ldr	r2, [pc, #136]	; (800972c <HAL_SAI_Init+0x2a8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d106      	bne.n	80096b6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80096a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80096ac:	f04f 0100 	mov.w	r1, #0
 80096b0:	f7fe fadc 	bl	8007c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80096b4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096be:	d139      	bne.n	8009734 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d102      	bne.n	80096ce <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e00a      	b.n	80096e4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	2b08      	cmp	r3, #8
 80096d4:	d103      	bne.n	80096de <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80096d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e002      	b.n	80096e4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	4619      	mov	r1, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	fb02 f303 	mul.w	r3, r2, r3
 80096fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80096fe:	613b      	str	r3, [r7, #16]
 8009700:	e030      	b.n	8009764 <HAL_SAI_Init+0x2e0>
 8009702:	bf00      	nop
 8009704:	40015804 	.word	0x40015804
 8009708:	58005404 	.word	0x58005404
 800970c:	40015824 	.word	0x40015824
 8009710:	40015800 	.word	0x40015800
 8009714:	40015c04 	.word	0x40015c04
 8009718:	40015c24 	.word	0x40015c24
 800971c:	40015c00 	.word	0x40015c00
 8009720:	40016004 	.word	0x40016004
 8009724:	40016024 	.word	0x40016024
 8009728:	40016000 	.word	0x40016000
 800972c:	58005424 	.word	0x58005424
 8009730:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800973c:	d101      	bne.n	8009742 <HAL_SAI_Init+0x2be>
 800973e:	2302      	movs	r3, #2
 8009740:	e000      	b.n	8009744 <HAL_SAI_Init+0x2c0>
 8009742:	2301      	movs	r3, #1
 8009744:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4619      	mov	r1, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	fb02 f303 	mul.w	r3, r2, r3
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009762:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4a95      	ldr	r2, [pc, #596]	; (80099bc <HAL_SAI_Init+0x538>)
 8009768:	fba2 2303 	umull	r2, r3, r2, r3
 800976c:	08da      	lsrs	r2, r3, #3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009772:	6939      	ldr	r1, [r7, #16]
 8009774:	4b91      	ldr	r3, [pc, #580]	; (80099bc <HAL_SAI_Init+0x538>)
 8009776:	fba3 2301 	umull	r2, r3, r3, r1
 800977a:	08da      	lsrs	r2, r3, #3
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	1aca      	subs	r2, r1, r3
 8009786:	2a08      	cmp	r2, #8
 8009788:	d904      	bls.n	8009794 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009798:	2b04      	cmp	r3, #4
 800979a:	d104      	bne.n	80097a6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	085a      	lsrs	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_SAI_Init+0x332>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d109      	bne.n	80097ca <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d101      	bne.n	80097c2 <HAL_SAI_Init+0x33e>
 80097be:	2300      	movs	r3, #0
 80097c0:	e001      	b.n	80097c6 <HAL_SAI_Init+0x342>
 80097c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e008      	b.n	80097dc <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d102      	bne.n	80097d8 <HAL_SAI_Init+0x354>
 80097d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097d6:	e000      	b.n	80097da <HAL_SAI_Init+0x356>
 80097d8:	2300      	movs	r3, #0
 80097da:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80097dc:	f7f8 ffaa 	bl	8002734 <HAL_GetREVID>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e6:	d331      	bcc.n	800984c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6819      	ldr	r1, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b73      	ldr	r3, [pc, #460]	; (80099c0 <HAL_SAI_Init+0x53c>)
 80097f4:	400b      	ands	r3, r1
 80097f6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6819      	ldr	r1, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009806:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800980c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009812:	431a      	orrs	r2, r3
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009820:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800982c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	051b      	lsls	r3, r3, #20
 8009834:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800983a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e02d      	b.n	80098a8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4b5b      	ldr	r3, [pc, #364]	; (80099c4 <HAL_SAI_Init+0x540>)
 8009858:	400b      	ands	r3, r1
 800985a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6819      	ldr	r1, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009870:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009876:	431a      	orrs	r2, r3
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009884:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009890:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	051b      	lsls	r3, r3, #20
 8009898:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800989e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6859      	ldr	r1, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b45      	ldr	r3, [pc, #276]	; (80099c8 <HAL_SAI_Init+0x544>)
 80098b4:	400b      	ands	r3, r1
 80098b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6859      	ldr	r1, [r3, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69da      	ldr	r2, [r3, #28]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6899      	ldr	r1, [r3, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4b3a      	ldr	r3, [pc, #232]	; (80099cc <HAL_SAI_Init+0x548>)
 80098e2:	400b      	ands	r3, r1
 80098e4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6899      	ldr	r1, [r3, #8]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80098f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80098fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009902:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009908:	3b01      	subs	r3, #1
 800990a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800990c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68d9      	ldr	r1, [r3, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009924:	400b      	ands	r3, r1
 8009926:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68d9      	ldr	r1, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009936:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800993c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800993e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009944:	3b01      	subs	r3, #1
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <HAL_SAI_Init+0x54c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d004      	beq.n	8009966 <HAL_SAI_Init+0x4e2>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <HAL_SAI_Init+0x550>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d119      	bne.n	800999a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	f023 0201 	bic.w	r2, r3, #1
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009978:	2b01      	cmp	r3, #1
 800997a:	d10e      	bne.n	800999a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009984:	3b01      	subs	r3, #1
 8009986:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009988:	431a      	orrs	r2, r3
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009992:	f043 0201 	orr.w	r2, r3, #1
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3728      	adds	r7, #40	; 0x28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	cccccccd 	.word	0xcccccccd
 80099c0:	f005c010 	.word	0xf005c010
 80099c4:	f805c010 	.word	0xf805c010
 80099c8:	ffff1ff0 	.word	0xffff1ff0
 80099cc:	fff88000 	.word	0xfff88000
 80099d0:	40015804 	.word	0x40015804
 80099d4:	58005404 	.word	0x58005404

080099d8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80099e0:	4b18      	ldr	r3, [pc, #96]	; (8009a44 <SAI_Disable+0x6c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <SAI_Disable+0x70>)
 80099e6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ea:	0b1b      	lsrs	r3, r3, #12
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a02:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a1e:	e009      	b.n	8009a34 <SAI_Disable+0x5c>
    }
    count--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e7      	bne.n	8009a04 <SAI_Disable+0x2c>

  return status;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	24000000 	.word	0x24000000
 8009a48:	95cbec1b 	.word	0x95cbec1b

08009a4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e02b      	b.n	8009ab8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7f8 fbe7 	bl	8002248 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f001 fd47 	bl	800b520 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	f001 fd9b 	bl	800b5d8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009aa2:	4b07      	ldr	r3, [pc, #28]	; (8009ac0 <HAL_SDRAM_Init+0x74>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a06      	ldr	r2, [pc, #24]	; (8009ac0 <HAL_SDRAM_Init+0x74>)
 8009aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009aac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	52004000 	.word	0x52004000

08009ac4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e03e      	b.n	8009b58 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7f8 fba0 	bl	8002234 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3308      	adds	r3, #8
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f001 fbe0 	bl	800b2c4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	f001 fc68 	bl	800b3e4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6858      	ldr	r0, [r3, #4]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	f001 fcaf 	bl	800b484 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	6892      	ldr	r2, [r2, #8]
 8009b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	6892      	ldr	r2, [r2, #8]
 8009b3a:	f041 0101 	orr.w	r1, r1, #1
 8009b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <HAL_SRAM_Init+0x9c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a06      	ldr	r2, [pc, #24]	; (8009b60 <HAL_SRAM_Init+0x9c>)
 8009b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b4c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	52004000 	.word	0x52004000

08009b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e049      	b.n	8009c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f841 	bl	8009c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f000 fa00 	bl	8009fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d001      	beq.n	8009c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e054      	b.n	8009cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0201 	orr.w	r2, r2, #1
 8009c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a26      	ldr	r2, [pc, #152]	; (8009cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d022      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6a:	d01d      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d018      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a1f      	ldr	r2, [pc, #124]	; (8009d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00e      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a1e      	ldr	r2, [pc, #120]	; (8009d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d009      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1b      	ldr	r2, [pc, #108]	; (8009d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d115      	bne.n	8009cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	4b19      	ldr	r3, [pc, #100]	; (8009d14 <HAL_TIM_Base_Start_IT+0xec>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b06      	cmp	r3, #6
 8009cb8:	d015      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc0:	d011      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0201 	orr.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd2:	e008      	b.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e000      	b.n	8009ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800
 8009d04:	40000c00 	.word	0x40000c00
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	40001800 	.word	0x40001800
 8009d10:	40014000 	.word	0x40014000
 8009d14:	00010007 	.word	0x00010007

08009d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d122      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d11b      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0202 	mvn.w	r2, #2
 8009d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f905 	bl	8009f6a <HAL_TIM_IC_CaptureCallback>
 8009d60:	e005      	b.n	8009d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f8f7 	bl	8009f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f908 	bl	8009f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d122      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d11b      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0204 	mvn.w	r2, #4
 8009d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8db 	bl	8009f6a <HAL_TIM_IC_CaptureCallback>
 8009db4:	e005      	b.n	8009dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8cd 	bl	8009f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f8de 	bl	8009f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	f003 0308 	and.w	r3, r3, #8
 8009dd2:	2b08      	cmp	r3, #8
 8009dd4:	d122      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f003 0308 	and.w	r3, r3, #8
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d11b      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f06f 0208 	mvn.w	r2, #8
 8009dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2204      	movs	r2, #4
 8009df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f8b1 	bl	8009f6a <HAL_TIM_IC_CaptureCallback>
 8009e08:	e005      	b.n	8009e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f8a3 	bl	8009f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8b4 	bl	8009f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0310 	and.w	r3, r3, #16
 8009e26:	2b10      	cmp	r3, #16
 8009e28:	d122      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0310 	and.w	r3, r3, #16
 8009e34:	2b10      	cmp	r3, #16
 8009e36:	d11b      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0210 	mvn.w	r2, #16
 8009e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2208      	movs	r2, #8
 8009e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f887 	bl	8009f6a <HAL_TIM_IC_CaptureCallback>
 8009e5c:	e005      	b.n	8009e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f879 	bl	8009f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f88a 	bl	8009f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d10e      	bne.n	8009e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d107      	bne.n	8009e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0201 	mvn.w	r2, #1
 8009e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7f7 fad8 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea6:	2b80      	cmp	r3, #128	; 0x80
 8009ea8:	d10e      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb4:	2b80      	cmp	r3, #128	; 0x80
 8009eb6:	d107      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f914 	bl	800a0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed6:	d10e      	bne.n	8009ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d107      	bne.n	8009ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f907 	bl	800a104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f00:	2b40      	cmp	r3, #64	; 0x40
 8009f02:	d10e      	bne.n	8009f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d107      	bne.n	8009f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f838 	bl	8009f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d10e      	bne.n	8009f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f003 0320 	and.w	r3, r3, #32
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	d107      	bne.n	8009f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f06f 0220 	mvn.w	r2, #32
 8009f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f8c7 	bl	800a0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f5e:	bf00      	nop
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f72:	bf00      	nop
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f9a:	bf00      	nop
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a40      	ldr	r2, [pc, #256]	; (800a0bc <TIM_Base_SetConfig+0x114>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d013      	beq.n	8009fe8 <TIM_Base_SetConfig+0x40>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d00f      	beq.n	8009fe8 <TIM_Base_SetConfig+0x40>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a3d      	ldr	r2, [pc, #244]	; (800a0c0 <TIM_Base_SetConfig+0x118>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d00b      	beq.n	8009fe8 <TIM_Base_SetConfig+0x40>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a3c      	ldr	r2, [pc, #240]	; (800a0c4 <TIM_Base_SetConfig+0x11c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d007      	beq.n	8009fe8 <TIM_Base_SetConfig+0x40>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a3b      	ldr	r2, [pc, #236]	; (800a0c8 <TIM_Base_SetConfig+0x120>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d003      	beq.n	8009fe8 <TIM_Base_SetConfig+0x40>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a3a      	ldr	r2, [pc, #232]	; (800a0cc <TIM_Base_SetConfig+0x124>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d108      	bne.n	8009ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a2f      	ldr	r2, [pc, #188]	; (800a0bc <TIM_Base_SetConfig+0x114>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d01f      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a008:	d01b      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a2c      	ldr	r2, [pc, #176]	; (800a0c0 <TIM_Base_SetConfig+0x118>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d017      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a2b      	ldr	r2, [pc, #172]	; (800a0c4 <TIM_Base_SetConfig+0x11c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d013      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a2a      	ldr	r2, [pc, #168]	; (800a0c8 <TIM_Base_SetConfig+0x120>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00f      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a29      	ldr	r2, [pc, #164]	; (800a0cc <TIM_Base_SetConfig+0x124>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d00b      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a28      	ldr	r2, [pc, #160]	; (800a0d0 <TIM_Base_SetConfig+0x128>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d007      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <TIM_Base_SetConfig+0x12c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_Base_SetConfig+0x9a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a26      	ldr	r2, [pc, #152]	; (800a0d8 <TIM_Base_SetConfig+0x130>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d108      	bne.n	800a054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4313      	orrs	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a10      	ldr	r2, [pc, #64]	; (800a0bc <TIM_Base_SetConfig+0x114>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00f      	beq.n	800a0a0 <TIM_Base_SetConfig+0xf8>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a12      	ldr	r2, [pc, #72]	; (800a0cc <TIM_Base_SetConfig+0x124>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d00b      	beq.n	800a0a0 <TIM_Base_SetConfig+0xf8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a11      	ldr	r2, [pc, #68]	; (800a0d0 <TIM_Base_SetConfig+0x128>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d007      	beq.n	800a0a0 <TIM_Base_SetConfig+0xf8>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <TIM_Base_SetConfig+0x12c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d003      	beq.n	800a0a0 <TIM_Base_SetConfig+0xf8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a0f      	ldr	r2, [pc, #60]	; (800a0d8 <TIM_Base_SetConfig+0x130>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d103      	bne.n	800a0a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	691a      	ldr	r2, [r3, #16]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	615a      	str	r2, [r3, #20]
}
 800a0ae:	bf00      	nop
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40010400 	.word	0x40010400
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	40014400 	.word	0x40014400
 800a0d8:	40014800 	.word	0x40014800

0800a0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e042      	b.n	800a1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7f7 fdbd 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2224      	movs	r2, #36	; 0x24
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f82c 	bl	800a1b8 <UART_SetConfig>
 800a160:	4603      	mov	r3, r0
 800a162:	2b01      	cmp	r3, #1
 800a164:	d101      	bne.n	800a16a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e022      	b.n	800a1b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fd88 	bl	800ac88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689a      	ldr	r2, [r3, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fe0f 	bl	800adcc <UART_CheckIdleState>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1bc:	b092      	sub	sp, #72	; 0x48
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4bbe      	ldr	r3, [pc, #760]	; (800a4e0 <UART_SetConfig+0x328>)
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4ab3      	ldr	r2, [pc, #716]	; (800a4e4 <UART_SetConfig+0x32c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d004      	beq.n	800a224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a220:	4313      	orrs	r3, r2
 800a222:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	4baf      	ldr	r3, [pc, #700]	; (800a4e8 <UART_SetConfig+0x330>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	6812      	ldr	r2, [r2, #0]
 800a232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a234:	430b      	orrs	r3, r1
 800a236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23e:	f023 010f 	bic.w	r1, r3, #15
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4aa6      	ldr	r2, [pc, #664]	; (800a4ec <UART_SetConfig+0x334>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d177      	bne.n	800a348 <UART_SetConfig+0x190>
 800a258:	4ba5      	ldr	r3, [pc, #660]	; (800a4f0 <UART_SetConfig+0x338>)
 800a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a260:	2b28      	cmp	r3, #40	; 0x28
 800a262:	d86d      	bhi.n	800a340 <UART_SetConfig+0x188>
 800a264:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <UART_SetConfig+0xb4>)
 800a266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26a:	bf00      	nop
 800a26c:	0800a311 	.word	0x0800a311
 800a270:	0800a341 	.word	0x0800a341
 800a274:	0800a341 	.word	0x0800a341
 800a278:	0800a341 	.word	0x0800a341
 800a27c:	0800a341 	.word	0x0800a341
 800a280:	0800a341 	.word	0x0800a341
 800a284:	0800a341 	.word	0x0800a341
 800a288:	0800a341 	.word	0x0800a341
 800a28c:	0800a319 	.word	0x0800a319
 800a290:	0800a341 	.word	0x0800a341
 800a294:	0800a341 	.word	0x0800a341
 800a298:	0800a341 	.word	0x0800a341
 800a29c:	0800a341 	.word	0x0800a341
 800a2a0:	0800a341 	.word	0x0800a341
 800a2a4:	0800a341 	.word	0x0800a341
 800a2a8:	0800a341 	.word	0x0800a341
 800a2ac:	0800a321 	.word	0x0800a321
 800a2b0:	0800a341 	.word	0x0800a341
 800a2b4:	0800a341 	.word	0x0800a341
 800a2b8:	0800a341 	.word	0x0800a341
 800a2bc:	0800a341 	.word	0x0800a341
 800a2c0:	0800a341 	.word	0x0800a341
 800a2c4:	0800a341 	.word	0x0800a341
 800a2c8:	0800a341 	.word	0x0800a341
 800a2cc:	0800a329 	.word	0x0800a329
 800a2d0:	0800a341 	.word	0x0800a341
 800a2d4:	0800a341 	.word	0x0800a341
 800a2d8:	0800a341 	.word	0x0800a341
 800a2dc:	0800a341 	.word	0x0800a341
 800a2e0:	0800a341 	.word	0x0800a341
 800a2e4:	0800a341 	.word	0x0800a341
 800a2e8:	0800a341 	.word	0x0800a341
 800a2ec:	0800a331 	.word	0x0800a331
 800a2f0:	0800a341 	.word	0x0800a341
 800a2f4:	0800a341 	.word	0x0800a341
 800a2f8:	0800a341 	.word	0x0800a341
 800a2fc:	0800a341 	.word	0x0800a341
 800a300:	0800a341 	.word	0x0800a341
 800a304:	0800a341 	.word	0x0800a341
 800a308:	0800a341 	.word	0x0800a341
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e222      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a318:	2304      	movs	r3, #4
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e21e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a320:	2308      	movs	r3, #8
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e21a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a328:	2310      	movs	r3, #16
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32e:	e216      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a330:	2320      	movs	r3, #32
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a336:	e212      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a338:	2340      	movs	r3, #64	; 0x40
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33e:	e20e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e20a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a69      	ldr	r2, [pc, #420]	; (800a4f4 <UART_SetConfig+0x33c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d130      	bne.n	800a3b4 <UART_SetConfig+0x1fc>
 800a352:	4b67      	ldr	r3, [pc, #412]	; (800a4f0 <UART_SetConfig+0x338>)
 800a354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d826      	bhi.n	800a3ac <UART_SetConfig+0x1f4>
 800a35e:	a201      	add	r2, pc, #4	; (adr r2, 800a364 <UART_SetConfig+0x1ac>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a37d 	.word	0x0800a37d
 800a368:	0800a385 	.word	0x0800a385
 800a36c:	0800a38d 	.word	0x0800a38d
 800a370:	0800a395 	.word	0x0800a395
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a3a5 	.word	0x0800a3a5
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e1ec      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a384:	2304      	movs	r3, #4
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e1e8      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a38c:	2308      	movs	r3, #8
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e1e4      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a394:	2310      	movs	r3, #16
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39a:	e1e0      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a39c:	2320      	movs	r3, #32
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a2:	e1dc      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3aa:	e1d8      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a3ac:	2380      	movs	r3, #128	; 0x80
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b2:	e1d4      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a4f      	ldr	r2, [pc, #316]	; (800a4f8 <UART_SetConfig+0x340>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d130      	bne.n	800a420 <UART_SetConfig+0x268>
 800a3be:	4b4c      	ldr	r3, [pc, #304]	; (800a4f0 <UART_SetConfig+0x338>)
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b05      	cmp	r3, #5
 800a3c8:	d826      	bhi.n	800a418 <UART_SetConfig+0x260>
 800a3ca:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <UART_SetConfig+0x218>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a3e9 	.word	0x0800a3e9
 800a3d4:	0800a3f1 	.word	0x0800a3f1
 800a3d8:	0800a3f9 	.word	0x0800a3f9
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a409 	.word	0x0800a409
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e1b6      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e1b2      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e1ae      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a400:	2310      	movs	r3, #16
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e1aa      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a408:	2320      	movs	r3, #32
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40e:	e1a6      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a416:	e1a2      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a418:	2380      	movs	r3, #128	; 0x80
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41e:	e19e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a35      	ldr	r2, [pc, #212]	; (800a4fc <UART_SetConfig+0x344>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d130      	bne.n	800a48c <UART_SetConfig+0x2d4>
 800a42a:	4b31      	ldr	r3, [pc, #196]	; (800a4f0 <UART_SetConfig+0x338>)
 800a42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42e:	f003 0307 	and.w	r3, r3, #7
 800a432:	2b05      	cmp	r3, #5
 800a434:	d826      	bhi.n	800a484 <UART_SetConfig+0x2cc>
 800a436:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <UART_SetConfig+0x284>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a455 	.word	0x0800a455
 800a440:	0800a45d 	.word	0x0800a45d
 800a444:	0800a465 	.word	0x0800a465
 800a448:	0800a46d 	.word	0x0800a46d
 800a44c:	0800a475 	.word	0x0800a475
 800a450:	0800a47d 	.word	0x0800a47d
 800a454:	2300      	movs	r3, #0
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e180      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a45c:	2304      	movs	r3, #4
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e17c      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a464:	2308      	movs	r3, #8
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e178      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a46c:	2310      	movs	r3, #16
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e174      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a474:	2320      	movs	r3, #32
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e170      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a482:	e16c      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48a:	e168      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1b      	ldr	r2, [pc, #108]	; (800a500 <UART_SetConfig+0x348>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d142      	bne.n	800a51c <UART_SetConfig+0x364>
 800a496:	4b16      	ldr	r3, [pc, #88]	; (800a4f0 <UART_SetConfig+0x338>)
 800a498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	d838      	bhi.n	800a514 <UART_SetConfig+0x35c>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <UART_SetConfig+0x2f0>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4c1 	.word	0x0800a4c1
 800a4ac:	0800a4c9 	.word	0x0800a4c9
 800a4b0:	0800a4d1 	.word	0x0800a4d1
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a505 	.word	0x0800a505
 800a4bc:	0800a50d 	.word	0x0800a50d
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e14a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e146      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e142      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e13e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a4e0:	cfff69f3 	.word	0xcfff69f3
 800a4e4:	58000c00 	.word	0x58000c00
 800a4e8:	11fff4ff 	.word	0x11fff4ff
 800a4ec:	40011000 	.word	0x40011000
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	40004400 	.word	0x40004400
 800a4f8:	40004800 	.word	0x40004800
 800a4fc:	40004c00 	.word	0x40004c00
 800a500:	40005000 	.word	0x40005000
 800a504:	2320      	movs	r3, #32
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50a:	e128      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a512:	e124      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51a:	e120      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4acb      	ldr	r2, [pc, #812]	; (800a850 <UART_SetConfig+0x698>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d176      	bne.n	800a614 <UART_SetConfig+0x45c>
 800a526:	4bcb      	ldr	r3, [pc, #812]	; (800a854 <UART_SetConfig+0x69c>)
 800a528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a52e:	2b28      	cmp	r3, #40	; 0x28
 800a530:	d86c      	bhi.n	800a60c <UART_SetConfig+0x454>
 800a532:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x380>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a5dd 	.word	0x0800a5dd
 800a53c:	0800a60d 	.word	0x0800a60d
 800a540:	0800a60d 	.word	0x0800a60d
 800a544:	0800a60d 	.word	0x0800a60d
 800a548:	0800a60d 	.word	0x0800a60d
 800a54c:	0800a60d 	.word	0x0800a60d
 800a550:	0800a60d 	.word	0x0800a60d
 800a554:	0800a60d 	.word	0x0800a60d
 800a558:	0800a5e5 	.word	0x0800a5e5
 800a55c:	0800a60d 	.word	0x0800a60d
 800a560:	0800a60d 	.word	0x0800a60d
 800a564:	0800a60d 	.word	0x0800a60d
 800a568:	0800a60d 	.word	0x0800a60d
 800a56c:	0800a60d 	.word	0x0800a60d
 800a570:	0800a60d 	.word	0x0800a60d
 800a574:	0800a60d 	.word	0x0800a60d
 800a578:	0800a5ed 	.word	0x0800a5ed
 800a57c:	0800a60d 	.word	0x0800a60d
 800a580:	0800a60d 	.word	0x0800a60d
 800a584:	0800a60d 	.word	0x0800a60d
 800a588:	0800a60d 	.word	0x0800a60d
 800a58c:	0800a60d 	.word	0x0800a60d
 800a590:	0800a60d 	.word	0x0800a60d
 800a594:	0800a60d 	.word	0x0800a60d
 800a598:	0800a5f5 	.word	0x0800a5f5
 800a59c:	0800a60d 	.word	0x0800a60d
 800a5a0:	0800a60d 	.word	0x0800a60d
 800a5a4:	0800a60d 	.word	0x0800a60d
 800a5a8:	0800a60d 	.word	0x0800a60d
 800a5ac:	0800a60d 	.word	0x0800a60d
 800a5b0:	0800a60d 	.word	0x0800a60d
 800a5b4:	0800a60d 	.word	0x0800a60d
 800a5b8:	0800a5fd 	.word	0x0800a5fd
 800a5bc:	0800a60d 	.word	0x0800a60d
 800a5c0:	0800a60d 	.word	0x0800a60d
 800a5c4:	0800a60d 	.word	0x0800a60d
 800a5c8:	0800a60d 	.word	0x0800a60d
 800a5cc:	0800a60d 	.word	0x0800a60d
 800a5d0:	0800a60d 	.word	0x0800a60d
 800a5d4:	0800a60d 	.word	0x0800a60d
 800a5d8:	0800a605 	.word	0x0800a605
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e0bc      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e0b8      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e0b4      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e0b0      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a5fc:	2320      	movs	r3, #32
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e0ac      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60a:	e0a8      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a60c:	2380      	movs	r3, #128	; 0x80
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a612:	e0a4      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a8f      	ldr	r2, [pc, #572]	; (800a858 <UART_SetConfig+0x6a0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d130      	bne.n	800a680 <UART_SetConfig+0x4c8>
 800a61e:	4b8d      	ldr	r3, [pc, #564]	; (800a854 <UART_SetConfig+0x69c>)
 800a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b05      	cmp	r3, #5
 800a628:	d826      	bhi.n	800a678 <UART_SetConfig+0x4c0>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <UART_SetConfig+0x478>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a649 	.word	0x0800a649
 800a634:	0800a651 	.word	0x0800a651
 800a638:	0800a659 	.word	0x0800a659
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a669 	.word	0x0800a669
 800a644:	0800a671 	.word	0x0800a671
 800a648:	2300      	movs	r3, #0
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e086      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a650:	2304      	movs	r3, #4
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e082      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e07e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a660:	2310      	movs	r3, #16
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a666:	e07a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a668:	2320      	movs	r3, #32
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66e:	e076      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a670:	2340      	movs	r3, #64	; 0x40
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a676:	e072      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a678:	2380      	movs	r3, #128	; 0x80
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67e:	e06e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a75      	ldr	r2, [pc, #468]	; (800a85c <UART_SetConfig+0x6a4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d130      	bne.n	800a6ec <UART_SetConfig+0x534>
 800a68a:	4b72      	ldr	r3, [pc, #456]	; (800a854 <UART_SetConfig+0x69c>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b05      	cmp	r3, #5
 800a694:	d826      	bhi.n	800a6e4 <UART_SetConfig+0x52c>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <UART_SetConfig+0x4e4>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6b5 	.word	0x0800a6b5
 800a6a0:	0800a6bd 	.word	0x0800a6bd
 800a6a4:	0800a6c5 	.word	0x0800a6c5
 800a6a8:	0800a6cd 	.word	0x0800a6cd
 800a6ac:	0800a6d5 	.word	0x0800a6d5
 800a6b0:	0800a6dd 	.word	0x0800a6dd
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ba:	e050      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6bc:	2304      	movs	r3, #4
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e04c      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6c4:	2308      	movs	r3, #8
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e048      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6cc:	2310      	movs	r3, #16
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e044      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6d4:	2320      	movs	r3, #32
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6da:	e040      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6dc:	2340      	movs	r3, #64	; 0x40
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e2:	e03c      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6e4:	2380      	movs	r3, #128	; 0x80
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ea:	e038      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a5b      	ldr	r2, [pc, #364]	; (800a860 <UART_SetConfig+0x6a8>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d130      	bne.n	800a758 <UART_SetConfig+0x5a0>
 800a6f6:	4b57      	ldr	r3, [pc, #348]	; (800a854 <UART_SetConfig+0x69c>)
 800a6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	d826      	bhi.n	800a750 <UART_SetConfig+0x598>
 800a702:	a201      	add	r2, pc, #4	; (adr r2, 800a708 <UART_SetConfig+0x550>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a721 	.word	0x0800a721
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	0800a731 	.word	0x0800a731
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a749 	.word	0x0800a749
 800a720:	2302      	movs	r3, #2
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e01a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a728:	2304      	movs	r3, #4
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e016      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a730:	2308      	movs	r3, #8
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a736:	e012      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a738:	2310      	movs	r3, #16
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73e:	e00e      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a740:	2320      	movs	r3, #32
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a746:	e00a      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74e:	e006      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a756:	e002      	b.n	800a75e <UART_SetConfig+0x5a6>
 800a758:	2380      	movs	r3, #128	; 0x80
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a3f      	ldr	r2, [pc, #252]	; (800a860 <UART_SetConfig+0x6a8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	f040 80f8 	bne.w	800a95a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a76a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a76e:	2b20      	cmp	r3, #32
 800a770:	dc46      	bgt.n	800a800 <UART_SetConfig+0x648>
 800a772:	2b02      	cmp	r3, #2
 800a774:	f2c0 8082 	blt.w	800a87c <UART_SetConfig+0x6c4>
 800a778:	3b02      	subs	r3, #2
 800a77a:	2b1e      	cmp	r3, #30
 800a77c:	d87e      	bhi.n	800a87c <UART_SetConfig+0x6c4>
 800a77e:	a201      	add	r2, pc, #4	; (adr r2, 800a784 <UART_SetConfig+0x5cc>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a807 	.word	0x0800a807
 800a788:	0800a87d 	.word	0x0800a87d
 800a78c:	0800a80f 	.word	0x0800a80f
 800a790:	0800a87d 	.word	0x0800a87d
 800a794:	0800a87d 	.word	0x0800a87d
 800a798:	0800a87d 	.word	0x0800a87d
 800a79c:	0800a81f 	.word	0x0800a81f
 800a7a0:	0800a87d 	.word	0x0800a87d
 800a7a4:	0800a87d 	.word	0x0800a87d
 800a7a8:	0800a87d 	.word	0x0800a87d
 800a7ac:	0800a87d 	.word	0x0800a87d
 800a7b0:	0800a87d 	.word	0x0800a87d
 800a7b4:	0800a87d 	.word	0x0800a87d
 800a7b8:	0800a87d 	.word	0x0800a87d
 800a7bc:	0800a82f 	.word	0x0800a82f
 800a7c0:	0800a87d 	.word	0x0800a87d
 800a7c4:	0800a87d 	.word	0x0800a87d
 800a7c8:	0800a87d 	.word	0x0800a87d
 800a7cc:	0800a87d 	.word	0x0800a87d
 800a7d0:	0800a87d 	.word	0x0800a87d
 800a7d4:	0800a87d 	.word	0x0800a87d
 800a7d8:	0800a87d 	.word	0x0800a87d
 800a7dc:	0800a87d 	.word	0x0800a87d
 800a7e0:	0800a87d 	.word	0x0800a87d
 800a7e4:	0800a87d 	.word	0x0800a87d
 800a7e8:	0800a87d 	.word	0x0800a87d
 800a7ec:	0800a87d 	.word	0x0800a87d
 800a7f0:	0800a87d 	.word	0x0800a87d
 800a7f4:	0800a87d 	.word	0x0800a87d
 800a7f8:	0800a87d 	.word	0x0800a87d
 800a7fc:	0800a86f 	.word	0x0800a86f
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d037      	beq.n	800a874 <UART_SetConfig+0x6bc>
 800a804:	e03a      	b.n	800a87c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a806:	f7fd ffb1 	bl	800876c <HAL_RCCEx_GetD3PCLK1Freq>
 800a80a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a80c:	e03c      	b.n	800a888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f7fd ffc0 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81c:	e034      	b.n	800a888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81e:	f107 0318 	add.w	r3, r7, #24
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe f90c 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82c:	e02c      	b.n	800a888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a82e:	4b09      	ldr	r3, [pc, #36]	; (800a854 <UART_SetConfig+0x69c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d016      	beq.n	800a868 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a83a:	4b06      	ldr	r3, [pc, #24]	; (800a854 <UART_SetConfig+0x69c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	08db      	lsrs	r3, r3, #3
 800a840:	f003 0303 	and.w	r3, r3, #3
 800a844:	4a07      	ldr	r2, [pc, #28]	; (800a864 <UART_SetConfig+0x6ac>)
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a84c:	e01c      	b.n	800a888 <UART_SetConfig+0x6d0>
 800a84e:	bf00      	nop
 800a850:	40011400 	.word	0x40011400
 800a854:	58024400 	.word	0x58024400
 800a858:	40007800 	.word	0x40007800
 800a85c:	40007c00 	.word	0x40007c00
 800a860:	58000c00 	.word	0x58000c00
 800a864:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a868:	4b9d      	ldr	r3, [pc, #628]	; (800aae0 <UART_SetConfig+0x928>)
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a86c:	e00c      	b.n	800a888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a86e:	4b9d      	ldr	r3, [pc, #628]	; (800aae4 <UART_SetConfig+0x92c>)
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a872:	e009      	b.n	800a888 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a87a:	e005      	b.n	800a888 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a886:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 81de 	beq.w	800ac4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	4a94      	ldr	r2, [pc, #592]	; (800aae8 <UART_SetConfig+0x930>)
 800a896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	4413      	add	r3, r2
 800a8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d305      	bcc.n	800a8c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d903      	bls.n	800a8c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8c6:	e1c1      	b.n	800ac4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	60bb      	str	r3, [r7, #8]
 800a8ce:	60fa      	str	r2, [r7, #12]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	4a84      	ldr	r2, [pc, #528]	; (800aae8 <UART_SetConfig+0x930>)
 800a8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	2200      	movs	r2, #0
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	607a      	str	r2, [r7, #4]
 800a8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8ea:	f7f5 fcf9 	bl	80002e0 <__aeabi_uldivmod>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	f04f 0200 	mov.w	r2, #0
 800a8fa:	f04f 0300 	mov.w	r3, #0
 800a8fe:	020b      	lsls	r3, r1, #8
 800a900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a904:	0202      	lsls	r2, r0, #8
 800a906:	6979      	ldr	r1, [r7, #20]
 800a908:	6849      	ldr	r1, [r1, #4]
 800a90a:	0849      	lsrs	r1, r1, #1
 800a90c:	2000      	movs	r0, #0
 800a90e:	460c      	mov	r4, r1
 800a910:	4605      	mov	r5, r0
 800a912:	eb12 0804 	adds.w	r8, r2, r4
 800a916:	eb43 0905 	adc.w	r9, r3, r5
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	469a      	mov	sl, r3
 800a922:	4693      	mov	fp, r2
 800a924:	4652      	mov	r2, sl
 800a926:	465b      	mov	r3, fp
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f5 fcd8 	bl	80002e0 <__aeabi_uldivmod>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4613      	mov	r3, r2
 800a936:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a93e:	d308      	bcc.n	800a952 <UART_SetConfig+0x79a>
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a946:	d204      	bcs.n	800a952 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a94e:	60da      	str	r2, [r3, #12]
 800a950:	e17c      	b.n	800ac4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a958:	e178      	b.n	800ac4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a962:	f040 80c5 	bne.w	800aaf0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a966:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a96a:	2b20      	cmp	r3, #32
 800a96c:	dc48      	bgt.n	800aa00 <UART_SetConfig+0x848>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	db7b      	blt.n	800aa6a <UART_SetConfig+0x8b2>
 800a972:	2b20      	cmp	r3, #32
 800a974:	d879      	bhi.n	800aa6a <UART_SetConfig+0x8b2>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <UART_SetConfig+0x7c4>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800aa07 	.word	0x0800aa07
 800a980:	0800aa0f 	.word	0x0800aa0f
 800a984:	0800aa6b 	.word	0x0800aa6b
 800a988:	0800aa6b 	.word	0x0800aa6b
 800a98c:	0800aa17 	.word	0x0800aa17
 800a990:	0800aa6b 	.word	0x0800aa6b
 800a994:	0800aa6b 	.word	0x0800aa6b
 800a998:	0800aa6b 	.word	0x0800aa6b
 800a99c:	0800aa27 	.word	0x0800aa27
 800a9a0:	0800aa6b 	.word	0x0800aa6b
 800a9a4:	0800aa6b 	.word	0x0800aa6b
 800a9a8:	0800aa6b 	.word	0x0800aa6b
 800a9ac:	0800aa6b 	.word	0x0800aa6b
 800a9b0:	0800aa6b 	.word	0x0800aa6b
 800a9b4:	0800aa6b 	.word	0x0800aa6b
 800a9b8:	0800aa6b 	.word	0x0800aa6b
 800a9bc:	0800aa37 	.word	0x0800aa37
 800a9c0:	0800aa6b 	.word	0x0800aa6b
 800a9c4:	0800aa6b 	.word	0x0800aa6b
 800a9c8:	0800aa6b 	.word	0x0800aa6b
 800a9cc:	0800aa6b 	.word	0x0800aa6b
 800a9d0:	0800aa6b 	.word	0x0800aa6b
 800a9d4:	0800aa6b 	.word	0x0800aa6b
 800a9d8:	0800aa6b 	.word	0x0800aa6b
 800a9dc:	0800aa6b 	.word	0x0800aa6b
 800a9e0:	0800aa6b 	.word	0x0800aa6b
 800a9e4:	0800aa6b 	.word	0x0800aa6b
 800a9e8:	0800aa6b 	.word	0x0800aa6b
 800a9ec:	0800aa6b 	.word	0x0800aa6b
 800a9f0:	0800aa6b 	.word	0x0800aa6b
 800a9f4:	0800aa6b 	.word	0x0800aa6b
 800a9f8:	0800aa6b 	.word	0x0800aa6b
 800a9fc:	0800aa5d 	.word	0x0800aa5d
 800aa00:	2b40      	cmp	r3, #64	; 0x40
 800aa02:	d02e      	beq.n	800aa62 <UART_SetConfig+0x8aa>
 800aa04:	e031      	b.n	800aa6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa06:	f7fb feb9 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 800aa0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa0c:	e033      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa0e:	f7fb fecb 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800aa12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa14:	e02f      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fd febc 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa24:	e027      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa26:	f107 0318 	add.w	r3, r7, #24
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe f808 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa34:	e01f      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa36:	4b2d      	ldr	r3, [pc, #180]	; (800aaec <UART_SetConfig+0x934>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa42:	4b2a      	ldr	r3, [pc, #168]	; (800aaec <UART_SetConfig+0x934>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	08db      	lsrs	r3, r3, #3
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	4a24      	ldr	r2, [pc, #144]	; (800aae0 <UART_SetConfig+0x928>)
 800aa4e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa54:	e00f      	b.n	800aa76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa56:	4b22      	ldr	r3, [pc, #136]	; (800aae0 <UART_SetConfig+0x928>)
 800aa58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa5a:	e00c      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa5c:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <UART_SetConfig+0x92c>)
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa60:	e009      	b.n	800aa76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa68:	e005      	b.n	800aa76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 80e7 	beq.w	800ac4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <UART_SetConfig+0x930>)
 800aa84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa90:	005a      	lsls	r2, r3, #1
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	085b      	lsrs	r3, r3, #1
 800aa98:	441a      	add	r2, r3
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d916      	bls.n	800aad8 <UART_SetConfig+0x920>
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab0:	d212      	bcs.n	800aad8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	f023 030f 	bic.w	r3, r3, #15
 800aaba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabe:	085b      	lsrs	r3, r3, #1
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f003 0307 	and.w	r3, r3, #7
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaca:	4313      	orrs	r3, r2
 800aacc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aad4:	60da      	str	r2, [r3, #12]
 800aad6:	e0b9      	b.n	800ac4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aade:	e0b5      	b.n	800ac4c <UART_SetConfig+0xa94>
 800aae0:	03d09000 	.word	0x03d09000
 800aae4:	003d0900 	.word	0x003d0900
 800aae8:	0800ea08 	.word	0x0800ea08
 800aaec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaf0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	dc49      	bgt.n	800ab8c <UART_SetConfig+0x9d4>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	db7c      	blt.n	800abf6 <UART_SetConfig+0xa3e>
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	d87a      	bhi.n	800abf6 <UART_SetConfig+0xa3e>
 800ab00:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0x950>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800ab93 	.word	0x0800ab93
 800ab0c:	0800ab9b 	.word	0x0800ab9b
 800ab10:	0800abf7 	.word	0x0800abf7
 800ab14:	0800abf7 	.word	0x0800abf7
 800ab18:	0800aba3 	.word	0x0800aba3
 800ab1c:	0800abf7 	.word	0x0800abf7
 800ab20:	0800abf7 	.word	0x0800abf7
 800ab24:	0800abf7 	.word	0x0800abf7
 800ab28:	0800abb3 	.word	0x0800abb3
 800ab2c:	0800abf7 	.word	0x0800abf7
 800ab30:	0800abf7 	.word	0x0800abf7
 800ab34:	0800abf7 	.word	0x0800abf7
 800ab38:	0800abf7 	.word	0x0800abf7
 800ab3c:	0800abf7 	.word	0x0800abf7
 800ab40:	0800abf7 	.word	0x0800abf7
 800ab44:	0800abf7 	.word	0x0800abf7
 800ab48:	0800abc3 	.word	0x0800abc3
 800ab4c:	0800abf7 	.word	0x0800abf7
 800ab50:	0800abf7 	.word	0x0800abf7
 800ab54:	0800abf7 	.word	0x0800abf7
 800ab58:	0800abf7 	.word	0x0800abf7
 800ab5c:	0800abf7 	.word	0x0800abf7
 800ab60:	0800abf7 	.word	0x0800abf7
 800ab64:	0800abf7 	.word	0x0800abf7
 800ab68:	0800abf7 	.word	0x0800abf7
 800ab6c:	0800abf7 	.word	0x0800abf7
 800ab70:	0800abf7 	.word	0x0800abf7
 800ab74:	0800abf7 	.word	0x0800abf7
 800ab78:	0800abf7 	.word	0x0800abf7
 800ab7c:	0800abf7 	.word	0x0800abf7
 800ab80:	0800abf7 	.word	0x0800abf7
 800ab84:	0800abf7 	.word	0x0800abf7
 800ab88:	0800abe9 	.word	0x0800abe9
 800ab8c:	2b40      	cmp	r3, #64	; 0x40
 800ab8e:	d02e      	beq.n	800abee <UART_SetConfig+0xa36>
 800ab90:	e031      	b.n	800abf6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab92:	f7fb fdf3 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 800ab96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab98:	e033      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab9a:	f7fb fe05 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 800ab9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aba0:	e02f      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fd fdf6 	bl	8008798 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb0:	e027      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb2:	f107 0318 	add.w	r3, r7, #24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fd ff42 	bl	8008a40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc0:	e01f      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc2:	4b2d      	ldr	r3, [pc, #180]	; (800ac78 <UART_SetConfig+0xac0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0320 	and.w	r3, r3, #32
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abce:	4b2a      	ldr	r3, [pc, #168]	; (800ac78 <UART_SetConfig+0xac0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	08db      	lsrs	r3, r3, #3
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	4a28      	ldr	r2, [pc, #160]	; (800ac7c <UART_SetConfig+0xac4>)
 800abda:	fa22 f303 	lsr.w	r3, r2, r3
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abe0:	e00f      	b.n	800ac02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800abe2:	4b26      	ldr	r3, [pc, #152]	; (800ac7c <UART_SetConfig+0xac4>)
 800abe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe6:	e00c      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abe8:	4b25      	ldr	r3, [pc, #148]	; (800ac80 <UART_SetConfig+0xac8>)
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abec:	e009      	b.n	800ac02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf4:	e005      	b.n	800ac02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac00:	bf00      	nop
    }

    if (pclk != 0U)
 800ac02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d021      	beq.n	800ac4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <UART_SetConfig+0xacc>)
 800ac0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac12:	461a      	mov	r2, r3
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	085b      	lsrs	r3, r3, #1
 800ac20:	441a      	add	r2, r3
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	2b0f      	cmp	r3, #15
 800ac30:	d909      	bls.n	800ac46 <UART_SetConfig+0xa8e>
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac38:	d205      	bcs.n	800ac46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	60da      	str	r2, [r3, #12]
 800ac44:	e002      	b.n	800ac4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2200      	movs	r2, #0
 800ac66:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ac68:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3748      	adds	r7, #72	; 0x48
 800ac70:	46bd      	mov	sp, r7
 800ac72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac76:	bf00      	nop
 800ac78:	58024400 	.word	0x58024400
 800ac7c:	03d09000 	.word	0x03d09000
 800ac80:	003d0900 	.word	0x003d0900
 800ac84:	0800ea08 	.word	0x0800ea08

0800ac88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00a      	beq.n	800acb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb6:	f003 0302 	and.w	r3, r3, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00a      	beq.n	800acf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfa:	f003 0308 	and.w	r3, r3, #8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01a      	beq.n	800ad9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad86:	d10a      	bne.n	800ad9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	605a      	str	r2, [r3, #4]
  }
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b098      	sub	sp, #96	; 0x60
 800add0:	af02      	add	r7, sp, #8
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800addc:	f7f7 fc7a 	bl	80026d4 <HAL_GetTick>
 800ade0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 0308 	and.w	r3, r3, #8
 800adec:	2b08      	cmp	r3, #8
 800adee:	d12f      	bne.n	800ae50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adf8:	2200      	movs	r2, #0
 800adfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f88e 	bl	800af20 <UART_WaitOnFlagUntilTimeout>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d022      	beq.n	800ae50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae28:	647b      	str	r3, [r7, #68]	; 0x44
 800ae2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e6      	bne.n	800ae0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e063      	b.n	800af18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d149      	bne.n	800aef2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae66:	2200      	movs	r2, #0
 800ae68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f857 	bl	800af20 <UART_WaitOnFlagUntilTimeout>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d03c      	beq.n	800aef2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	623b      	str	r3, [r7, #32]
   return(result);
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae96:	633b      	str	r3, [r7, #48]	; 0x30
 800ae98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e6      	bne.n	800ae78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeca:	61fa      	str	r2, [r7, #28]
 800aecc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	69b9      	ldr	r1, [r7, #24]
 800aed0:	69fa      	ldr	r2, [r7, #28]
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	617b      	str	r3, [r7, #20]
   return(result);
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e5      	bne.n	800aeaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e012      	b.n	800af18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3758      	adds	r7, #88	; 0x58
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	603b      	str	r3, [r7, #0]
 800af2c:	4613      	mov	r3, r2
 800af2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af30:	e049      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af38:	d045      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af3a:	f7f7 fbcb 	bl	80026d4 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	429a      	cmp	r2, r3
 800af48:	d302      	bcc.n	800af50 <UART_WaitOnFlagUntilTimeout+0x30>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e048      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d031      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	d110      	bne.n	800af92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2208      	movs	r2, #8
 800af76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 f839 	bl	800aff0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2208      	movs	r2, #8
 800af82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e029      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69db      	ldr	r3, [r3, #28]
 800af98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afa0:	d111      	bne.n	800afc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f81f 	bl	800aff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e00f      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69da      	ldr	r2, [r3, #28]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4013      	ands	r3, r2
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	bf0c      	ite	eq
 800afd6:	2301      	moveq	r3, #1
 800afd8:	2300      	movne	r3, #0
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	461a      	mov	r2, r3
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d0a6      	beq.n	800af32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b095      	sub	sp, #84	; 0x54
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b00c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b016:	643b      	str	r3, [r7, #64]	; 0x40
 800b018:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b01c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e6      	bne.n	800aff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3308      	adds	r3, #8
 800b030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	e853 3f00 	ldrex	r3, [r3]
 800b038:	61fb      	str	r3, [r7, #28]
   return(result);
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <UART_EndRxTransfer+0xc8>)
 800b03e:	4013      	ands	r3, r2
 800b040:	64bb      	str	r3, [r7, #72]	; 0x48
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3308      	adds	r3, #8
 800b048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b04a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b052:	e841 2300 	strex	r3, r2, [r1]
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1e5      	bne.n	800b02a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d118      	bne.n	800b098 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	60bb      	str	r3, [r7, #8]
   return(result);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f023 0310 	bic.w	r3, r3, #16
 800b07a:	647b      	str	r3, [r7, #68]	; 0x44
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b084:	61bb      	str	r3, [r7, #24]
 800b086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	6979      	ldr	r1, [r7, #20]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	613b      	str	r3, [r7, #16]
   return(result);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e6      	bne.n	800b066 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b0ac:	bf00      	nop
 800b0ae:	3754      	adds	r7, #84	; 0x54
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	effffffe 	.word	0xeffffffe

0800b0bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e027      	b.n	800b122 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2224      	movs	r2, #36	; 0x24
 800b0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f022 0201 	bic.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2220      	movs	r2, #32
 800b114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b142:	2302      	movs	r3, #2
 800b144:	e02d      	b.n	800b1a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f850 	bl	800b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e02d      	b.n	800b21e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2224      	movs	r2, #36	; 0x24
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f812 	bl	800b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b234:	2b00      	cmp	r3, #0
 800b236:	d108      	bne.n	800b24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b248:	e031      	b.n	800b2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b24a:	2310      	movs	r3, #16
 800b24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b24e:	2310      	movs	r3, #16
 800b250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	0e5b      	lsrs	r3, r3, #25
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	0f5b      	lsrs	r3, r3, #29
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f003 0307 	and.w	r3, r3, #7
 800b270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	7b3a      	ldrb	r2, [r7, #12]
 800b276:	4911      	ldr	r1, [pc, #68]	; (800b2bc <UARTEx_SetNbDataToProcess+0x94>)
 800b278:	5c8a      	ldrb	r2, [r1, r2]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b27e:	7b3a      	ldrb	r2, [r7, #12]
 800b280:	490f      	ldr	r1, [pc, #60]	; (800b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b284:	fb93 f3f2 	sdiv	r3, r3, r2
 800b288:	b29a      	uxth	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	7b7a      	ldrb	r2, [r7, #13]
 800b294:	4909      	ldr	r1, [pc, #36]	; (800b2bc <UARTEx_SetNbDataToProcess+0x94>)
 800b296:	5c8a      	ldrb	r2, [r1, r2]
 800b298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b29c:	7b7a      	ldrb	r2, [r7, #13]
 800b29e:	4908      	ldr	r1, [pc, #32]	; (800b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	0800ea20 	.word	0x0800ea20
 800b2c0:	0800ea28 	.word	0x0800ea28

0800b2c4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	f023 0101 	bic.w	r1, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d102      	bne.n	800b2f4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b2ee:	2340      	movs	r3, #64	; 0x40
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e001      	b.n	800b2f8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b304:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b30a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b310:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b316:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b31c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b322:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b328:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b32e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b334:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	4313      	orrs	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b35c:	4b20      	ldr	r3, [pc, #128]	; (800b3e0 <FMC_NORSRAM_Init+0x11c>)
 800b35e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b366:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b36e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b376:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	43db      	mvns	r3, r3
 800b386:	ea02 0103 	and.w	r1, r2, r3
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	4319      	orrs	r1, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a0:	d10c      	bne.n	800b3bc <FMC_NORSRAM_Init+0xf8>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d006      	beq.n	800b3d2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	0008fb7f 	.word	0x0008fb7f

0800b3e4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	431a      	orrs	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	431a      	orrs	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	041b      	lsls	r3, r3, #16
 800b418:	431a      	orrs	r2, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	3b01      	subs	r3, #1
 800b420:	051b      	lsls	r3, r3, #20
 800b422:	431a      	orrs	r2, r3
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	3b02      	subs	r3, #2
 800b42a:	061b      	lsls	r3, r3, #24
 800b42c:	431a      	orrs	r2, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	4313      	orrs	r3, r2
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	3201      	adds	r2, #1
 800b438:	4319      	orrs	r1, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b44c:	d113      	bne.n	800b476 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b456:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	051b      	lsls	r3, r3, #20
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4313      	orrs	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	431a      	orrs	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b498:	d11d      	bne.n	800b4d6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	6811      	ldr	r1, [r2, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	6852      	ldr	r2, [r2, #4]
 800b4ae:	0112      	lsls	r2, r2, #4
 800b4b0:	4311      	orrs	r1, r2
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	6892      	ldr	r2, [r2, #8]
 800b4b6:	0212      	lsls	r2, r2, #8
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	6992      	ldr	r2, [r2, #24]
 800b4be:	4311      	orrs	r1, r2
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	68d2      	ldr	r2, [r2, #12]
 800b4c4:	0412      	lsls	r2, r2, #16
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	ea43 0102 	orr.w	r1, r3, r2
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b4d4:	e005      	b.n	800b4e2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b4de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	cff00000 	.word	0xcff00000

0800b4f4 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d121      	bne.n	800b576 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <FMC_SDRAM_Init+0xb4>)
 800b538:	4013      	ands	r3, r2
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	6851      	ldr	r1, [r2, #4]
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	6892      	ldr	r2, [r2, #8]
 800b542:	4311      	orrs	r1, r2
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	68d2      	ldr	r2, [r2, #12]
 800b548:	4311      	orrs	r1, r2
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	6912      	ldr	r2, [r2, #16]
 800b54e:	4311      	orrs	r1, r2
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	6952      	ldr	r2, [r2, #20]
 800b554:	4311      	orrs	r1, r2
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	6992      	ldr	r2, [r2, #24]
 800b55a:	4311      	orrs	r1, r2
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	69d2      	ldr	r2, [r2, #28]
 800b560:	4311      	orrs	r1, r2
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	6a12      	ldr	r2, [r2, #32]
 800b566:	4311      	orrs	r1, r2
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b56c:	430a      	orrs	r2, r1
 800b56e:	431a      	orrs	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e026      	b.n	800b5c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	69d9      	ldr	r1, [r3, #28]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	4319      	orrs	r1, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	430b      	orrs	r3, r1
 800b58e:	431a      	orrs	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <FMC_SDRAM_Init+0xb4>)
 800b59a:	4013      	ands	r3, r2
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	6851      	ldr	r1, [r2, #4]
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	6892      	ldr	r2, [r2, #8]
 800b5a4:	4311      	orrs	r1, r2
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	68d2      	ldr	r2, [r2, #12]
 800b5aa:	4311      	orrs	r1, r2
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	6912      	ldr	r2, [r2, #16]
 800b5b0:	4311      	orrs	r1, r2
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	6952      	ldr	r2, [r2, #20]
 800b5b6:	4311      	orrs	r1, r2
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	6992      	ldr	r2, [r2, #24]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	ffff8000 	.word	0xffff8000

0800b5d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d128      	bne.n	800b63c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	1e59      	subs	r1, r3, #1
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	011b      	lsls	r3, r3, #4
 800b600:	4319      	orrs	r1, r3
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	3b01      	subs	r3, #1
 800b608:	021b      	lsls	r3, r3, #8
 800b60a:	4319      	orrs	r1, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	3b01      	subs	r3, #1
 800b612:	031b      	lsls	r3, r3, #12
 800b614:	4319      	orrs	r1, r3
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	041b      	lsls	r3, r3, #16
 800b61e:	4319      	orrs	r1, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	3b01      	subs	r3, #1
 800b626:	051b      	lsls	r3, r3, #20
 800b628:	4319      	orrs	r1, r3
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	3b01      	subs	r3, #1
 800b630:	061b      	lsls	r3, r3, #24
 800b632:	430b      	orrs	r3, r1
 800b634:	431a      	orrs	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	609a      	str	r2, [r3, #8]
 800b63a:	e02d      	b.n	800b698 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	689a      	ldr	r2, [r3, #8]
 800b640:	4b19      	ldr	r3, [pc, #100]	; (800b6a8 <FMC_SDRAM_Timing_Init+0xd0>)
 800b642:	4013      	ands	r3, r2
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	68d2      	ldr	r2, [r2, #12]
 800b648:	3a01      	subs	r2, #1
 800b64a:	0311      	lsls	r1, r2, #12
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	6952      	ldr	r2, [r2, #20]
 800b650:	3a01      	subs	r2, #1
 800b652:	0512      	lsls	r2, r2, #20
 800b654:	430a      	orrs	r2, r1
 800b656:	431a      	orrs	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	1e59      	subs	r1, r3, #1
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	3b01      	subs	r3, #1
 800b670:	011b      	lsls	r3, r3, #4
 800b672:	4319      	orrs	r1, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	3b01      	subs	r3, #1
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	4319      	orrs	r1, r3
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	3b01      	subs	r3, #1
 800b684:	041b      	lsls	r3, r3, #16
 800b686:	4319      	orrs	r1, r3
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	061b      	lsls	r3, r3, #24
 800b690:	430b      	orrs	r3, r1
 800b692:	431a      	orrs	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	ff0f0fff 	.word	0xff0f0fff

0800b6ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	f107 001c 	add.w	r0, r7, #28
 800b6ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d120      	bne.n	800b706 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68da      	ldr	r2, [r3, #12]
 800b6d4:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <USB_CoreInit+0xd4>)
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d105      	bne.n	800b6fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 faac 	bl	800bc58 <USB_CoreReset>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
 800b704:	e01a      	b.n	800b73c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 faa0 	bl	800bc58 <USB_CoreReset>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	639a      	str	r2, [r3, #56]	; 0x38
 800b72e:	e005      	b.n	800b73c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d116      	bne.n	800b770 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b746:	b29a      	uxth	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b750:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <USB_CoreInit+0xd8>)
 800b752:	4313      	orrs	r3, r2
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f043 0206 	orr.w	r2, r3, #6
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f043 0220 	orr.w	r2, r3, #32
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b77c:	b004      	add	sp, #16
 800b77e:	4770      	bx	lr
 800b780:	ffbdffbf 	.word	0xffbdffbf
 800b784:	03ee0000 	.word	0x03ee0000

0800b788 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f023 0201 	bic.w	r2, r3, #1
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d115      	bne.n	800b7f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f7f6 ff87 	bl	80026ec <HAL_Delay>
      ms++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 fa29 	bl	800bc3c <USB_GetMode>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d01e      	beq.n	800b82e <USB_SetCurrentMode+0x84>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b31      	cmp	r3, #49	; 0x31
 800b7f4:	d9f0      	bls.n	800b7d8 <USB_SetCurrentMode+0x2e>
 800b7f6:	e01a      	b.n	800b82e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7f8:	78fb      	ldrb	r3, [r7, #3]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d115      	bne.n	800b82a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b80a:	2001      	movs	r0, #1
 800b80c:	f7f6 ff6e 	bl	80026ec <HAL_Delay>
      ms++;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3301      	adds	r3, #1
 800b814:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa10 	bl	800bc3c <USB_GetMode>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <USB_SetCurrentMode+0x84>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b31      	cmp	r3, #49	; 0x31
 800b826:	d9f0      	bls.n	800b80a <USB_SetCurrentMode+0x60>
 800b828:	e001      	b.n	800b82e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e005      	b.n	800b83a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b32      	cmp	r3, #50	; 0x32
 800b832:	d101      	bne.n	800b838 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b844:	b084      	sub	sp, #16
 800b846:	b580      	push	{r7, lr}
 800b848:	b086      	sub	sp, #24
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b85e:	2300      	movs	r3, #0
 800b860:	613b      	str	r3, [r7, #16]
 800b862:	e009      	b.n	800b878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	3340      	adds	r3, #64	; 0x40
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	2200      	movs	r2, #0
 800b870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	3301      	adds	r3, #1
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	2b0e      	cmp	r3, #14
 800b87c:	d9f2      	bls.n	800b864 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11c      	bne.n	800b8be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b892:	f043 0302 	orr.w	r3, r3, #2
 800b896:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	e005      	b.n	800b8ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8dc:	4619      	mov	r1, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	680b      	ldr	r3, [r1, #0]
 800b8e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d10c      	bne.n	800b90a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d104      	bne.n	800b900 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f965 	bl	800bbc8 <USB_SetDevSpeed>
 800b8fe:	e008      	b.n	800b912 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b900:	2101      	movs	r1, #1
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f960 	bl	800bbc8 <USB_SetDevSpeed>
 800b908:	e003      	b.n	800b912 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b90a:	2103      	movs	r1, #3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f95b 	bl	800bbc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b912:	2110      	movs	r1, #16
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f8f3 	bl	800bb00 <USB_FlushTxFifo>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f91f 	bl	800bb68 <USB_FlushRxFifo>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b93a:	461a      	mov	r2, r3
 800b93c:	2300      	movs	r3, #0
 800b93e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	461a      	mov	r2, r3
 800b948:	2300      	movs	r3, #0
 800b94a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b952:	461a      	mov	r2, r3
 800b954:	2300      	movs	r3, #0
 800b956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b958:	2300      	movs	r3, #0
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	e043      	b.n	800b9e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	015a      	lsls	r2, r3, #5
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4413      	add	r3, r2
 800b966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b974:	d118      	bne.n	800b9a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b988:	461a      	mov	r2, r3
 800b98a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	e013      	b.n	800b9ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	e008      	b.n	800b9ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b9de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	613b      	str	r3, [r7, #16]
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d3b7      	bcc.n	800b95e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	613b      	str	r3, [r7, #16]
 800b9f2:	e043      	b.n	800ba7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba0a:	d118      	bne.n	800ba3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	e013      	b.n	800ba50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba34:	461a      	mov	r2, r3
 800ba36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	e008      	b.n	800ba50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	015a      	lsls	r2, r3, #5
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	613b      	str	r3, [r7, #16]
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d3b7      	bcc.n	800b9f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800baa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d105      	bne.n	800bab8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	f043 0210 	orr.w	r2, r3, #16
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <USB_DevInit+0x2b4>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	f043 0208 	orr.w	r2, r3, #8
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d105      	bne.n	800bae8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	699a      	ldr	r2, [r3, #24]
 800bae0:	4b06      	ldr	r3, [pc, #24]	; (800bafc <USB_DevInit+0x2b8>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baf4:	b004      	add	sp, #16
 800baf6:	4770      	bx	lr
 800baf8:	803c3800 	.word	0x803c3800
 800bafc:	40000004 	.word	0x40000004

0800bb00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4a13      	ldr	r2, [pc, #76]	; (800bb64 <USB_FlushTxFifo+0x64>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d901      	bls.n	800bb20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e01b      	b.n	800bb58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	daf2      	bge.n	800bb0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	019b      	lsls	r3, r3, #6
 800bb30:	f043 0220 	orr.w	r2, r3, #32
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <USB_FlushTxFifo+0x64>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d901      	bls.n	800bb4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e006      	b.n	800bb58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d0f0      	beq.n	800bb38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	00030d40 	.word	0x00030d40

0800bb68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3301      	adds	r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4a11      	ldr	r2, [pc, #68]	; (800bbc4 <USB_FlushRxFifo+0x5c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d901      	bls.n	800bb86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e018      	b.n	800bbb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	daf2      	bge.n	800bb74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2210      	movs	r2, #16
 800bb96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4a08      	ldr	r2, [pc, #32]	; (800bbc4 <USB_FlushRxFifo+0x5c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d901      	bls.n	800bbaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e006      	b.n	800bbb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f003 0310 	and.w	r3, r3, #16
 800bbb2:	2b10      	cmp	r3, #16
 800bbb4:	d0f0      	beq.n	800bb98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr
 800bbc4:	00030d40 	.word	0x00030d40

0800bbc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	78fb      	ldrb	r3, [r7, #3]
 800bbe2:	68f9      	ldr	r1, [r7, #12]
 800bbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc28:	f043 0302 	orr.w	r3, r3, #2
 800bc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	f003 0301 	and.w	r3, r3, #1
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3301      	adds	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a13      	ldr	r2, [pc, #76]	; (800bcbc <USB_CoreReset+0x64>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d901      	bls.n	800bc76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e01b      	b.n	800bcae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	daf2      	bge.n	800bc64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f043 0201 	orr.w	r2, r3, #1
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	3301      	adds	r3, #1
 800bc92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4a09      	ldr	r2, [pc, #36]	; (800bcbc <USB_CoreReset+0x64>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d901      	bls.n	800bca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e006      	b.n	800bcae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d0f0      	beq.n	800bc8e <USB_CoreReset+0x36>

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	00030d40 	.word	0x00030d40

0800bcc0 <__NVIC_SetPriority>:
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	db0a      	blt.n	800bcea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	490c      	ldr	r1, [pc, #48]	; (800bd0c <__NVIC_SetPriority+0x4c>)
 800bcda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcde:	0112      	lsls	r2, r2, #4
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	440b      	add	r3, r1
 800bce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bce8:	e00a      	b.n	800bd00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	4908      	ldr	r1, [pc, #32]	; (800bd10 <__NVIC_SetPriority+0x50>)
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	3b04      	subs	r3, #4
 800bcf8:	0112      	lsls	r2, r2, #4
 800bcfa:	b2d2      	uxtb	r2, r2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	761a      	strb	r2, [r3, #24]
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	e000e100 	.word	0xe000e100
 800bd10:	e000ed00 	.word	0xe000ed00

0800bd14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd18:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <SysTick_Handler+0x1c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd1c:	f001 fcd8 	bl	800d6d0 <xTaskGetSchedulerState>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d001      	beq.n	800bd2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd26:	f002 fabf 	bl	800e2a8 <xPortSysTickHandler>
  }
}
 800bd2a:	bf00      	nop
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	e000e010 	.word	0xe000e010

0800bd34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd38:	2100      	movs	r1, #0
 800bd3a:	f06f 0004 	mvn.w	r0, #4
 800bd3e:	f7ff ffbf 	bl	800bcc0 <__NVIC_SetPriority>
#endif
}
 800bd42:	bf00      	nop
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd4e:	f3ef 8305 	mrs	r3, IPSR
 800bd52:	603b      	str	r3, [r7, #0]
  return(result);
 800bd54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd5a:	f06f 0305 	mvn.w	r3, #5
 800bd5e:	607b      	str	r3, [r7, #4]
 800bd60:	e00c      	b.n	800bd7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd62:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <osKernelInitialize+0x44>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d105      	bne.n	800bd76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd6a:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <osKernelInitialize+0x44>)
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	607b      	str	r3, [r7, #4]
 800bd74:	e002      	b.n	800bd7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd7c:	687b      	ldr	r3, [r7, #4]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	2400117c 	.word	0x2400117c

0800bd90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd96:	f3ef 8305 	mrs	r3, IPSR
 800bd9a:	603b      	str	r3, [r7, #0]
  return(result);
 800bd9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d003      	beq.n	800bdaa <osKernelStart+0x1a>
    stat = osErrorISR;
 800bda2:	f06f 0305 	mvn.w	r3, #5
 800bda6:	607b      	str	r3, [r7, #4]
 800bda8:	e010      	b.n	800bdcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdaa:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <osKernelStart+0x48>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d109      	bne.n	800bdc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bdb2:	f7ff ffbf 	bl	800bd34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdb6:	4b08      	ldr	r3, [pc, #32]	; (800bdd8 <osKernelStart+0x48>)
 800bdb8:	2202      	movs	r2, #2
 800bdba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bdbc:	f001 f82c 	bl	800ce18 <vTaskStartScheduler>
      stat = osOK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	607b      	str	r3, [r7, #4]
 800bdc4:	e002      	b.n	800bdcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdcc:	687b      	ldr	r3, [r7, #4]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2400117c 	.word	0x2400117c

0800bddc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08e      	sub	sp, #56	; 0x38
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdec:	f3ef 8305 	mrs	r3, IPSR
 800bdf0:	617b      	str	r3, [r7, #20]
  return(result);
 800bdf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d17e      	bne.n	800bef6 <osThreadNew+0x11a>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d07b      	beq.n	800bef6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bdfe:	2380      	movs	r3, #128	; 0x80
 800be00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be02:	2318      	movs	r3, #24
 800be04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800be0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d045      	beq.n	800bea2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <osThreadNew+0x48>
        name = attr->name;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d008      	beq.n	800be4a <osThreadNew+0x6e>
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2b38      	cmp	r3, #56	; 0x38
 800be3c:	d805      	bhi.n	800be4a <osThreadNew+0x6e>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <osThreadNew+0x72>
        return (NULL);
 800be4a:	2300      	movs	r3, #0
 800be4c:	e054      	b.n	800bef8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d003      	beq.n	800be5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	089b      	lsrs	r3, r3, #2
 800be5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00e      	beq.n	800be84 <osThreadNew+0xa8>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	2bbb      	cmp	r3, #187	; 0xbb
 800be6c:	d90a      	bls.n	800be84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <osThreadNew+0xa8>
        mem = 1;
 800be7e:	2301      	movs	r3, #1
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	e010      	b.n	800bea6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10c      	bne.n	800bea6 <osThreadNew+0xca>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d108      	bne.n	800bea6 <osThreadNew+0xca>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <osThreadNew+0xca>
          mem = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61bb      	str	r3, [r7, #24]
 800bea0:	e001      	b.n	800bea6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d110      	bne.n	800bece <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800beb4:	9202      	str	r2, [sp, #8]
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6a3a      	ldr	r2, [r7, #32]
 800bec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 fdf0 	bl	800caa8 <xTaskCreateStatic>
 800bec8:	4603      	mov	r3, r0
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	e013      	b.n	800bef6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d110      	bne.n	800bef6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	f107 0310 	add.w	r3, r7, #16
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 fe3b 	bl	800cb62 <xTaskCreate>
 800beec:	4603      	mov	r3, r0
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d001      	beq.n	800bef6 <osThreadNew+0x11a>
            hTask = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bef6:	693b      	ldr	r3, [r7, #16]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3728      	adds	r7, #40	; 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4a07      	ldr	r2, [pc, #28]	; (800bf2c <vApplicationGetIdleTaskMemory+0x2c>)
 800bf10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <vApplicationGetIdleTaskMemory+0x30>)
 800bf16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2280      	movs	r2, #128	; 0x80
 800bf1c:	601a      	str	r2, [r3, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	24001180 	.word	0x24001180
 800bf30:	2400123c 	.word	0x2400123c

0800bf34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <vApplicationGetTimerTaskMemory+0x30>)
 800bf4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	2400143c 	.word	0x2400143c
 800bf64:	240014f8 	.word	0x240014f8

0800bf68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f103 0208 	add.w	r2, r3, #8
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f103 0208 	add.w	r2, r3, #8
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f103 0208 	add.w	r2, r3, #8
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfb6:	bf00      	nop
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	601a      	str	r2, [r3, #0]
}
 800bffe:	bf00      	nop
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c00a:	b480      	push	{r7}
 800c00c:	b085      	sub	sp, #20
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c020:	d103      	bne.n	800c02a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	e00c      	b.n	800c044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3308      	adds	r3, #8
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	e002      	b.n	800c038 <vListInsert+0x2e>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	429a      	cmp	r2, r3
 800c042:	d2f6      	bcs.n	800c032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	601a      	str	r2, [r3, #0]
}
 800c070:	bf00      	nop
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6892      	ldr	r2, [r2, #8]
 800c092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	6852      	ldr	r2, [r2, #4]
 800c09c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d103      	bne.n	800c0b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	1e5a      	subs	r2, r3, #1
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10a      	bne.n	800c0fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0f6:	bf00      	nop
 800c0f8:	e7fe      	b.n	800c0f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c0fa:	f002 f843 	bl	800e184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c10a:	fb01 f303 	mul.w	r3, r1, r3
 800c10e:	441a      	add	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	3b01      	subs	r3, #1
 800c12c:	68f9      	ldr	r1, [r7, #12]
 800c12e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c130:	fb01 f303 	mul.w	r3, r1, r3
 800c134:	441a      	add	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	22ff      	movs	r2, #255	; 0xff
 800c13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	22ff      	movs	r2, #255	; 0xff
 800c146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d114      	bne.n	800c17a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d01a      	beq.n	800c18e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3310      	adds	r3, #16
 800c15c:	4618      	mov	r0, r3
 800c15e:	f001 f8f5 	bl	800d34c <xTaskRemoveFromEventList>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d012      	beq.n	800c18e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c168:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <xQueueGenericReset+0xcc>)
 800c16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c16e:	601a      	str	r2, [r3, #0]
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	e009      	b.n	800c18e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3310      	adds	r3, #16
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fef2 	bl	800bf68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3324      	adds	r3, #36	; 0x24
 800c188:	4618      	mov	r0, r3
 800c18a:	f7ff feed 	bl	800bf68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c18e:	f002 f829 	bl	800e1e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c192:	2301      	movs	r3, #1
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	e000ed04 	.word	0xe000ed04

0800c1a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	; 0x38
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <xQueueGenericCreateStatic+0x52>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <xQueueGenericCreateStatic+0x56>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueGenericCreateStatic+0x58>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	623b      	str	r3, [r7, #32]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <xQueueGenericCreateStatic+0x7e>
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <xQueueGenericCreateStatic+0x82>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <xQueueGenericCreateStatic+0x84>
 800c222:	2300      	movs	r3, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	61fb      	str	r3, [r7, #28]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c23e:	2350      	movs	r3, #80	; 0x50
 800c240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	2b50      	cmp	r3, #80	; 0x50
 800c246:	d00a      	beq.n	800c25e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	61bb      	str	r3, [r7, #24]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c25e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00d      	beq.n	800c286 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 f805 	bl	800c290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c288:	4618      	mov	r0, r3
 800c28a:	3730      	adds	r7, #48	; 0x30
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d103      	bne.n	800c2ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	e002      	b.n	800c2b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2be:	2101      	movs	r1, #1
 800c2c0:	69b8      	ldr	r0, [r7, #24]
 800c2c2:	f7ff ff05 	bl	800c0d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	78fa      	ldrb	r2, [r7, #3]
 800c2ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2ce:	bf00      	nop
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08e      	sub	sp, #56	; 0x38
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xQueueGenericSend+0x32>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <xQueueGenericSend+0x40>
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <xQueueGenericSend+0x44>
 800c318:	2301      	movs	r3, #1
 800c31a:	e000      	b.n	800c31e <xQueueGenericSend+0x46>
 800c31c:	2300      	movs	r3, #0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <xQueueGenericSend+0x60>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d103      	bne.n	800c346 <xQueueGenericSend+0x6e>
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <xQueueGenericSend+0x72>
 800c346:	2301      	movs	r3, #1
 800c348:	e000      	b.n	800c34c <xQueueGenericSend+0x74>
 800c34a:	2300      	movs	r3, #0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xQueueGenericSend+0x8e>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	623b      	str	r3, [r7, #32]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c366:	f001 f9b3 	bl	800d6d0 <xTaskGetSchedulerState>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <xQueueGenericSend+0x9e>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <xQueueGenericSend+0xa2>
 800c376:	2301      	movs	r3, #1
 800c378:	e000      	b.n	800c37c <xQueueGenericSend+0xa4>
 800c37a:	2300      	movs	r3, #0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <xQueueGenericSend+0xbe>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	61fb      	str	r3, [r7, #28]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c396:	f001 fef5 	bl	800e184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d302      	bcc.n	800c3ac <xQueueGenericSend+0xd4>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d129      	bne.n	800c400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3b2:	f000 fa0b 	bl	800c7cc <prvCopyDataToQueue>
 800c3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d010      	beq.n	800c3e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	3324      	adds	r3, #36	; 0x24
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 ffc1 	bl	800d34c <xTaskRemoveFromEventList>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d013      	beq.n	800c3f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3d0:	4b3f      	ldr	r3, [pc, #252]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	e00a      	b.n	800c3f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3e8:	4b39      	ldr	r3, [pc, #228]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3f8:	f001 fef4 	bl	800e1e4 <vPortExitCritical>
				return pdPASS;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e063      	b.n	800c4c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d103      	bne.n	800c40e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c406:	f001 feed 	bl	800e1e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e05c      	b.n	800c4c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c410:	2b00      	cmp	r3, #0
 800c412:	d106      	bne.n	800c422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c414:	f107 0314 	add.w	r3, r7, #20
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 fffb 	bl	800d414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c41e:	2301      	movs	r3, #1
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c422:	f001 fedf 	bl	800e1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c426:	f000 fd67 	bl	800cef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c42a:	f001 feab 	bl	800e184 <vPortEnterCritical>
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c434:	b25b      	sxtb	r3, r3
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c43a:	d103      	bne.n	800c444 <xQueueGenericSend+0x16c>
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c44a:	b25b      	sxtb	r3, r3
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c450:	d103      	bne.n	800c45a <xQueueGenericSend+0x182>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c45a:	f001 fec3 	bl	800e1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c45e:	1d3a      	adds	r2, r7, #4
 800c460:	f107 0314 	add.w	r3, r7, #20
 800c464:	4611      	mov	r1, r2
 800c466:	4618      	mov	r0, r3
 800c468:	f000 ffea 	bl	800d440 <xTaskCheckForTimeOut>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d124      	bne.n	800c4bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c474:	f000 faa2 	bl	800c9bc <prvIsQueueFull>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d018      	beq.n	800c4b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	3310      	adds	r3, #16
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f000 ff10 	bl	800d2ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c48e:	f000 fa2d 	bl	800c8ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c492:	f000 fd3f 	bl	800cf14 <xTaskResumeAll>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f47f af7c 	bne.w	800c396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <xQueueGenericSend+0x1f8>)
 800c4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	e772      	b.n	800c396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b2:	f000 fa1b 	bl	800c8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4b6:	f000 fd2d 	bl	800cf14 <xTaskResumeAll>
 800c4ba:	e76c      	b.n	800c396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4be:	f000 fa15 	bl	800c8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4c2:	f000 fd27 	bl	800cf14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3738      	adds	r7, #56	; 0x38
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b090      	sub	sp, #64	; 0x40
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <xQueueGenericSendFromISR+0x3c>
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <xQueueGenericSendFromISR+0x40>
 800c510:	2301      	movs	r3, #1
 800c512:	e000      	b.n	800c516 <xQueueGenericSendFromISR+0x42>
 800c514:	2300      	movs	r3, #0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d103      	bne.n	800c53e <xQueueGenericSendFromISR+0x6a>
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <xQueueGenericSendFromISR+0x6e>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <xQueueGenericSendFromISR+0x70>
 800c542:	2300      	movs	r3, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	623b      	str	r3, [r7, #32]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c55e:	f001 fef3 	bl	800e348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c562:	f3ef 8211 	mrs	r2, BASEPRI
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	61fa      	str	r2, [r7, #28]
 800c578:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c57a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	429a      	cmp	r2, r3
 800c588:	d302      	bcc.n	800c590 <xQueueGenericSendFromISR+0xbc>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d12f      	bne.n	800c5f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a6:	f000 f911 	bl	800c7cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5b2:	d112      	bne.n	800c5da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	3324      	adds	r3, #36	; 0x24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fec3 	bl	800d34c <xTaskRemoveFromEventList>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00e      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e007      	b.n	800c5ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5de:	3301      	adds	r3, #1
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	b25a      	sxtb	r2, r3
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c5ee:	e001      	b.n	800c5f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c602:	4618      	mov	r0, r3
 800c604:	3740      	adds	r7, #64	; 0x40
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08c      	sub	sp, #48	; 0x30
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c618:	2300      	movs	r3, #0
 800c61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <xQueueReceive+0x30>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	623b      	str	r3, [r7, #32]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <xQueueReceive+0x3e>
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <xQueueReceive+0x42>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e000      	b.n	800c650 <xQueueReceive+0x44>
 800c64e:	2300      	movs	r3, #0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <xQueueReceive+0x5e>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61fb      	str	r3, [r7, #28]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c66a:	f001 f831 	bl	800d6d0 <xTaskGetSchedulerState>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <xQueueReceive+0x6e>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <xQueueReceive+0x72>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueReceive+0x74>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xQueueReceive+0x8e>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	61bb      	str	r3, [r7, #24]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c69a:	f001 fd73 	bl	800e184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d01f      	beq.n	800c6ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ae:	f000 f8f7 	bl	800c8a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	1e5a      	subs	r2, r3, #1
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00f      	beq.n	800c6e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	3310      	adds	r3, #16
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 fe40 	bl	800d34c <xTaskRemoveFromEventList>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6d2:	4b3d      	ldr	r3, [pc, #244]	; (800c7c8 <xQueueReceive+0x1bc>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6e2:	f001 fd7f 	bl	800e1e4 <vPortExitCritical>
				return pdPASS;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e069      	b.n	800c7be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d103      	bne.n	800c6f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6f0:	f001 fd78 	bl	800e1e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e062      	b.n	800c7be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	4618      	mov	r0, r3
 800c704:	f000 fe86 	bl	800d414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c708:	2301      	movs	r3, #1
 800c70a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c70c:	f001 fd6a 	bl	800e1e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c710:	f000 fbf2 	bl	800cef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c714:	f001 fd36 	bl	800e184 <vPortEnterCritical>
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c71e:	b25b      	sxtb	r3, r3
 800c720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c724:	d103      	bne.n	800c72e <xQueueReceive+0x122>
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c734:	b25b      	sxtb	r3, r3
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c73a:	d103      	bne.n	800c744 <xQueueReceive+0x138>
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c744:	f001 fd4e 	bl	800e1e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c748:	1d3a      	adds	r2, r7, #4
 800c74a:	f107 0310 	add.w	r3, r7, #16
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fe75 	bl	800d440 <xTaskCheckForTimeOut>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d123      	bne.n	800c7a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75e:	f000 f917 	bl	800c990 <prvIsQueueEmpty>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d017      	beq.n	800c798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	3324      	adds	r3, #36	; 0x24
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fd9b 	bl	800d2ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c778:	f000 f8b8 	bl	800c8ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c77c:	f000 fbca 	bl	800cf14 <xTaskResumeAll>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d189      	bne.n	800c69a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c786:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <xQueueReceive+0x1bc>)
 800c788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	e780      	b.n	800c69a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79a:	f000 f8a7 	bl	800c8ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c79e:	f000 fbb9 	bl	800cf14 <xTaskResumeAll>
 800c7a2:	e77a      	b.n	800c69a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a6:	f000 f8a1 	bl	800c8ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7aa:	f000 fbb3 	bl	800cf14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b0:	f000 f8ee 	bl	800c990 <prvIsQueueEmpty>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f43f af6f 	beq.w	800c69a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3730      	adds	r7, #48	; 0x30
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	e000ed04 	.word	0xe000ed04

0800c7cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10d      	bne.n	800c806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d14d      	bne.n	800c88e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f000 ff88 	bl	800d70c <xTaskPriorityDisinherit>
 800c7fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	e043      	b.n	800c88e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d119      	bne.n	800c840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6858      	ldr	r0, [r3, #4]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c814:	461a      	mov	r2, r3
 800c816:	68b9      	ldr	r1, [r7, #8]
 800c818:	f001 ffe6 	bl	800e7e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	429a      	cmp	r2, r3
 800c834:	d32b      	bcc.n	800c88e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	605a      	str	r2, [r3, #4]
 800c83e:	e026      	b.n	800c88e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	68d8      	ldr	r0, [r3, #12]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c848:	461a      	mov	r2, r3
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	f001 ffcc 	bl	800e7e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c858:	425b      	negs	r3, r3
 800c85a:	441a      	add	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d207      	bcs.n	800c87c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	425b      	negs	r3, r3
 800c876:	441a      	add	r2, r3
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d105      	bne.n	800c88e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c896:	697b      	ldr	r3, [r7, #20]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d018      	beq.n	800c8e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	441a      	add	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68da      	ldr	r2, [r3, #12]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d303      	bcc.n	800c8d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68d9      	ldr	r1, [r3, #12]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f001 ff82 	bl	800e7e8 <memcpy>
	}
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8f4:	f001 fc46 	bl	800e184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c900:	e011      	b.n	800c926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	d012      	beq.n	800c930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3324      	adds	r3, #36	; 0x24
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 fd1c 	bl	800d34c <xTaskRemoveFromEventList>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c91a:	f000 fdf3 	bl	800d504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
 800c920:	3b01      	subs	r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dce9      	bgt.n	800c902 <prvUnlockQueue+0x16>
 800c92e:	e000      	b.n	800c932 <prvUnlockQueue+0x46>
					break;
 800c930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	22ff      	movs	r2, #255	; 0xff
 800c936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c93a:	f001 fc53 	bl	800e1e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c93e:	f001 fc21 	bl	800e184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c94a:	e011      	b.n	800c970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d012      	beq.n	800c97a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3310      	adds	r3, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f000 fcf7 	bl	800d34c <xTaskRemoveFromEventList>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c964:	f000 fdce 	bl	800d504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dce9      	bgt.n	800c94c <prvUnlockQueue+0x60>
 800c978:	e000      	b.n	800c97c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c97a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	22ff      	movs	r2, #255	; 0xff
 800c980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c984:	f001 fc2e 	bl	800e1e4 <vPortExitCritical>
}
 800c988:	bf00      	nop
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c998:	f001 fbf4 	bl	800e184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e001      	b.n	800c9ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f001 fc19 	bl	800e1e4 <vPortExitCritical>

	return xReturn;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9c4:	f001 fbde 	bl	800e184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d102      	bne.n	800c9da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
 800c9d8:	e001      	b.n	800c9de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9de:	f001 fc01 	bl	800e1e4 <vPortExitCritical>

	return xReturn;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	e014      	b.n	800ca26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9fc:	4a0f      	ldr	r2, [pc, #60]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca08:	490c      	ldr	r1, [pc, #48]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca12:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <vQueueAddToRegistry+0x50>)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	4413      	add	r3, r2
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca1e:	e006      	b.n	800ca2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3301      	adds	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b07      	cmp	r3, #7
 800ca2a:	d9e7      	bls.n	800c9fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca2c:	bf00      	nop
 800ca2e:	bf00      	nop
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	240018f8 	.word	0x240018f8

0800ca40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca50:	f001 fb98 	bl	800e184 <vPortEnterCritical>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca5a:	b25b      	sxtb	r3, r3
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca60:	d103      	bne.n	800ca6a <vQueueWaitForMessageRestricted+0x2a>
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca70:	b25b      	sxtb	r3, r3
 800ca72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca76:	d103      	bne.n	800ca80 <vQueueWaitForMessageRestricted+0x40>
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca80:	f001 fbb0 	bl	800e1e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d106      	bne.n	800ca9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	3324      	adds	r3, #36	; 0x24
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	68b9      	ldr	r1, [r7, #8]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fc2d 	bl	800d2f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f7ff ff26 	bl	800c8ec <prvUnlockQueue>
	}
 800caa0:	bf00      	nop
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	; 0x38
 800caac:	af04      	add	r7, sp, #16
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	623b      	str	r3, [r7, #32]
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <xTaskCreateStatic+0x46>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	61fb      	str	r3, [r7, #28]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800caee:	23bc      	movs	r3, #188	; 0xbc
 800caf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2bbc      	cmp	r3, #188	; 0xbc
 800caf6:	d00a      	beq.n	800cb0e <xTaskCreateStatic+0x66>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	61bb      	str	r3, [r7, #24]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d01e      	beq.n	800cb54 <xTaskCreateStatic+0xac>
 800cb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01b      	beq.n	800cb54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	2202      	movs	r2, #2
 800cb2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	9302      	str	r3, [sp, #8]
 800cb36:	f107 0314 	add.w	r3, r7, #20
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	68b9      	ldr	r1, [r7, #8]
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 f850 	bl	800cbec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb4e:	f000 f8f3 	bl	800cd38 <prvAddNewTaskToReadyList>
 800cb52:	e001      	b.n	800cb58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb58:	697b      	ldr	r3, [r7, #20]
	}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3728      	adds	r7, #40	; 0x28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b08c      	sub	sp, #48	; 0x30
 800cb66:	af04      	add	r7, sp, #16
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	603b      	str	r3, [r7, #0]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb72:	88fb      	ldrh	r3, [r7, #6]
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f001 fc26 	bl	800e3c8 <pvPortMalloc>
 800cb7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb84:	20bc      	movs	r0, #188	; 0xbc
 800cb86:	f001 fc1f 	bl	800e3c8 <pvPortMalloc>
 800cb8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	631a      	str	r2, [r3, #48]	; 0x30
 800cb98:	e005      	b.n	800cba6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb9a:	6978      	ldr	r0, [r7, #20]
 800cb9c:	f001 fce0 	bl	800e560 <vPortFree>
 800cba0:	e001      	b.n	800cba6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d017      	beq.n	800cbdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbb4:	88fa      	ldrh	r2, [r7, #6]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9303      	str	r3, [sp, #12]
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	9302      	str	r3, [sp, #8]
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	68b9      	ldr	r1, [r7, #8]
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f000 f80e 	bl	800cbec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbd0:	69f8      	ldr	r0, [r7, #28]
 800cbd2:	f000 f8b1 	bl	800cd38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	61bb      	str	r3, [r7, #24]
 800cbda:	e002      	b.n	800cbe2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbe0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbe2:	69bb      	ldr	r3, [r7, #24]
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3720      	adds	r7, #32
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	461a      	mov	r2, r3
 800cc04:	21a5      	movs	r1, #165	; 0xa5
 800cc06:	f001 fdfd 	bl	800e804 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cc14:	440b      	add	r3, r1
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	4413      	add	r3, r2
 800cc1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	f023 0307 	bic.w	r3, r3, #7
 800cc22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	617b      	str	r3, [r7, #20]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d01f      	beq.n	800cc8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
 800cc4e:	e012      	b.n	800cc76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	4413      	add	r3, r2
 800cc56:	7819      	ldrb	r1, [r3, #0]
 800cc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	3334      	adds	r3, #52	; 0x34
 800cc60:	460a      	mov	r2, r1
 800cc62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	4413      	add	r3, r2
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	3301      	adds	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2b0f      	cmp	r3, #15
 800cc7a:	d9e9      	bls.n	800cc50 <prvInitialiseNewTask+0x64>
 800cc7c:	e000      	b.n	800cc80 <prvInitialiseNewTask+0x94>
			{
				break;
 800cc7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc88:	e003      	b.n	800cc92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	2b37      	cmp	r3, #55	; 0x37
 800cc96:	d901      	bls.n	800cc9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc98:	2337      	movs	r3, #55	; 0x37
 800cc9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	2200      	movs	r2, #0
 800ccac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff f978 	bl	800bfa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	3318      	adds	r3, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7ff f973 	bl	800bfa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	3354      	adds	r3, #84	; 0x54
 800ccec:	2260      	movs	r2, #96	; 0x60
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f001 fd87 	bl	800e804 <memset>
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	4a0c      	ldr	r2, [pc, #48]	; (800cd2c <prvInitialiseNewTask+0x140>)
 800ccfa:	659a      	str	r2, [r3, #88]	; 0x58
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	4a0c      	ldr	r2, [pc, #48]	; (800cd30 <prvInitialiseNewTask+0x144>)
 800cd00:	65da      	str	r2, [r3, #92]	; 0x5c
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	4a0b      	ldr	r2, [pc, #44]	; (800cd34 <prvInitialiseNewTask+0x148>)
 800cd06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	69b8      	ldr	r0, [r7, #24]
 800cd0e:	f001 f90d 	bl	800df2c <pxPortInitialiseStack>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd24:	bf00      	nop
 800cd26:	3720      	adds	r7, #32
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	0800ea50 	.word	0x0800ea50
 800cd30:	0800ea70 	.word	0x0800ea70
 800cd34:	0800ea30 	.word	0x0800ea30

0800cd38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd40:	f001 fa20 	bl	800e184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd44:	4b2d      	ldr	r3, [pc, #180]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	4a2c      	ldr	r2, [pc, #176]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd4e:	4b2c      	ldr	r3, [pc, #176]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d109      	bne.n	800cd6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd56:	4a2a      	ldr	r2, [pc, #168]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd5c:	4b27      	ldr	r3, [pc, #156]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d110      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd64:	f000 fbf2 	bl	800d54c <prvInitialiseTaskLists>
 800cd68:	e00d      	b.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd6a:	4b26      	ldr	r3, [pc, #152]	; (800ce04 <prvAddNewTaskToReadyList+0xcc>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d109      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd72:	4b23      	ldr	r3, [pc, #140]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d802      	bhi.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd80:	4a1f      	ldr	r2, [pc, #124]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd90:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <prvAddNewTaskToReadyList+0xd4>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d903      	bls.n	800cdac <prvAddNewTaskToReadyList+0x74>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	4a18      	ldr	r2, [pc, #96]	; (800ce0c <prvAddNewTaskToReadyList+0xd4>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4a15      	ldr	r2, [pc, #84]	; (800ce10 <prvAddNewTaskToReadyList+0xd8>)
 800cdba:	441a      	add	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	f7ff f8fd 	bl	800bfc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdc8:	f001 fa0c 	bl	800e1e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <prvAddNewTaskToReadyList+0xcc>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00e      	beq.n	800cdf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d207      	bcs.n	800cdf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cde2:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <prvAddNewTaskToReadyList+0xdc>)
 800cde4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf2:	bf00      	nop
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	24001e0c 	.word	0x24001e0c
 800ce00:	24001938 	.word	0x24001938
 800ce04:	24001e18 	.word	0x24001e18
 800ce08:	24001e28 	.word	0x24001e28
 800ce0c:	24001e14 	.word	0x24001e14
 800ce10:	2400193c 	.word	0x2400193c
 800ce14:	e000ed04 	.word	0xe000ed04

0800ce18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08a      	sub	sp, #40	; 0x28
 800ce1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce26:	463a      	mov	r2, r7
 800ce28:	1d39      	adds	r1, r7, #4
 800ce2a:	f107 0308 	add.w	r3, r7, #8
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff f866 	bl	800bf00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	9202      	str	r2, [sp, #8]
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	2300      	movs	r3, #0
 800ce44:	460a      	mov	r2, r1
 800ce46:	4924      	ldr	r1, [pc, #144]	; (800ced8 <vTaskStartScheduler+0xc0>)
 800ce48:	4824      	ldr	r0, [pc, #144]	; (800cedc <vTaskStartScheduler+0xc4>)
 800ce4a:	f7ff fe2d 	bl	800caa8 <xTaskCreateStatic>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4a23      	ldr	r2, [pc, #140]	; (800cee0 <vTaskStartScheduler+0xc8>)
 800ce52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce54:	4b22      	ldr	r3, [pc, #136]	; (800cee0 <vTaskStartScheduler+0xc8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	e001      	b.n	800ce66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d102      	bne.n	800ce72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce6c:	f000 fd10 	bl	800d890 <xTimerCreateTimerTask>
 800ce70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d11b      	bne.n	800ceb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	613b      	str	r3, [r7, #16]
}
 800ce8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce8c:	4b15      	ldr	r3, [pc, #84]	; (800cee4 <vTaskStartScheduler+0xcc>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3354      	adds	r3, #84	; 0x54
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <vTaskStartScheduler+0xd0>)
 800ce94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce96:	4b15      	ldr	r3, [pc, #84]	; (800ceec <vTaskStartScheduler+0xd4>)
 800ce98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce9e:	4b14      	ldr	r3, [pc, #80]	; (800cef0 <vTaskStartScheduler+0xd8>)
 800cea0:	2201      	movs	r2, #1
 800cea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cea4:	4b13      	ldr	r3, [pc, #76]	; (800cef4 <vTaskStartScheduler+0xdc>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ceaa:	f001 f8c9 	bl	800e040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ceae:	e00e      	b.n	800cece <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceb6:	d10a      	bne.n	800cece <vTaskStartScheduler+0xb6>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	60fb      	str	r3, [r7, #12]
}
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <vTaskStartScheduler+0xb4>
}
 800cece:	bf00      	nop
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	0800e9bc 	.word	0x0800e9bc
 800cedc:	0800d51d 	.word	0x0800d51d
 800cee0:	24001e30 	.word	0x24001e30
 800cee4:	24001938 	.word	0x24001938
 800cee8:	24000014 	.word	0x24000014
 800ceec:	24001e2c 	.word	0x24001e2c
 800cef0:	24001e18 	.word	0x24001e18
 800cef4:	24001e10 	.word	0x24001e10

0800cef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cef8:	b480      	push	{r7}
 800cefa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cefc:	4b04      	ldr	r3, [pc, #16]	; (800cf10 <vTaskSuspendAll+0x18>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3301      	adds	r3, #1
 800cf02:	4a03      	ldr	r2, [pc, #12]	; (800cf10 <vTaskSuspendAll+0x18>)
 800cf04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf06:	bf00      	nop
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	24001e34 	.word	0x24001e34

0800cf14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf22:	4b42      	ldr	r3, [pc, #264]	; (800d02c <xTaskResumeAll+0x118>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <xTaskResumeAll+0x2c>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	603b      	str	r3, [r7, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf40:	f001 f920 	bl	800e184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf44:	4b39      	ldr	r3, [pc, #228]	; (800d02c <xTaskResumeAll+0x118>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	4a38      	ldr	r2, [pc, #224]	; (800d02c <xTaskResumeAll+0x118>)
 800cf4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf4e:	4b37      	ldr	r3, [pc, #220]	; (800d02c <xTaskResumeAll+0x118>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d162      	bne.n	800d01c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf56:	4b36      	ldr	r3, [pc, #216]	; (800d030 <xTaskResumeAll+0x11c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d05e      	beq.n	800d01c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf5e:	e02f      	b.n	800cfc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf60:	4b34      	ldr	r3, [pc, #208]	; (800d034 <xTaskResumeAll+0x120>)
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	3318      	adds	r3, #24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff f885 	bl	800c07c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3304      	adds	r3, #4
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff f880 	bl	800c07c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf80:	4b2d      	ldr	r3, [pc, #180]	; (800d038 <xTaskResumeAll+0x124>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d903      	bls.n	800cf90 <xTaskResumeAll+0x7c>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8c:	4a2a      	ldr	r2, [pc, #168]	; (800d038 <xTaskResumeAll+0x124>)
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf94:	4613      	mov	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4a27      	ldr	r2, [pc, #156]	; (800d03c <xTaskResumeAll+0x128>)
 800cf9e:	441a      	add	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	f7ff f80b 	bl	800bfc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb0:	4b23      	ldr	r3, [pc, #140]	; (800d040 <xTaskResumeAll+0x12c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d302      	bcc.n	800cfc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cfba:	4b22      	ldr	r3, [pc, #136]	; (800d044 <xTaskResumeAll+0x130>)
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfc0:	4b1c      	ldr	r3, [pc, #112]	; (800d034 <xTaskResumeAll+0x120>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1cb      	bne.n	800cf60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cfce:	f000 fb5f 	bl	800d690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cfd2:	4b1d      	ldr	r3, [pc, #116]	; (800d048 <xTaskResumeAll+0x134>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d010      	beq.n	800d000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cfde:	f000 f847 	bl	800d070 <xTaskIncrementTick>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cfe8:	4b16      	ldr	r3, [pc, #88]	; (800d044 <xTaskResumeAll+0x130>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f1      	bne.n	800cfde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cffa:	4b13      	ldr	r3, [pc, #76]	; (800d048 <xTaskResumeAll+0x134>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d000:	4b10      	ldr	r3, [pc, #64]	; (800d044 <xTaskResumeAll+0x130>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d008:	2301      	movs	r3, #1
 800d00a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d00c:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <xTaskResumeAll+0x138>)
 800d00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d01c:	f001 f8e2 	bl	800e1e4 <vPortExitCritical>

	return xAlreadyYielded;
 800d020:	68bb      	ldr	r3, [r7, #8]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	24001e34 	.word	0x24001e34
 800d030:	24001e0c 	.word	0x24001e0c
 800d034:	24001dcc 	.word	0x24001dcc
 800d038:	24001e14 	.word	0x24001e14
 800d03c:	2400193c 	.word	0x2400193c
 800d040:	24001938 	.word	0x24001938
 800d044:	24001e20 	.word	0x24001e20
 800d048:	24001e1c 	.word	0x24001e1c
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d056:	4b05      	ldr	r3, [pc, #20]	; (800d06c <xTaskGetTickCount+0x1c>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d05c:	687b      	ldr	r3, [r7, #4]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	24001e10 	.word	0x24001e10

0800d070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d07a:	4b4f      	ldr	r3, [pc, #316]	; (800d1b8 <xTaskIncrementTick+0x148>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f040 808f 	bne.w	800d1a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d084:	4b4d      	ldr	r3, [pc, #308]	; (800d1bc <xTaskIncrementTick+0x14c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3301      	adds	r3, #1
 800d08a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d08c:	4a4b      	ldr	r2, [pc, #300]	; (800d1bc <xTaskIncrementTick+0x14c>)
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d120      	bne.n	800d0da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d098:	4b49      	ldr	r3, [pc, #292]	; (800d1c0 <xTaskIncrementTick+0x150>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	603b      	str	r3, [r7, #0]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <xTaskIncrementTick+0x46>
 800d0b8:	4b41      	ldr	r3, [pc, #260]	; (800d1c0 <xTaskIncrementTick+0x150>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	60fb      	str	r3, [r7, #12]
 800d0be:	4b41      	ldr	r3, [pc, #260]	; (800d1c4 <xTaskIncrementTick+0x154>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a3f      	ldr	r2, [pc, #252]	; (800d1c0 <xTaskIncrementTick+0x150>)
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	4a3f      	ldr	r2, [pc, #252]	; (800d1c4 <xTaskIncrementTick+0x154>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	4b3e      	ldr	r3, [pc, #248]	; (800d1c8 <xTaskIncrementTick+0x158>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	4a3d      	ldr	r2, [pc, #244]	; (800d1c8 <xTaskIncrementTick+0x158>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	f000 fadb 	bl	800d690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0da:	4b3c      	ldr	r3, [pc, #240]	; (800d1cc <xTaskIncrementTick+0x15c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d349      	bcc.n	800d178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0e4:	4b36      	ldr	r3, [pc, #216]	; (800d1c0 <xTaskIncrementTick+0x150>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d104      	bne.n	800d0f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ee:	4b37      	ldr	r3, [pc, #220]	; (800d1cc <xTaskIncrementTick+0x15c>)
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0f4:	601a      	str	r2, [r3, #0]
					break;
 800d0f6:	e03f      	b.n	800d178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f8:	4b31      	ldr	r3, [pc, #196]	; (800d1c0 <xTaskIncrementTick+0x150>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d203      	bcs.n	800d118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d110:	4a2e      	ldr	r2, [pc, #184]	; (800d1cc <xTaskIncrementTick+0x15c>)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d116:	e02f      	b.n	800d178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	3304      	adds	r3, #4
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe ffad 	bl	800c07c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d126:	2b00      	cmp	r3, #0
 800d128:	d004      	beq.n	800d134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	3318      	adds	r3, #24
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe ffa4 	bl	800c07c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d138:	4b25      	ldr	r3, [pc, #148]	; (800d1d0 <xTaskIncrementTick+0x160>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d903      	bls.n	800d148 <xTaskIncrementTick+0xd8>
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	4a22      	ldr	r2, [pc, #136]	; (800d1d0 <xTaskIncrementTick+0x160>)
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d14c:	4613      	mov	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4a1f      	ldr	r2, [pc, #124]	; (800d1d4 <xTaskIncrementTick+0x164>)
 800d156:	441a      	add	r2, r3
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4619      	mov	r1, r3
 800d15e:	4610      	mov	r0, r2
 800d160:	f7fe ff2f 	bl	800bfc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <xTaskIncrementTick+0x168>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16e:	429a      	cmp	r2, r3
 800d170:	d3b8      	bcc.n	800d0e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d172:	2301      	movs	r3, #1
 800d174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d176:	e7b5      	b.n	800d0e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d178:	4b17      	ldr	r3, [pc, #92]	; (800d1d8 <xTaskIncrementTick+0x168>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17e:	4915      	ldr	r1, [pc, #84]	; (800d1d4 <xTaskIncrementTick+0x164>)
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d901      	bls.n	800d194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d190:	2301      	movs	r3, #1
 800d192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d194:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <xTaskIncrementTick+0x16c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d007      	beq.n	800d1ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d19c:	2301      	movs	r3, #1
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	e004      	b.n	800d1ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1a2:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <xTaskIncrementTick+0x170>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	4a0d      	ldr	r2, [pc, #52]	; (800d1e0 <xTaskIncrementTick+0x170>)
 800d1aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1ac:	697b      	ldr	r3, [r7, #20]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	24001e34 	.word	0x24001e34
 800d1bc:	24001e10 	.word	0x24001e10
 800d1c0:	24001dc4 	.word	0x24001dc4
 800d1c4:	24001dc8 	.word	0x24001dc8
 800d1c8:	24001e24 	.word	0x24001e24
 800d1cc:	24001e2c 	.word	0x24001e2c
 800d1d0:	24001e14 	.word	0x24001e14
 800d1d4:	2400193c 	.word	0x2400193c
 800d1d8:	24001938 	.word	0x24001938
 800d1dc:	24001e20 	.word	0x24001e20
 800d1e0:	24001e1c 	.word	0x24001e1c

0800d1e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1ea:	4b2a      	ldr	r3, [pc, #168]	; (800d294 <vTaskSwitchContext+0xb0>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1f2:	4b29      	ldr	r3, [pc, #164]	; (800d298 <vTaskSwitchContext+0xb4>)
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d1f8:	e046      	b.n	800d288 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d1fa:	4b27      	ldr	r3, [pc, #156]	; (800d298 <vTaskSwitchContext+0xb4>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d200:	4b26      	ldr	r3, [pc, #152]	; (800d29c <vTaskSwitchContext+0xb8>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	e010      	b.n	800d22a <vTaskSwitchContext+0x46>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10a      	bne.n	800d224 <vTaskSwitchContext+0x40>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	607b      	str	r3, [r7, #4]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <vTaskSwitchContext+0x3e>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3b01      	subs	r3, #1
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	491d      	ldr	r1, [pc, #116]	; (800d2a0 <vTaskSwitchContext+0xbc>)
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	440b      	add	r3, r1
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d0e4      	beq.n	800d208 <vTaskSwitchContext+0x24>
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4a15      	ldr	r2, [pc, #84]	; (800d2a0 <vTaskSwitchContext+0xbc>)
 800d24a:	4413      	add	r3, r2
 800d24c:	60bb      	str	r3, [r7, #8]
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	605a      	str	r2, [r3, #4]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	3308      	adds	r3, #8
 800d260:	429a      	cmp	r2, r3
 800d262:	d104      	bne.n	800d26e <vTaskSwitchContext+0x8a>
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	4a0b      	ldr	r2, [pc, #44]	; (800d2a4 <vTaskSwitchContext+0xc0>)
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4a08      	ldr	r2, [pc, #32]	; (800d29c <vTaskSwitchContext+0xb8>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d27e:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <vTaskSwitchContext+0xc0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3354      	adds	r3, #84	; 0x54
 800d284:	4a08      	ldr	r2, [pc, #32]	; (800d2a8 <vTaskSwitchContext+0xc4>)
 800d286:	6013      	str	r3, [r2, #0]
}
 800d288:	bf00      	nop
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	24001e34 	.word	0x24001e34
 800d298:	24001e20 	.word	0x24001e20
 800d29c:	24001e14 	.word	0x24001e14
 800d2a0:	2400193c 	.word	0x2400193c
 800d2a4:	24001938 	.word	0x24001938
 800d2a8:	24000014 	.word	0x24000014

0800d2ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	60fb      	str	r3, [r7, #12]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2d2:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <vTaskPlaceOnEventList+0x44>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3318      	adds	r3, #24
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7fe fe95 	bl	800c00a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	6838      	ldr	r0, [r7, #0]
 800d2e4:	f000 fa80 	bl	800d7e8 <prvAddCurrentTaskToDelayedList>
}
 800d2e8:	bf00      	nop
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	24001938 	.word	0x24001938

0800d2f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10a      	bne.n	800d31c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	617b      	str	r3, [r7, #20]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <vTaskPlaceOnEventListRestricted+0x54>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3318      	adds	r3, #24
 800d322:	4619      	mov	r1, r3
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7fe fe4c 	bl	800bfc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	68b8      	ldr	r0, [r7, #8]
 800d33a:	f000 fa55 	bl	800d7e8 <prvAddCurrentTaskToDelayedList>
	}
 800d33e:	bf00      	nop
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	24001938 	.word	0x24001938

0800d34c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10a      	bne.n	800d378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	60fb      	str	r3, [r7, #12]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	3318      	adds	r3, #24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe fe7d 	bl	800c07c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d382:	4b1e      	ldr	r3, [pc, #120]	; (800d3fc <xTaskRemoveFromEventList+0xb0>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d11d      	bne.n	800d3c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	3304      	adds	r3, #4
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fe fe74 	bl	800c07c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	4b19      	ldr	r3, [pc, #100]	; (800d400 <xTaskRemoveFromEventList+0xb4>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d903      	bls.n	800d3a8 <xTaskRemoveFromEventList+0x5c>
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4a16      	ldr	r2, [pc, #88]	; (800d400 <xTaskRemoveFromEventList+0xb4>)
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4a13      	ldr	r2, [pc, #76]	; (800d404 <xTaskRemoveFromEventList+0xb8>)
 800d3b6:	441a      	add	r2, r3
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4610      	mov	r0, r2
 800d3c0:	f7fe fdff 	bl	800bfc2 <vListInsertEnd>
 800d3c4:	e005      	b.n	800d3d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3318      	adds	r3, #24
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	480e      	ldr	r0, [pc, #56]	; (800d408 <xTaskRemoveFromEventList+0xbc>)
 800d3ce:	f7fe fdf8 	bl	800bfc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	; (800d40c <xTaskRemoveFromEventList+0xc0>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d905      	bls.n	800d3ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3e4:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <xTaskRemoveFromEventList+0xc4>)
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	e001      	b.n	800d3f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3f0:	697b      	ldr	r3, [r7, #20]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	24001e34 	.word	0x24001e34
 800d400:	24001e14 	.word	0x24001e14
 800d404:	2400193c 	.word	0x2400193c
 800d408:	24001dcc 	.word	0x24001dcc
 800d40c:	24001938 	.word	0x24001938
 800d410:	24001e20 	.word	0x24001e20

0800d414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d41c:	4b06      	ldr	r3, [pc, #24]	; (800d438 <vTaskInternalSetTimeOutState+0x24>)
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d424:	4b05      	ldr	r3, [pc, #20]	; (800d43c <vTaskInternalSetTimeOutState+0x28>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	605a      	str	r2, [r3, #4]
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	24001e24 	.word	0x24001e24
 800d43c:	24001e10 	.word	0x24001e10

0800d440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10a      	bne.n	800d466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	613b      	str	r3, [r7, #16]
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10a      	bne.n	800d482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	60fb      	str	r3, [r7, #12]
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d482:	f000 fe7f 	bl	800e184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d486:	4b1d      	ldr	r3, [pc, #116]	; (800d4fc <xTaskCheckForTimeOut+0xbc>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d49e:	d102      	bne.n	800d4a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	61fb      	str	r3, [r7, #28]
 800d4a4:	e023      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b15      	ldr	r3, [pc, #84]	; (800d500 <xTaskCheckForTimeOut+0xc0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d007      	beq.n	800d4c2 <xTaskCheckForTimeOut+0x82>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	69ba      	ldr	r2, [r7, #24]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d302      	bcc.n	800d4c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	61fb      	str	r3, [r7, #28]
 800d4c0:	e015      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d20b      	bcs.n	800d4e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	1ad2      	subs	r2, r2, r3
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff ff9b 	bl	800d414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
 800d4e2:	e004      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4ee:	f000 fe79 	bl	800e1e4 <vPortExitCritical>

	return xReturn;
 800d4f2:	69fb      	ldr	r3, [r7, #28]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	24001e10 	.word	0x24001e10
 800d500:	24001e24 	.word	0x24001e24

0800d504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d504:	b480      	push	{r7}
 800d506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d508:	4b03      	ldr	r3, [pc, #12]	; (800d518 <vTaskMissedYield+0x14>)
 800d50a:	2201      	movs	r2, #1
 800d50c:	601a      	str	r2, [r3, #0]
}
 800d50e:	bf00      	nop
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	24001e20 	.word	0x24001e20

0800d51c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d524:	f000 f852 	bl	800d5cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d528:	4b06      	ldr	r3, [pc, #24]	; (800d544 <prvIdleTask+0x28>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d9f9      	bls.n	800d524 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d530:	4b05      	ldr	r3, [pc, #20]	; (800d548 <prvIdleTask+0x2c>)
 800d532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d540:	e7f0      	b.n	800d524 <prvIdleTask+0x8>
 800d542:	bf00      	nop
 800d544:	2400193c 	.word	0x2400193c
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d552:	2300      	movs	r3, #0
 800d554:	607b      	str	r3, [r7, #4]
 800d556:	e00c      	b.n	800d572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	4613      	mov	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4a12      	ldr	r2, [pc, #72]	; (800d5ac <prvInitialiseTaskLists+0x60>)
 800d564:	4413      	add	r3, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe fcfe 	bl	800bf68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3301      	adds	r3, #1
 800d570:	607b      	str	r3, [r7, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b37      	cmp	r3, #55	; 0x37
 800d576:	d9ef      	bls.n	800d558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d578:	480d      	ldr	r0, [pc, #52]	; (800d5b0 <prvInitialiseTaskLists+0x64>)
 800d57a:	f7fe fcf5 	bl	800bf68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d57e:	480d      	ldr	r0, [pc, #52]	; (800d5b4 <prvInitialiseTaskLists+0x68>)
 800d580:	f7fe fcf2 	bl	800bf68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d584:	480c      	ldr	r0, [pc, #48]	; (800d5b8 <prvInitialiseTaskLists+0x6c>)
 800d586:	f7fe fcef 	bl	800bf68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d58a:	480c      	ldr	r0, [pc, #48]	; (800d5bc <prvInitialiseTaskLists+0x70>)
 800d58c:	f7fe fcec 	bl	800bf68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d590:	480b      	ldr	r0, [pc, #44]	; (800d5c0 <prvInitialiseTaskLists+0x74>)
 800d592:	f7fe fce9 	bl	800bf68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d596:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <prvInitialiseTaskLists+0x78>)
 800d598:	4a05      	ldr	r2, [pc, #20]	; (800d5b0 <prvInitialiseTaskLists+0x64>)
 800d59a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <prvInitialiseTaskLists+0x7c>)
 800d59e:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <prvInitialiseTaskLists+0x68>)
 800d5a0:	601a      	str	r2, [r3, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	2400193c 	.word	0x2400193c
 800d5b0:	24001d9c 	.word	0x24001d9c
 800d5b4:	24001db0 	.word	0x24001db0
 800d5b8:	24001dcc 	.word	0x24001dcc
 800d5bc:	24001de0 	.word	0x24001de0
 800d5c0:	24001df8 	.word	0x24001df8
 800d5c4:	24001dc4 	.word	0x24001dc4
 800d5c8:	24001dc8 	.word	0x24001dc8

0800d5cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5d2:	e019      	b.n	800d608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5d4:	f000 fdd6 	bl	800e184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5d8:	4b10      	ldr	r3, [pc, #64]	; (800d61c <prvCheckTasksWaitingTermination+0x50>)
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fd49 	bl	800c07c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5ea:	4b0d      	ldr	r3, [pc, #52]	; (800d620 <prvCheckTasksWaitingTermination+0x54>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	4a0b      	ldr	r2, [pc, #44]	; (800d620 <prvCheckTasksWaitingTermination+0x54>)
 800d5f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	4a0a      	ldr	r2, [pc, #40]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d5fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5fe:	f000 fdf1 	bl	800e1e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f810 	bl	800d628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e1      	bne.n	800d5d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d610:	bf00      	nop
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	24001de0 	.word	0x24001de0
 800d620:	24001e0c 	.word	0x24001e0c
 800d624:	24001df4 	.word	0x24001df4

0800d628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3354      	adds	r3, #84	; 0x54
 800d634:	4618      	mov	r0, r3
 800d636:	f001 f8fb 	bl	800e830 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d640:	2b00      	cmp	r3, #0
 800d642:	d108      	bne.n	800d656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 ff89 	bl	800e560 <vPortFree>
				vPortFree( pxTCB );
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 ff86 	bl	800e560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d654:	e018      	b.n	800d688 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d103      	bne.n	800d668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 ff7d 	bl	800e560 <vPortFree>
	}
 800d666:	e00f      	b.n	800d688 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d00a      	beq.n	800d688 <prvDeleteTCB+0x60>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	60fb      	str	r3, [r7, #12]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <prvDeleteTCB+0x5e>
	}
 800d688:	bf00      	nop
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <prvResetNextTaskUnblockTime+0x38>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d104      	bne.n	800d6aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <prvResetNextTaskUnblockTime+0x3c>)
 800d6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6a8:	e008      	b.n	800d6bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6aa:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <prvResetNextTaskUnblockTime+0x38>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	4a04      	ldr	r2, [pc, #16]	; (800d6cc <prvResetNextTaskUnblockTime+0x3c>)
 800d6ba:	6013      	str	r3, [r2, #0]
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	24001dc4 	.word	0x24001dc4
 800d6cc:	24001e2c 	.word	0x24001e2c

0800d6d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6d6:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <xTaskGetSchedulerState+0x34>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	607b      	str	r3, [r7, #4]
 800d6e2:	e008      	b.n	800d6f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6e4:	4b08      	ldr	r3, [pc, #32]	; (800d708 <xTaskGetSchedulerState+0x38>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d102      	bne.n	800d6f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	607b      	str	r3, [r7, #4]
 800d6f0:	e001      	b.n	800d6f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6f6:	687b      	ldr	r3, [r7, #4]
	}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	24001e18 	.word	0x24001e18
 800d708:	24001e34 	.word	0x24001e34

0800d70c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d718:	2300      	movs	r3, #0
 800d71a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d056      	beq.n	800d7d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d722:	4b2e      	ldr	r3, [pc, #184]	; (800d7dc <xTaskPriorityDisinherit+0xd0>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d00a      	beq.n	800d742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	60fb      	str	r3, [r7, #12]
}
 800d73e:	bf00      	nop
 800d740:	e7fe      	b.n	800d740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	60bb      	str	r3, [r7, #8]
}
 800d75c:	bf00      	nop
 800d75e:	e7fe      	b.n	800d75e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d764:	1e5a      	subs	r2, r3, #1
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d772:	429a      	cmp	r2, r3
 800d774:	d02c      	beq.n	800d7d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d128      	bne.n	800d7d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	3304      	adds	r3, #4
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe fc7a 	bl	800c07c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <xTaskPriorityDisinherit+0xd4>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d903      	bls.n	800d7b0 <xTaskPriorityDisinherit+0xa4>
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	4a0c      	ldr	r2, [pc, #48]	; (800d7e0 <xTaskPriorityDisinherit+0xd4>)
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4a09      	ldr	r2, [pc, #36]	; (800d7e4 <xTaskPriorityDisinherit+0xd8>)
 800d7be:	441a      	add	r2, r3
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f7fe fbfb 	bl	800bfc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7d0:	697b      	ldr	r3, [r7, #20]
	}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	24001938 	.word	0x24001938
 800d7e0:	24001e14 	.word	0x24001e14
 800d7e4:	2400193c 	.word	0x2400193c

0800d7e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7f2:	4b21      	ldr	r3, [pc, #132]	; (800d878 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7f8:	4b20      	ldr	r3, [pc, #128]	; (800d87c <prvAddCurrentTaskToDelayedList+0x94>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe fc3c 	bl	800c07c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80a:	d10a      	bne.n	800d822 <prvAddCurrentTaskToDelayedList+0x3a>
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d007      	beq.n	800d822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d812:	4b1a      	ldr	r3, [pc, #104]	; (800d87c <prvAddCurrentTaskToDelayedList+0x94>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3304      	adds	r3, #4
 800d818:	4619      	mov	r1, r3
 800d81a:	4819      	ldr	r0, [pc, #100]	; (800d880 <prvAddCurrentTaskToDelayedList+0x98>)
 800d81c:	f7fe fbd1 	bl	800bfc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d820:	e026      	b.n	800d870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d82a:	4b14      	ldr	r3, [pc, #80]	; (800d87c <prvAddCurrentTaskToDelayedList+0x94>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	429a      	cmp	r2, r3
 800d838:	d209      	bcs.n	800d84e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d83a:	4b12      	ldr	r3, [pc, #72]	; (800d884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <prvAddCurrentTaskToDelayedList+0x94>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	3304      	adds	r3, #4
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7fe fbdf 	bl	800c00a <vListInsert>
}
 800d84c:	e010      	b.n	800d870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d84e:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	4b0a      	ldr	r3, [pc, #40]	; (800d87c <prvAddCurrentTaskToDelayedList+0x94>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7fe fbd5 	bl	800c00a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d860:	4b0a      	ldr	r3, [pc, #40]	; (800d88c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	429a      	cmp	r2, r3
 800d868:	d202      	bcs.n	800d870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d86a:	4a08      	ldr	r2, [pc, #32]	; (800d88c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	6013      	str	r3, [r2, #0]
}
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	24001e10 	.word	0x24001e10
 800d87c:	24001938 	.word	0x24001938
 800d880:	24001df8 	.word	0x24001df8
 800d884:	24001dc8 	.word	0x24001dc8
 800d888:	24001dc4 	.word	0x24001dc4
 800d88c:	24001e2c 	.word	0x24001e2c

0800d890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b08a      	sub	sp, #40	; 0x28
 800d894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d896:	2300      	movs	r3, #0
 800d898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d89a:	f000 fb07 	bl	800deac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d89e:	4b1c      	ldr	r3, [pc, #112]	; (800d910 <xTimerCreateTimerTask+0x80>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d021      	beq.n	800d8ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8ae:	1d3a      	adds	r2, r7, #4
 800d8b0:	f107 0108 	add.w	r1, r7, #8
 800d8b4:	f107 030c 	add.w	r3, r7, #12
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fe fb3b 	bl	800bf34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	9202      	str	r2, [sp, #8]
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	460a      	mov	r2, r1
 800d8d0:	4910      	ldr	r1, [pc, #64]	; (800d914 <xTimerCreateTimerTask+0x84>)
 800d8d2:	4811      	ldr	r0, [pc, #68]	; (800d918 <xTimerCreateTimerTask+0x88>)
 800d8d4:	f7ff f8e8 	bl	800caa8 <xTaskCreateStatic>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4a10      	ldr	r2, [pc, #64]	; (800d91c <xTimerCreateTimerTask+0x8c>)
 800d8dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8de:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <xTimerCreateTimerTask+0x8c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d001      	beq.n	800d8ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10a      	bne.n	800d906 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	613b      	str	r3, [r7, #16]
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d906:	697b      	ldr	r3, [r7, #20]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	24001e68 	.word	0x24001e68
 800d914:	0800e9c4 	.word	0x0800e9c4
 800d918:	0800da55 	.word	0x0800da55
 800d91c:	24001e6c 	.word	0x24001e6c

0800d920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d92e:	2300      	movs	r3, #0
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	623b      	str	r3, [r7, #32]
}
 800d94a:	bf00      	nop
 800d94c:	e7fe      	b.n	800d94c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d94e:	4b1a      	ldr	r3, [pc, #104]	; (800d9b8 <xTimerGenericCommand+0x98>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d02a      	beq.n	800d9ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b05      	cmp	r3, #5
 800d966:	dc18      	bgt.n	800d99a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d968:	f7ff feb2 	bl	800d6d0 <xTaskGetSchedulerState>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d109      	bne.n	800d986 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d972:	4b11      	ldr	r3, [pc, #68]	; (800d9b8 <xTimerGenericCommand+0x98>)
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	f107 0110 	add.w	r1, r7, #16
 800d97a:	2300      	movs	r3, #0
 800d97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d97e:	f7fe fcab 	bl	800c2d8 <xQueueGenericSend>
 800d982:	6278      	str	r0, [r7, #36]	; 0x24
 800d984:	e012      	b.n	800d9ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d986:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <xTimerGenericCommand+0x98>)
 800d988:	6818      	ldr	r0, [r3, #0]
 800d98a:	f107 0110 	add.w	r1, r7, #16
 800d98e:	2300      	movs	r3, #0
 800d990:	2200      	movs	r2, #0
 800d992:	f7fe fca1 	bl	800c2d8 <xQueueGenericSend>
 800d996:	6278      	str	r0, [r7, #36]	; 0x24
 800d998:	e008      	b.n	800d9ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d99a:	4b07      	ldr	r3, [pc, #28]	; (800d9b8 <xTimerGenericCommand+0x98>)
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	f107 0110 	add.w	r1, r7, #16
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	f7fe fd95 	bl	800c4d4 <xQueueGenericSendFromISR>
 800d9aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3728      	adds	r7, #40	; 0x28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	24001e68 	.word	0x24001e68

0800d9bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9c6:	4b22      	ldr	r3, [pc, #136]	; (800da50 <prvProcessExpiredTimer+0x94>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7fe fb51 	bl	800c07c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d022      	beq.n	800da2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	18d1      	adds	r1, r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	6978      	ldr	r0, [r7, #20]
 800d9f6:	f000 f8d1 	bl	800db9c <prvInsertTimerInActiveList>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01f      	beq.n	800da40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da00:	2300      	movs	r3, #0
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	2300      	movs	r3, #0
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	2100      	movs	r1, #0
 800da0a:	6978      	ldr	r0, [r7, #20]
 800da0c:	f7ff ff88 	bl	800d920 <xTimerGenericCommand>
 800da10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d113      	bne.n	800da40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	60fb      	str	r3, [r7, #12]
}
 800da2a:	bf00      	nop
 800da2c:	e7fe      	b.n	800da2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da34:	f023 0301 	bic.w	r3, r3, #1
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	6a1b      	ldr	r3, [r3, #32]
 800da44:	6978      	ldr	r0, [r7, #20]
 800da46:	4798      	blx	r3
}
 800da48:	bf00      	nop
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	24001e60 	.word	0x24001e60

0800da54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da5c:	f107 0308 	add.w	r3, r7, #8
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f857 	bl	800db14 <prvGetNextExpireTime>
 800da66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	4619      	mov	r1, r3
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f000 f803 	bl	800da78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da72:	f000 f8d5 	bl	800dc20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da76:	e7f1      	b.n	800da5c <prvTimerTask+0x8>

0800da78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da82:	f7ff fa39 	bl	800cef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da86:	f107 0308 	add.w	r3, r7, #8
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 f866 	bl	800db5c <prvSampleTimeNow>
 800da90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d130      	bne.n	800dafa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10a      	bne.n	800dab4 <prvProcessTimerOrBlockTask+0x3c>
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d806      	bhi.n	800dab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daa6:	f7ff fa35 	bl	800cf14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff ff85 	bl	800d9bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dab2:	e024      	b.n	800dafe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d008      	beq.n	800dacc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800daba:	4b13      	ldr	r3, [pc, #76]	; (800db08 <prvProcessTimerOrBlockTask+0x90>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <prvProcessTimerOrBlockTask+0x50>
 800dac4:	2301      	movs	r3, #1
 800dac6:	e000      	b.n	800daca <prvProcessTimerOrBlockTask+0x52>
 800dac8:	2300      	movs	r3, #0
 800daca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <prvProcessTimerOrBlockTask+0x94>)
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	4619      	mov	r1, r3
 800dada:	f7fe ffb1 	bl	800ca40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dade:	f7ff fa19 	bl	800cf14 <xTaskResumeAll>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10a      	bne.n	800dafe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dae8:	4b09      	ldr	r3, [pc, #36]	; (800db10 <prvProcessTimerOrBlockTask+0x98>)
 800daea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	f3bf 8f6f 	isb	sy
}
 800daf8:	e001      	b.n	800dafe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dafa:	f7ff fa0b 	bl	800cf14 <xTaskResumeAll>
}
 800dafe:	bf00      	nop
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	24001e64 	.word	0x24001e64
 800db0c:	24001e68 	.word	0x24001e68
 800db10:	e000ed04 	.word	0xe000ed04

0800db14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db1c:	4b0e      	ldr	r3, [pc, #56]	; (800db58 <prvGetNextExpireTime+0x44>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d101      	bne.n	800db2a <prvGetNextExpireTime+0x16>
 800db26:	2201      	movs	r2, #1
 800db28:	e000      	b.n	800db2c <prvGetNextExpireTime+0x18>
 800db2a:	2200      	movs	r2, #0
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d105      	bne.n	800db44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db38:	4b07      	ldr	r3, [pc, #28]	; (800db58 <prvGetNextExpireTime+0x44>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	60fb      	str	r3, [r7, #12]
 800db42:	e001      	b.n	800db48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db48:	68fb      	ldr	r3, [r7, #12]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	24001e60 	.word	0x24001e60

0800db5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db64:	f7ff fa74 	bl	800d050 <xTaskGetTickCount>
 800db68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db6a:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <prvSampleTimeNow+0x3c>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	429a      	cmp	r2, r3
 800db72:	d205      	bcs.n	800db80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db74:	f000 f936 	bl	800dde4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	e002      	b.n	800db86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db86:	4a04      	ldr	r2, [pc, #16]	; (800db98 <prvSampleTimeNow+0x3c>)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db8c:	68fb      	ldr	r3, [r7, #12]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	24001e70 	.word	0x24001e70

0800db9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d812      	bhi.n	800dbe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	1ad2      	subs	r2, r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d302      	bcc.n	800dbd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	e01b      	b.n	800dc0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbd6:	4b10      	ldr	r3, [pc, #64]	; (800dc18 <prvInsertTimerInActiveList+0x7c>)
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4619      	mov	r1, r3
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f7fe fa12 	bl	800c00a <vListInsert>
 800dbe6:	e012      	b.n	800dc0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d206      	bcs.n	800dbfe <prvInsertTimerInActiveList+0x62>
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d302      	bcc.n	800dbfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e007      	b.n	800dc0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbfe:	4b07      	ldr	r3, [pc, #28]	; (800dc1c <prvInsertTimerInActiveList+0x80>)
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4619      	mov	r1, r3
 800dc08:	4610      	mov	r0, r2
 800dc0a:	f7fe f9fe 	bl	800c00a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc0e:	697b      	ldr	r3, [r7, #20]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3718      	adds	r7, #24
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	24001e64 	.word	0x24001e64
 800dc1c:	24001e60 	.word	0x24001e60

0800dc20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b08e      	sub	sp, #56	; 0x38
 800dc24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc26:	e0ca      	b.n	800ddbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	da18      	bge.n	800dc60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc2e:	1d3b      	adds	r3, r7, #4
 800dc30:	3304      	adds	r3, #4
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10a      	bne.n	800dc50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	61fb      	str	r3, [r7, #28]
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc56:	6850      	ldr	r0, [r2, #4]
 800dc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc5a:	6892      	ldr	r2, [r2, #8]
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f2c0 80aa 	blt.w	800ddbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d004      	beq.n	800dc7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	3304      	adds	r3, #4
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fe f9ff 	bl	800c07c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc7e:	463b      	mov	r3, r7
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff ff6b 	bl	800db5c <prvSampleTimeNow>
 800dc86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b09      	cmp	r3, #9
 800dc8c:	f200 8097 	bhi.w	800ddbe <prvProcessReceivedCommands+0x19e>
 800dc90:	a201      	add	r2, pc, #4	; (adr r2, 800dc98 <prvProcessReceivedCommands+0x78>)
 800dc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc96:	bf00      	nop
 800dc98:	0800dcc1 	.word	0x0800dcc1
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dcc1 	.word	0x0800dcc1
 800dca4:	0800dd35 	.word	0x0800dd35
 800dca8:	0800dd49 	.word	0x0800dd49
 800dcac:	0800dd93 	.word	0x0800dd93
 800dcb0:	0800dcc1 	.word	0x0800dcc1
 800dcb4:	0800dcc1 	.word	0x0800dcc1
 800dcb8:	0800dd35 	.word	0x0800dd35
 800dcbc:	0800dd49 	.word	0x0800dd49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcc6:	f043 0301 	orr.w	r3, r3, #1
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	18d1      	adds	r1, r2, r3
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce0:	f7ff ff5c 	bl	800db9c <prvInsertTimerInActiveList>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d069      	beq.n	800ddbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	6a1b      	ldr	r3, [r3, #32]
 800dcee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcf8:	f003 0304 	and.w	r3, r3, #4
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d05e      	beq.n	800ddbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	441a      	add	r2, r3
 800dd08:	2300      	movs	r3, #0
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	2100      	movs	r1, #0
 800dd10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd12:	f7ff fe05 	bl	800d920 <xTimerGenericCommand>
 800dd16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd18:	6a3b      	ldr	r3, [r7, #32]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d14f      	bne.n	800ddbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	61bb      	str	r3, [r7, #24]
}
 800dd30:	bf00      	nop
 800dd32:	e7fe      	b.n	800dd32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3a:	f023 0301 	bic.w	r3, r3, #1
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd46:	e03a      	b.n	800ddbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd4e:	f043 0301 	orr.w	r3, r3, #1
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10a      	bne.n	800dd7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6c:	f383 8811 	msr	BASEPRI, r3
 800dd70:	f3bf 8f6f 	isb	sy
 800dd74:	f3bf 8f4f 	dsb	sy
 800dd78:	617b      	str	r3, [r7, #20]
}
 800dd7a:	bf00      	nop
 800dd7c:	e7fe      	b.n	800dd7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	699a      	ldr	r2, [r3, #24]
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	18d1      	adds	r1, r2, r3
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd8c:	f7ff ff06 	bl	800db9c <prvInsertTimerInActiveList>
					break;
 800dd90:	e015      	b.n	800ddbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd98:	f003 0302 	and.w	r3, r3, #2
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d103      	bne.n	800dda8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dda0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda2:	f000 fbdd 	bl	800e560 <vPortFree>
 800dda6:	e00a      	b.n	800ddbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddae:	f023 0301 	bic.w	r3, r3, #1
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddba:	e000      	b.n	800ddbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ddbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddbe:	4b08      	ldr	r3, [pc, #32]	; (800dde0 <prvProcessReceivedCommands+0x1c0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	1d39      	adds	r1, r7, #4
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe fc20 	bl	800c60c <xQueueReceive>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f47f af2a 	bne.w	800dc28 <prvProcessReceivedCommands+0x8>
	}
}
 800ddd4:	bf00      	nop
 800ddd6:	bf00      	nop
 800ddd8:	3730      	adds	r7, #48	; 0x30
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	24001e68 	.word	0x24001e68

0800dde4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddea:	e048      	b.n	800de7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddec:	4b2d      	ldr	r3, [pc, #180]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf6:	4b2b      	ldr	r3, [pc, #172]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	3304      	adds	r3, #4
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe f939 	bl	800c07c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6a1b      	ldr	r3, [r3, #32]
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de18:	f003 0304 	and.w	r3, r3, #4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d02e      	beq.n	800de7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	693a      	ldr	r2, [r7, #16]
 800de26:	4413      	add	r3, r2
 800de28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d90e      	bls.n	800de50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de3e:	4b19      	ldr	r3, [pc, #100]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3304      	adds	r3, #4
 800de46:	4619      	mov	r1, r3
 800de48:	4610      	mov	r0, r2
 800de4a:	f7fe f8de 	bl	800c00a <vListInsert>
 800de4e:	e016      	b.n	800de7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de50:	2300      	movs	r3, #0
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	693a      	ldr	r2, [r7, #16]
 800de58:	2100      	movs	r1, #0
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f7ff fd60 	bl	800d920 <xTimerGenericCommand>
 800de60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	603b      	str	r3, [r7, #0]
}
 800de7a:	bf00      	nop
 800de7c:	e7fe      	b.n	800de7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1b1      	bne.n	800ddec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de88:	4b06      	ldr	r3, [pc, #24]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de8e:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <prvSwitchTimerLists+0xc4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a04      	ldr	r2, [pc, #16]	; (800dea4 <prvSwitchTimerLists+0xc0>)
 800de94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de96:	4a04      	ldr	r2, [pc, #16]	; (800dea8 <prvSwitchTimerLists+0xc4>)
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	6013      	str	r3, [r2, #0]
}
 800de9c:	bf00      	nop
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	24001e60 	.word	0x24001e60
 800dea8:	24001e64 	.word	0x24001e64

0800deac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800deb2:	f000 f967 	bl	800e184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800deb6:	4b15      	ldr	r3, [pc, #84]	; (800df0c <prvCheckForValidListAndQueue+0x60>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d120      	bne.n	800df00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800debe:	4814      	ldr	r0, [pc, #80]	; (800df10 <prvCheckForValidListAndQueue+0x64>)
 800dec0:	f7fe f852 	bl	800bf68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dec4:	4813      	ldr	r0, [pc, #76]	; (800df14 <prvCheckForValidListAndQueue+0x68>)
 800dec6:	f7fe f84f 	bl	800bf68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deca:	4b13      	ldr	r3, [pc, #76]	; (800df18 <prvCheckForValidListAndQueue+0x6c>)
 800decc:	4a10      	ldr	r2, [pc, #64]	; (800df10 <prvCheckForValidListAndQueue+0x64>)
 800dece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ded0:	4b12      	ldr	r3, [pc, #72]	; (800df1c <prvCheckForValidListAndQueue+0x70>)
 800ded2:	4a10      	ldr	r2, [pc, #64]	; (800df14 <prvCheckForValidListAndQueue+0x68>)
 800ded4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ded6:	2300      	movs	r3, #0
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	4b11      	ldr	r3, [pc, #68]	; (800df20 <prvCheckForValidListAndQueue+0x74>)
 800dedc:	4a11      	ldr	r2, [pc, #68]	; (800df24 <prvCheckForValidListAndQueue+0x78>)
 800dede:	2110      	movs	r1, #16
 800dee0:	200a      	movs	r0, #10
 800dee2:	f7fe f95d 	bl	800c1a0 <xQueueGenericCreateStatic>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4a08      	ldr	r2, [pc, #32]	; (800df0c <prvCheckForValidListAndQueue+0x60>)
 800deea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800deec:	4b07      	ldr	r3, [pc, #28]	; (800df0c <prvCheckForValidListAndQueue+0x60>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800def4:	4b05      	ldr	r3, [pc, #20]	; (800df0c <prvCheckForValidListAndQueue+0x60>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	490b      	ldr	r1, [pc, #44]	; (800df28 <prvCheckForValidListAndQueue+0x7c>)
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe fd76 	bl	800c9ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df00:	f000 f970 	bl	800e1e4 <vPortExitCritical>
}
 800df04:	bf00      	nop
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	24001e68 	.word	0x24001e68
 800df10:	24001e38 	.word	0x24001e38
 800df14:	24001e4c 	.word	0x24001e4c
 800df18:	24001e60 	.word	0x24001e60
 800df1c:	24001e64 	.word	0x24001e64
 800df20:	24001f14 	.word	0x24001f14
 800df24:	24001e74 	.word	0x24001e74
 800df28:	0800e9cc 	.word	0x0800e9cc

0800df2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3b04      	subs	r3, #4
 800df3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3b04      	subs	r3, #4
 800df4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	f023 0201 	bic.w	r2, r3, #1
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	3b04      	subs	r3, #4
 800df5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df5c:	4a0c      	ldr	r2, [pc, #48]	; (800df90 <pxPortInitialiseStack+0x64>)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3b14      	subs	r3, #20
 800df66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	3b04      	subs	r3, #4
 800df72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f06f 0202 	mvn.w	r2, #2
 800df7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3b20      	subs	r3, #32
 800df80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df82:	68fb      	ldr	r3, [r7, #12]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	0800df95 	.word	0x0800df95

0800df94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df9e:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <prvTaskExitError+0x54>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfa6:	d00a      	beq.n	800dfbe <prvTaskExitError+0x2a>
	__asm volatile
 800dfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	60fb      	str	r3, [r7, #12]
}
 800dfba:	bf00      	nop
 800dfbc:	e7fe      	b.n	800dfbc <prvTaskExitError+0x28>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	60bb      	str	r3, [r7, #8]
}
 800dfd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfd2:	bf00      	nop
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0fc      	beq.n	800dfd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	24000010 	.word	0x24000010
 800dfec:	00000000 	.word	0x00000000

0800dff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dff0:	4b07      	ldr	r3, [pc, #28]	; (800e010 <pxCurrentTCBConst2>)
 800dff2:	6819      	ldr	r1, [r3, #0]
 800dff4:	6808      	ldr	r0, [r1, #0]
 800dff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffa:	f380 8809 	msr	PSP, r0
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f04f 0000 	mov.w	r0, #0
 800e006:	f380 8811 	msr	BASEPRI, r0
 800e00a:	4770      	bx	lr
 800e00c:	f3af 8000 	nop.w

0800e010 <pxCurrentTCBConst2>:
 800e010:	24001938 	.word	0x24001938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop

0800e018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e018:	4808      	ldr	r0, [pc, #32]	; (800e03c <prvPortStartFirstTask+0x24>)
 800e01a:	6800      	ldr	r0, [r0, #0]
 800e01c:	6800      	ldr	r0, [r0, #0]
 800e01e:	f380 8808 	msr	MSP, r0
 800e022:	f04f 0000 	mov.w	r0, #0
 800e026:	f380 8814 	msr	CONTROL, r0
 800e02a:	b662      	cpsie	i
 800e02c:	b661      	cpsie	f
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	df00      	svc	0
 800e038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e03a:	bf00      	nop
 800e03c:	e000ed08 	.word	0xe000ed08

0800e040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e046:	4b46      	ldr	r3, [pc, #280]	; (800e160 <xPortStartScheduler+0x120>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a46      	ldr	r2, [pc, #280]	; (800e164 <xPortStartScheduler+0x124>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d10a      	bne.n	800e066 <xPortStartScheduler+0x26>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	613b      	str	r3, [r7, #16]
}
 800e062:	bf00      	nop
 800e064:	e7fe      	b.n	800e064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e066:	4b3e      	ldr	r3, [pc, #248]	; (800e160 <xPortStartScheduler+0x120>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a3f      	ldr	r2, [pc, #252]	; (800e168 <xPortStartScheduler+0x128>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d10a      	bne.n	800e086 <xPortStartScheduler+0x46>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	60fb      	str	r3, [r7, #12]
}
 800e082:	bf00      	nop
 800e084:	e7fe      	b.n	800e084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e086:	4b39      	ldr	r3, [pc, #228]	; (800e16c <xPortStartScheduler+0x12c>)
 800e088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	22ff      	movs	r2, #255	; 0xff
 800e096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0a0:	78fb      	ldrb	r3, [r7, #3]
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	4b31      	ldr	r3, [pc, #196]	; (800e170 <xPortStartScheduler+0x130>)
 800e0ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0ae:	4b31      	ldr	r3, [pc, #196]	; (800e174 <xPortStartScheduler+0x134>)
 800e0b0:	2207      	movs	r2, #7
 800e0b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0b4:	e009      	b.n	800e0ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0b6:	4b2f      	ldr	r3, [pc, #188]	; (800e174 <xPortStartScheduler+0x134>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	4a2d      	ldr	r2, [pc, #180]	; (800e174 <xPortStartScheduler+0x134>)
 800e0be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0c0:	78fb      	ldrb	r3, [r7, #3]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0ca:	78fb      	ldrb	r3, [r7, #3]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0d2:	2b80      	cmp	r3, #128	; 0x80
 800e0d4:	d0ef      	beq.n	800e0b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0d6:	4b27      	ldr	r3, [pc, #156]	; (800e174 <xPortStartScheduler+0x134>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f1c3 0307 	rsb	r3, r3, #7
 800e0de:	2b04      	cmp	r3, #4
 800e0e0:	d00a      	beq.n	800e0f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e6:	f383 8811 	msr	BASEPRI, r3
 800e0ea:	f3bf 8f6f 	isb	sy
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	60bb      	str	r3, [r7, #8]
}
 800e0f4:	bf00      	nop
 800e0f6:	e7fe      	b.n	800e0f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0f8:	4b1e      	ldr	r3, [pc, #120]	; (800e174 <xPortStartScheduler+0x134>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	4a1d      	ldr	r2, [pc, #116]	; (800e174 <xPortStartScheduler+0x134>)
 800e100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e102:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <xPortStartScheduler+0x134>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e10a:	4a1a      	ldr	r2, [pc, #104]	; (800e174 <xPortStartScheduler+0x134>)
 800e10c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	b2da      	uxtb	r2, r3
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e116:	4b18      	ldr	r3, [pc, #96]	; (800e178 <xPortStartScheduler+0x138>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a17      	ldr	r2, [pc, #92]	; (800e178 <xPortStartScheduler+0x138>)
 800e11c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e122:	4b15      	ldr	r3, [pc, #84]	; (800e178 <xPortStartScheduler+0x138>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a14      	ldr	r2, [pc, #80]	; (800e178 <xPortStartScheduler+0x138>)
 800e128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e12c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e12e:	f000 f8dd 	bl	800e2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e132:	4b12      	ldr	r3, [pc, #72]	; (800e17c <xPortStartScheduler+0x13c>)
 800e134:	2200      	movs	r2, #0
 800e136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e138:	f000 f8fc 	bl	800e334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e13c:	4b10      	ldr	r3, [pc, #64]	; (800e180 <xPortStartScheduler+0x140>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4a0f      	ldr	r2, [pc, #60]	; (800e180 <xPortStartScheduler+0x140>)
 800e142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e148:	f7ff ff66 	bl	800e018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e14c:	f7ff f84a 	bl	800d1e4 <vTaskSwitchContext>
	prvTaskExitError();
 800e150:	f7ff ff20 	bl	800df94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	e000ed00 	.word	0xe000ed00
 800e164:	410fc271 	.word	0x410fc271
 800e168:	410fc270 	.word	0x410fc270
 800e16c:	e000e400 	.word	0xe000e400
 800e170:	24001f64 	.word	0x24001f64
 800e174:	24001f68 	.word	0x24001f68
 800e178:	e000ed20 	.word	0xe000ed20
 800e17c:	24000010 	.word	0x24000010
 800e180:	e000ef34 	.word	0xe000ef34

0800e184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
	__asm volatile
 800e18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	607b      	str	r3, [r7, #4]
}
 800e19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e19e:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <vPortEnterCritical+0x58>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	4a0d      	ldr	r2, [pc, #52]	; (800e1dc <vPortEnterCritical+0x58>)
 800e1a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1a8:	4b0c      	ldr	r3, [pc, #48]	; (800e1dc <vPortEnterCritical+0x58>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d10f      	bne.n	800e1d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <vPortEnterCritical+0x5c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00a      	beq.n	800e1d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	603b      	str	r3, [r7, #0]
}
 800e1cc:	bf00      	nop
 800e1ce:	e7fe      	b.n	800e1ce <vPortEnterCritical+0x4a>
	}
}
 800e1d0:	bf00      	nop
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	24000010 	.word	0x24000010
 800e1e0:	e000ed04 	.word	0xe000ed04

0800e1e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1ea:	4b12      	ldr	r3, [pc, #72]	; (800e234 <vPortExitCritical+0x50>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10a      	bne.n	800e208 <vPortExitCritical+0x24>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	607b      	str	r3, [r7, #4]
}
 800e204:	bf00      	nop
 800e206:	e7fe      	b.n	800e206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e208:	4b0a      	ldr	r3, [pc, #40]	; (800e234 <vPortExitCritical+0x50>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	4a09      	ldr	r2, [pc, #36]	; (800e234 <vPortExitCritical+0x50>)
 800e210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <vPortExitCritical+0x50>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d105      	bne.n	800e226 <vPortExitCritical+0x42>
 800e21a:	2300      	movs	r3, #0
 800e21c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	f383 8811 	msr	BASEPRI, r3
}
 800e224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e226:	bf00      	nop
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	24000010 	.word	0x24000010
	...

0800e240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e240:	f3ef 8009 	mrs	r0, PSP
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	4b15      	ldr	r3, [pc, #84]	; (800e2a0 <pxCurrentTCBConst>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	f01e 0f10 	tst.w	lr, #16
 800e250:	bf08      	it	eq
 800e252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25a:	6010      	str	r0, [r2, #0]
 800e25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e264:	f380 8811 	msr	BASEPRI, r0
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f7fe ffb8 	bl	800d1e4 <vTaskSwitchContext>
 800e274:	f04f 0000 	mov.w	r0, #0
 800e278:	f380 8811 	msr	BASEPRI, r0
 800e27c:	bc09      	pop	{r0, r3}
 800e27e:	6819      	ldr	r1, [r3, #0]
 800e280:	6808      	ldr	r0, [r1, #0]
 800e282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e286:	f01e 0f10 	tst.w	lr, #16
 800e28a:	bf08      	it	eq
 800e28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e290:	f380 8809 	msr	PSP, r0
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	f3af 8000 	nop.w

0800e2a0 <pxCurrentTCBConst>:
 800e2a0:	24001938 	.word	0x24001938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop

0800e2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	607b      	str	r3, [r7, #4]
}
 800e2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2c2:	f7fe fed5 	bl	800d070 <xTaskIncrementTick>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d003      	beq.n	800e2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2cc:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <xPortSysTickHandler+0x40>)
 800e2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	f383 8811 	msr	BASEPRI, r3
}
 800e2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	e000ed04 	.word	0xe000ed04

0800e2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2f0:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <vPortSetupTimerInterrupt+0x34>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2f6:	4b0b      	ldr	r3, [pc, #44]	; (800e324 <vPortSetupTimerInterrupt+0x38>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <vPortSetupTimerInterrupt+0x3c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a0a      	ldr	r2, [pc, #40]	; (800e32c <vPortSetupTimerInterrupt+0x40>)
 800e302:	fba2 2303 	umull	r2, r3, r2, r3
 800e306:	099b      	lsrs	r3, r3, #6
 800e308:	4a09      	ldr	r2, [pc, #36]	; (800e330 <vPortSetupTimerInterrupt+0x44>)
 800e30a:	3b01      	subs	r3, #1
 800e30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e30e:	4b04      	ldr	r3, [pc, #16]	; (800e320 <vPortSetupTimerInterrupt+0x34>)
 800e310:	2207      	movs	r2, #7
 800e312:	601a      	str	r2, [r3, #0]
}
 800e314:	bf00      	nop
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	e000e010 	.word	0xe000e010
 800e324:	e000e018 	.word	0xe000e018
 800e328:	24000000 	.word	0x24000000
 800e32c:	10624dd3 	.word	0x10624dd3
 800e330:	e000e014 	.word	0xe000e014

0800e334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e344 <vPortEnableVFP+0x10>
 800e338:	6801      	ldr	r1, [r0, #0]
 800e33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e33e:	6001      	str	r1, [r0, #0]
 800e340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e342:	bf00      	nop
 800e344:	e000ed88 	.word	0xe000ed88

0800e348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e34e:	f3ef 8305 	mrs	r3, IPSR
 800e352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b0f      	cmp	r3, #15
 800e358:	d914      	bls.n	800e384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e35a:	4a17      	ldr	r2, [pc, #92]	; (800e3b8 <vPortValidateInterruptPriority+0x70>)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	4413      	add	r3, r2
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e364:	4b15      	ldr	r3, [pc, #84]	; (800e3bc <vPortValidateInterruptPriority+0x74>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	7afa      	ldrb	r2, [r7, #11]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d20a      	bcs.n	800e384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	607b      	str	r3, [r7, #4]
}
 800e380:	bf00      	nop
 800e382:	e7fe      	b.n	800e382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e384:	4b0e      	ldr	r3, [pc, #56]	; (800e3c0 <vPortValidateInterruptPriority+0x78>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e38c:	4b0d      	ldr	r3, [pc, #52]	; (800e3c4 <vPortValidateInterruptPriority+0x7c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d90a      	bls.n	800e3aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	603b      	str	r3, [r7, #0]
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <vPortValidateInterruptPriority+0x60>
	}
 800e3aa:	bf00      	nop
 800e3ac:	3714      	adds	r7, #20
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	e000e3f0 	.word	0xe000e3f0
 800e3bc:	24001f64 	.word	0x24001f64
 800e3c0:	e000ed0c 	.word	0xe000ed0c
 800e3c4:	24001f68 	.word	0x24001f68

0800e3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	; 0x28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3d4:	f7fe fd90 	bl	800cef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3d8:	4b5b      	ldr	r3, [pc, #364]	; (800e548 <pvPortMalloc+0x180>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3e0:	f000 f920 	bl	800e624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3e4:	4b59      	ldr	r3, [pc, #356]	; (800e54c <pvPortMalloc+0x184>)
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f040 8093 	bne.w	800e518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d01d      	beq.n	800e434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e3f8:	2208      	movs	r2, #8
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	2b00      	cmp	r3, #0
 800e408:	d014      	beq.n	800e434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f023 0307 	bic.w	r3, r3, #7
 800e410:	3308      	adds	r3, #8
 800e412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f003 0307 	and.w	r3, r3, #7
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00a      	beq.n	800e434 <pvPortMalloc+0x6c>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	617b      	str	r3, [r7, #20]
}
 800e430:	bf00      	nop
 800e432:	e7fe      	b.n	800e432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d06e      	beq.n	800e518 <pvPortMalloc+0x150>
 800e43a:	4b45      	ldr	r3, [pc, #276]	; (800e550 <pvPortMalloc+0x188>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	429a      	cmp	r2, r3
 800e442:	d869      	bhi.n	800e518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e444:	4b43      	ldr	r3, [pc, #268]	; (800e554 <pvPortMalloc+0x18c>)
 800e446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e448:	4b42      	ldr	r3, [pc, #264]	; (800e554 <pvPortMalloc+0x18c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e44e:	e004      	b.n	800e45a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	429a      	cmp	r2, r3
 800e462:	d903      	bls.n	800e46c <pvPortMalloc+0xa4>
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1f1      	bne.n	800e450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e46c:	4b36      	ldr	r3, [pc, #216]	; (800e548 <pvPortMalloc+0x180>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e472:	429a      	cmp	r2, r3
 800e474:	d050      	beq.n	800e518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2208      	movs	r2, #8
 800e47c:	4413      	add	r3, r2
 800e47e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	6a3b      	ldr	r3, [r7, #32]
 800e486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	685a      	ldr	r2, [r3, #4]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	1ad2      	subs	r2, r2, r3
 800e490:	2308      	movs	r3, #8
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	429a      	cmp	r2, r3
 800e496:	d91f      	bls.n	800e4d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4413      	add	r3, r2
 800e49e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	f003 0307 	and.w	r3, r3, #7
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00a      	beq.n	800e4c0 <pvPortMalloc+0xf8>
	__asm volatile
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	613b      	str	r3, [r7, #16]
}
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	685a      	ldr	r2, [r3, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	1ad2      	subs	r2, r2, r3
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4d2:	69b8      	ldr	r0, [r7, #24]
 800e4d4:	f000 f908 	bl	800e6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4d8:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <pvPortMalloc+0x188>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	4a1b      	ldr	r2, [pc, #108]	; (800e550 <pvPortMalloc+0x188>)
 800e4e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4e6:	4b1a      	ldr	r3, [pc, #104]	; (800e550 <pvPortMalloc+0x188>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	4b1b      	ldr	r3, [pc, #108]	; (800e558 <pvPortMalloc+0x190>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d203      	bcs.n	800e4fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4f2:	4b17      	ldr	r3, [pc, #92]	; (800e550 <pvPortMalloc+0x188>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a18      	ldr	r2, [pc, #96]	; (800e558 <pvPortMalloc+0x190>)
 800e4f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	4b13      	ldr	r3, [pc, #76]	; (800e54c <pvPortMalloc+0x184>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	431a      	orrs	r2, r3
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <pvPortMalloc+0x194>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	3301      	adds	r3, #1
 800e514:	4a11      	ldr	r2, [pc, #68]	; (800e55c <pvPortMalloc+0x194>)
 800e516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e518:	f7fe fcfc 	bl	800cf14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	f003 0307 	and.w	r3, r3, #7
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00a      	beq.n	800e53c <pvPortMalloc+0x174>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	60fb      	str	r3, [r7, #12]
}
 800e538:	bf00      	nop
 800e53a:	e7fe      	b.n	800e53a <pvPortMalloc+0x172>
	return pvReturn;
 800e53c:	69fb      	ldr	r3, [r7, #28]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3728      	adds	r7, #40	; 0x28
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	24005b74 	.word	0x24005b74
 800e54c:	24005b88 	.word	0x24005b88
 800e550:	24005b78 	.word	0x24005b78
 800e554:	24005b6c 	.word	0x24005b6c
 800e558:	24005b7c 	.word	0x24005b7c
 800e55c:	24005b80 	.word	0x24005b80

0800e560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d04d      	beq.n	800e60e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e572:	2308      	movs	r3, #8
 800e574:	425b      	negs	r3, r3
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	4413      	add	r3, r2
 800e57a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	4b24      	ldr	r3, [pc, #144]	; (800e618 <vPortFree+0xb8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4013      	ands	r3, r2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10a      	bne.n	800e5a4 <vPortFree+0x44>
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	60fb      	str	r3, [r7, #12]
}
 800e5a0:	bf00      	nop
 800e5a2:	e7fe      	b.n	800e5a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00a      	beq.n	800e5c2 <vPortFree+0x62>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	60bb      	str	r3, [r7, #8]
}
 800e5be:	bf00      	nop
 800e5c0:	e7fe      	b.n	800e5c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	4b14      	ldr	r3, [pc, #80]	; (800e618 <vPortFree+0xb8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d01e      	beq.n	800e60e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d11a      	bne.n	800e60e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	4b0e      	ldr	r3, [pc, #56]	; (800e618 <vPortFree+0xb8>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	43db      	mvns	r3, r3
 800e5e2:	401a      	ands	r2, r3
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5e8:	f7fe fc86 	bl	800cef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	685a      	ldr	r2, [r3, #4]
 800e5f0:	4b0a      	ldr	r3, [pc, #40]	; (800e61c <vPortFree+0xbc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	4a09      	ldr	r2, [pc, #36]	; (800e61c <vPortFree+0xbc>)
 800e5f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5fa:	6938      	ldr	r0, [r7, #16]
 800e5fc:	f000 f874 	bl	800e6e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e600:	4b07      	ldr	r3, [pc, #28]	; (800e620 <vPortFree+0xc0>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3301      	adds	r3, #1
 800e606:	4a06      	ldr	r2, [pc, #24]	; (800e620 <vPortFree+0xc0>)
 800e608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e60a:	f7fe fc83 	bl	800cf14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e60e:	bf00      	nop
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	24005b88 	.word	0x24005b88
 800e61c:	24005b78 	.word	0x24005b78
 800e620:	24005b84 	.word	0x24005b84

0800e624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e62a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e630:	4b27      	ldr	r3, [pc, #156]	; (800e6d0 <prvHeapInit+0xac>)
 800e632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f003 0307 	and.w	r3, r3, #7
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00c      	beq.n	800e658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3307      	adds	r3, #7
 800e642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f023 0307 	bic.w	r3, r3, #7
 800e64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	4a1f      	ldr	r2, [pc, #124]	; (800e6d0 <prvHeapInit+0xac>)
 800e654:	4413      	add	r3, r2
 800e656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e65c:	4a1d      	ldr	r2, [pc, #116]	; (800e6d4 <prvHeapInit+0xb0>)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e662:	4b1c      	ldr	r3, [pc, #112]	; (800e6d4 <prvHeapInit+0xb0>)
 800e664:	2200      	movs	r2, #0
 800e666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	4413      	add	r3, r2
 800e66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e670:	2208      	movs	r2, #8
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	1a9b      	subs	r3, r3, r2
 800e676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f023 0307 	bic.w	r3, r3, #7
 800e67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4a15      	ldr	r2, [pc, #84]	; (800e6d8 <prvHeapInit+0xb4>)
 800e684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e686:	4b14      	ldr	r3, [pc, #80]	; (800e6d8 <prvHeapInit+0xb4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2200      	movs	r2, #0
 800e68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e68e:	4b12      	ldr	r3, [pc, #72]	; (800e6d8 <prvHeapInit+0xb4>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	1ad2      	subs	r2, r2, r3
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6a4:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <prvHeapInit+0xb4>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	4a0a      	ldr	r2, [pc, #40]	; (800e6dc <prvHeapInit+0xb8>)
 800e6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	4a09      	ldr	r2, [pc, #36]	; (800e6e0 <prvHeapInit+0xbc>)
 800e6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6bc:	4b09      	ldr	r3, [pc, #36]	; (800e6e4 <prvHeapInit+0xc0>)
 800e6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6c2:	601a      	str	r2, [r3, #0]
}
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	24001f6c 	.word	0x24001f6c
 800e6d4:	24005b6c 	.word	0x24005b6c
 800e6d8:	24005b74 	.word	0x24005b74
 800e6dc:	24005b7c 	.word	0x24005b7c
 800e6e0:	24005b78 	.word	0x24005b78
 800e6e4:	24005b88 	.word	0x24005b88

0800e6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6f0:	4b28      	ldr	r3, [pc, #160]	; (800e794 <prvInsertBlockIntoFreeList+0xac>)
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	e002      	b.n	800e6fc <prvInsertBlockIntoFreeList+0x14>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	429a      	cmp	r2, r3
 800e704:	d8f7      	bhi.n	800e6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	4413      	add	r3, r2
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	429a      	cmp	r2, r3
 800e716:	d108      	bne.n	800e72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	441a      	add	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	441a      	add	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d118      	bne.n	800e770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	4b15      	ldr	r3, [pc, #84]	; (800e798 <prvInsertBlockIntoFreeList+0xb0>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d00d      	beq.n	800e766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	685a      	ldr	r2, [r3, #4]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	441a      	add	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	e008      	b.n	800e778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e766:	4b0c      	ldr	r3, [pc, #48]	; (800e798 <prvInsertBlockIntoFreeList+0xb0>)
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	e003      	b.n	800e778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d002      	beq.n	800e786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e786:	bf00      	nop
 800e788:	3714      	adds	r7, #20
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	24005b6c 	.word	0x24005b6c
 800e798:	24005b74 	.word	0x24005b74

0800e79c <__libc_init_array>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	4d0d      	ldr	r5, [pc, #52]	; (800e7d4 <__libc_init_array+0x38>)
 800e7a0:	4c0d      	ldr	r4, [pc, #52]	; (800e7d8 <__libc_init_array+0x3c>)
 800e7a2:	1b64      	subs	r4, r4, r5
 800e7a4:	10a4      	asrs	r4, r4, #2
 800e7a6:	2600      	movs	r6, #0
 800e7a8:	42a6      	cmp	r6, r4
 800e7aa:	d109      	bne.n	800e7c0 <__libc_init_array+0x24>
 800e7ac:	4d0b      	ldr	r5, [pc, #44]	; (800e7dc <__libc_init_array+0x40>)
 800e7ae:	4c0c      	ldr	r4, [pc, #48]	; (800e7e0 <__libc_init_array+0x44>)
 800e7b0:	f000 f8f2 	bl	800e998 <_init>
 800e7b4:	1b64      	subs	r4, r4, r5
 800e7b6:	10a4      	asrs	r4, r4, #2
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	42a6      	cmp	r6, r4
 800e7bc:	d105      	bne.n	800e7ca <__libc_init_array+0x2e>
 800e7be:	bd70      	pop	{r4, r5, r6, pc}
 800e7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7c4:	4798      	blx	r3
 800e7c6:	3601      	adds	r6, #1
 800e7c8:	e7ee      	b.n	800e7a8 <__libc_init_array+0xc>
 800e7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7ce:	4798      	blx	r3
 800e7d0:	3601      	adds	r6, #1
 800e7d2:	e7f2      	b.n	800e7ba <__libc_init_array+0x1e>
 800e7d4:	0800ea98 	.word	0x0800ea98
 800e7d8:	0800ea98 	.word	0x0800ea98
 800e7dc:	0800ea98 	.word	0x0800ea98
 800e7e0:	0800ea9c 	.word	0x0800ea9c

0800e7e4 <__retarget_lock_acquire_recursive>:
 800e7e4:	4770      	bx	lr

0800e7e6 <__retarget_lock_release_recursive>:
 800e7e6:	4770      	bx	lr

0800e7e8 <memcpy>:
 800e7e8:	440a      	add	r2, r1
 800e7ea:	4291      	cmp	r1, r2
 800e7ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e7f0:	d100      	bne.n	800e7f4 <memcpy+0xc>
 800e7f2:	4770      	bx	lr
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7fe:	4291      	cmp	r1, r2
 800e800:	d1f9      	bne.n	800e7f6 <memcpy+0xe>
 800e802:	bd10      	pop	{r4, pc}

0800e804 <memset>:
 800e804:	4402      	add	r2, r0
 800e806:	4603      	mov	r3, r0
 800e808:	4293      	cmp	r3, r2
 800e80a:	d100      	bne.n	800e80e <memset+0xa>
 800e80c:	4770      	bx	lr
 800e80e:	f803 1b01 	strb.w	r1, [r3], #1
 800e812:	e7f9      	b.n	800e808 <memset+0x4>

0800e814 <cleanup_glue>:
 800e814:	b538      	push	{r3, r4, r5, lr}
 800e816:	460c      	mov	r4, r1
 800e818:	6809      	ldr	r1, [r1, #0]
 800e81a:	4605      	mov	r5, r0
 800e81c:	b109      	cbz	r1, 800e822 <cleanup_glue+0xe>
 800e81e:	f7ff fff9 	bl	800e814 <cleanup_glue>
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e82a:	f000 b869 	b.w	800e900 <_free_r>
	...

0800e830 <_reclaim_reent>:
 800e830:	4b2c      	ldr	r3, [pc, #176]	; (800e8e4 <_reclaim_reent+0xb4>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4283      	cmp	r3, r0
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	4604      	mov	r4, r0
 800e83a:	d051      	beq.n	800e8e0 <_reclaim_reent+0xb0>
 800e83c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e83e:	b143      	cbz	r3, 800e852 <_reclaim_reent+0x22>
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d14a      	bne.n	800e8dc <_reclaim_reent+0xac>
 800e846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e848:	6819      	ldr	r1, [r3, #0]
 800e84a:	b111      	cbz	r1, 800e852 <_reclaim_reent+0x22>
 800e84c:	4620      	mov	r0, r4
 800e84e:	f000 f857 	bl	800e900 <_free_r>
 800e852:	6961      	ldr	r1, [r4, #20]
 800e854:	b111      	cbz	r1, 800e85c <_reclaim_reent+0x2c>
 800e856:	4620      	mov	r0, r4
 800e858:	f000 f852 	bl	800e900 <_free_r>
 800e85c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e85e:	b111      	cbz	r1, 800e866 <_reclaim_reent+0x36>
 800e860:	4620      	mov	r0, r4
 800e862:	f000 f84d 	bl	800e900 <_free_r>
 800e866:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e868:	b111      	cbz	r1, 800e870 <_reclaim_reent+0x40>
 800e86a:	4620      	mov	r0, r4
 800e86c:	f000 f848 	bl	800e900 <_free_r>
 800e870:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e872:	b111      	cbz	r1, 800e87a <_reclaim_reent+0x4a>
 800e874:	4620      	mov	r0, r4
 800e876:	f000 f843 	bl	800e900 <_free_r>
 800e87a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e87c:	b111      	cbz	r1, 800e884 <_reclaim_reent+0x54>
 800e87e:	4620      	mov	r0, r4
 800e880:	f000 f83e 	bl	800e900 <_free_r>
 800e884:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e886:	b111      	cbz	r1, 800e88e <_reclaim_reent+0x5e>
 800e888:	4620      	mov	r0, r4
 800e88a:	f000 f839 	bl	800e900 <_free_r>
 800e88e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e890:	b111      	cbz	r1, 800e898 <_reclaim_reent+0x68>
 800e892:	4620      	mov	r0, r4
 800e894:	f000 f834 	bl	800e900 <_free_r>
 800e898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e89a:	b111      	cbz	r1, 800e8a2 <_reclaim_reent+0x72>
 800e89c:	4620      	mov	r0, r4
 800e89e:	f000 f82f 	bl	800e900 <_free_r>
 800e8a2:	69a3      	ldr	r3, [r4, #24]
 800e8a4:	b1e3      	cbz	r3, 800e8e0 <_reclaim_reent+0xb0>
 800e8a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	4798      	blx	r3
 800e8ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e8ae:	b1b9      	cbz	r1, 800e8e0 <_reclaim_reent+0xb0>
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8b6:	f7ff bfad 	b.w	800e814 <cleanup_glue>
 800e8ba:	5949      	ldr	r1, [r1, r5]
 800e8bc:	b941      	cbnz	r1, 800e8d0 <_reclaim_reent+0xa0>
 800e8be:	3504      	adds	r5, #4
 800e8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c2:	2d80      	cmp	r5, #128	; 0x80
 800e8c4:	68d9      	ldr	r1, [r3, #12]
 800e8c6:	d1f8      	bne.n	800e8ba <_reclaim_reent+0x8a>
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 f819 	bl	800e900 <_free_r>
 800e8ce:	e7ba      	b.n	800e846 <_reclaim_reent+0x16>
 800e8d0:	680e      	ldr	r6, [r1, #0]
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f000 f814 	bl	800e900 <_free_r>
 800e8d8:	4631      	mov	r1, r6
 800e8da:	e7ef      	b.n	800e8bc <_reclaim_reent+0x8c>
 800e8dc:	2500      	movs	r5, #0
 800e8de:	e7ef      	b.n	800e8c0 <_reclaim_reent+0x90>
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}
 800e8e2:	bf00      	nop
 800e8e4:	24000014 	.word	0x24000014

0800e8e8 <__malloc_lock>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__malloc_lock+0x8>)
 800e8ea:	f7ff bf7b 	b.w	800e7e4 <__retarget_lock_acquire_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	24005b8c 	.word	0x24005b8c

0800e8f4 <__malloc_unlock>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__malloc_unlock+0x8>)
 800e8f6:	f7ff bf76 	b.w	800e7e6 <__retarget_lock_release_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	24005b8c 	.word	0x24005b8c

0800e900 <_free_r>:
 800e900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e902:	2900      	cmp	r1, #0
 800e904:	d044      	beq.n	800e990 <_free_r+0x90>
 800e906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e90a:	9001      	str	r0, [sp, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f1a1 0404 	sub.w	r4, r1, #4
 800e912:	bfb8      	it	lt
 800e914:	18e4      	addlt	r4, r4, r3
 800e916:	f7ff ffe7 	bl	800e8e8 <__malloc_lock>
 800e91a:	4a1e      	ldr	r2, [pc, #120]	; (800e994 <_free_r+0x94>)
 800e91c:	9801      	ldr	r0, [sp, #4]
 800e91e:	6813      	ldr	r3, [r2, #0]
 800e920:	b933      	cbnz	r3, 800e930 <_free_r+0x30>
 800e922:	6063      	str	r3, [r4, #4]
 800e924:	6014      	str	r4, [r2, #0]
 800e926:	b003      	add	sp, #12
 800e928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e92c:	f7ff bfe2 	b.w	800e8f4 <__malloc_unlock>
 800e930:	42a3      	cmp	r3, r4
 800e932:	d908      	bls.n	800e946 <_free_r+0x46>
 800e934:	6825      	ldr	r5, [r4, #0]
 800e936:	1961      	adds	r1, r4, r5
 800e938:	428b      	cmp	r3, r1
 800e93a:	bf01      	itttt	eq
 800e93c:	6819      	ldreq	r1, [r3, #0]
 800e93e:	685b      	ldreq	r3, [r3, #4]
 800e940:	1949      	addeq	r1, r1, r5
 800e942:	6021      	streq	r1, [r4, #0]
 800e944:	e7ed      	b.n	800e922 <_free_r+0x22>
 800e946:	461a      	mov	r2, r3
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	b10b      	cbz	r3, 800e950 <_free_r+0x50>
 800e94c:	42a3      	cmp	r3, r4
 800e94e:	d9fa      	bls.n	800e946 <_free_r+0x46>
 800e950:	6811      	ldr	r1, [r2, #0]
 800e952:	1855      	adds	r5, r2, r1
 800e954:	42a5      	cmp	r5, r4
 800e956:	d10b      	bne.n	800e970 <_free_r+0x70>
 800e958:	6824      	ldr	r4, [r4, #0]
 800e95a:	4421      	add	r1, r4
 800e95c:	1854      	adds	r4, r2, r1
 800e95e:	42a3      	cmp	r3, r4
 800e960:	6011      	str	r1, [r2, #0]
 800e962:	d1e0      	bne.n	800e926 <_free_r+0x26>
 800e964:	681c      	ldr	r4, [r3, #0]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	6053      	str	r3, [r2, #4]
 800e96a:	4421      	add	r1, r4
 800e96c:	6011      	str	r1, [r2, #0]
 800e96e:	e7da      	b.n	800e926 <_free_r+0x26>
 800e970:	d902      	bls.n	800e978 <_free_r+0x78>
 800e972:	230c      	movs	r3, #12
 800e974:	6003      	str	r3, [r0, #0]
 800e976:	e7d6      	b.n	800e926 <_free_r+0x26>
 800e978:	6825      	ldr	r5, [r4, #0]
 800e97a:	1961      	adds	r1, r4, r5
 800e97c:	428b      	cmp	r3, r1
 800e97e:	bf04      	itt	eq
 800e980:	6819      	ldreq	r1, [r3, #0]
 800e982:	685b      	ldreq	r3, [r3, #4]
 800e984:	6063      	str	r3, [r4, #4]
 800e986:	bf04      	itt	eq
 800e988:	1949      	addeq	r1, r1, r5
 800e98a:	6021      	streq	r1, [r4, #0]
 800e98c:	6054      	str	r4, [r2, #4]
 800e98e:	e7ca      	b.n	800e926 <_free_r+0x26>
 800e990:	b003      	add	sp, #12
 800e992:	bd30      	pop	{r4, r5, pc}
 800e994:	24005b90 	.word	0x24005b90

0800e998 <_init>:
 800e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99a:	bf00      	nop
 800e99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e99e:	bc08      	pop	{r3}
 800e9a0:	469e      	mov	lr, r3
 800e9a2:	4770      	bx	lr

0800e9a4 <_fini>:
 800e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a6:	bf00      	nop
 800e9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9aa:	bc08      	pop	{r3}
 800e9ac:	469e      	mov	lr, r3
 800e9ae:	4770      	bx	lr
